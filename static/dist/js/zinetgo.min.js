var populateCustomers = function(apiUrl, allOption, selectedId){
	$.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#customerId').html('');
                if(allOption){
                    $('#customerId').append('<option value="-1">All Customers</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#customerId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name + ' - ' + row.mobile + '</option>');
                }
                $("#customerId").select2({
				  placeholder: "Select a customer",
				  allowClear: allOption? false: true
				});
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populatePortfolio = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#portfolioId').html('');
                if(allOption){
                    $('#portfolioId').append('<option value="-1">All Vendors</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#portfolioId').append('<option value="' + row.portfolio.id + '"' + (row.portfolio.id === selectedId? "selected": "" ) +'>' + row.portfolio.name + ' - ' + row.portfolio.mobile + '</option>');
                    $('#itemId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name+ '</option>');
                }
                $("#portfolioId").select2({
                  placeholder: "Select a vendor",
                  allowClear: allOption? false: true
                });
                $("#itemId").select2({
                  placeholder: "Select a service",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateItemByMp = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#itemId').html('');
                if(allOption){
                    $('#itemId').append('<option value="-1">Services</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#itemId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name+ '</option>');
                }
                $("#itemId").select2({
                  placeholder: "Select a service",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateProducts = function(url, allOption) {
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if(data.data) {
                $('#productId').html('');
                if(allOption) {
                    $('#productId').append('<option value="-1">All Products</option>');
                }
                for (i=0; i<data.data.length; i++) {
                    var row =  data.data[i];
                    $('#productId').append('<option value="' +row.id + '">' +row.name +  '</option>');
                }
                $("#productId").select2({
                    placeholder: "Select Product",
                    allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toaster.options.closeButton = true;
            toaster.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateAssets = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#assetId').html('');
                if(allOption){
                    $('#assetId').append('<option value="-1">All Assets</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#assetId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.assetId  + ' - ' + row.description + '</option>');
                }
                $("#assetId").select2({
                  placeholder: "Select a assetId",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateVendors = function(apiUrl, allOption,selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#vendorId').html('');
                if(allOption){
                    $('#vendorId').append('<option value="-1">All Vendors</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#vendorId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name + ' - ' + row.mobile + '</option>');
                }
            }
        },
        error: function(data) {
            //alert(data);
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateEmployees = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#employeeId').html('');
                if(allOption){
                    $('#employeeId').append('<option value="-1">All Employees</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#employeeId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name + ' - ' + row.mobile + '</option>');
                }
                $("#employeeId").select2({
                  placeholder: "Select an employee",
                  allowClear: allOption? false: true,
                  width: "100%"
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateEmployee = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('.employee').html('');
                if(allOption){
                    $('.employee').append('<option value="-1">All Employees</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('.employee').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name + ' - ' + row.mobile + '</option>');
                }
                $(".employee").select2({
                  placeholder: "Select an employee",
                  allowClear: allOption? false: true,
                  width: "100%"
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateCategories = function(apiUrl, allOption,selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#categoryId').html('');
                if(allOption){
                    $('#categoryId').append('<option value="-1">All Categories</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#categoryId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name  + '</option>');
                }
                $("#categoryId").select2({
                  placeholder: "Select an category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateActivityType = function(apiUrl, allOption,selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#activityTypeId').html('');
                if(allOption){
                    $('#activityTypeId').append('<option value="-1">All Categories</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#activityTypeId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.activityType + '</option>');
                }
                $("#activityTypeId").select2({
                  placeholder: "Select an type",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateLeadSources = function(apiUrl, allOption){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#aggregatorId').html('');
                if(allOption){
                    $('#aggregatorId').append('<option value="-1">All Lead Sources</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#aggregatorId').append('<option value="' + row.id + '">' + row.name + ' - ' + row.website + '</option>');
                }
                $("#aggregatorId").select2({
                  placeholder: "Select a Lead Source",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateLeads = function(apiUrl, allOption){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#leadId').html('');
                if(allOption){
                    $('#leadId').append('<option value="-1">All Leads</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#leadId').append('<option value="' + row.id + '">' + row.leadId + '</option>');
                }
            }
        },
        error: function(data) {
            //alert(data);
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateCenters = function(apiUrl, allOption){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#centerId').html('');
                if(allOption){
                    $('#centerId').append('<option value="-1">All Centers</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#centerId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#centerId").select2({
                  placeholder: "Select a center",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateModes = function(url,allOption){
	$('#modeType').change(function() {
        if ($(this).val() === 'bank') {
            $('#bankOption').removeClass('hide');
            //$('#cashOption').addClass('hide');
            populateBankList(url,allOption);

        } else {
            $('#bankOption').addClass('hide');
           // $('#cashOption').addClass('hide');
        }
    });
}

var populateTransactionTypes = function(allOption){
    $('#type').change(function() {
        if ($(this).val() === 'receipt') {
            $('#customerOption').removeClass('hide');
            $('#vendorOption').addClass('hide');

            $("#customerId").select2({
              placeholder: "Select a customer",
              allowClear: allOption? false: true
            });

        } else if ($(this).val() === 'payment') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').removeClass('hide');

            $("#vendorId").select2({
              placeholder: "Select a vendor",
              allowClear: allOption? false: true
            });
            
        } else {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
        }
    });
}

var populateItems = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#itemId').html('');
                if(allOption){
                    $('#itemId').append('<option value="-1">All Items</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#itemId').append('<option value="' + row.id + '"'+ (row.id === selectedId? "selected": "") +'>' + row.name + (row.price != undefined ? ' - ' + row.price : '') + '</option>');
                }
                $("#itemId").select2({
                  placeholder: "Select an item",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


function formatState (state) {
  if (!state.id) { return state.text; }
  var $state = $(
    '<span><img src="vendor/images/flags/' + state.element.value.toLowerCase() + '.png" class="img-flag" /> ' + state.text + '</span>'
  );
  return $state;
};


var populateBankList = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#bankAccount').html('');
                if(allOption){
                    $('#bankAccount').append('<option value="-1">All Banks</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#bankAccount').append('<option value="' + row.id + '">' + row.bankName + ' - ' + row.accountNo + '</option>');
                }
                $("#bankAccount").select2({
				  placeholder: "Select a bank account",
				  allowClear: allOption? false: true
				});
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateExpenseCategories = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#expenseCategoryId').html('');
                if(allOption){
                    $('#expenseCategoryId').append('<option value="-1">All Expense Categories</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#expenseCategoryId').append('<option value="' + row.id + '">' + row.cName + '</option>');
                }
                $("#expenseCategoryId").select2({
                  placeholder: "Select a category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateEventTypes = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#eventTypeId').html('');
                if(allOption){
                    $('#eventTypeId').append('<option value="-1">All Event Types</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#eventTypeId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#eventTypeId").select2({
                  placeholder: "Select an event type",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateMembers = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#memberId').html('');
                if(allOption){
                    $('#memberId').append('<option value="-1">All Members</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#memberId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#memberId").select2({
                  placeholder: "Select a member",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateActivityTypes = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#activityTypeId').html('');
                if(allOption){
                    $('#activityTypeId').append('<option value="-1">All Activity Types</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#activityTypeId').append('<option value="' + row.id + '">' + row.activityType + '</option>');
                }
                $("#activityTypeId").select2({
                  placeholder: "Select an activity type",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateProductCategory = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#categoryId').html('');
                if(allOption){
                    $('#categoryId').append('<option value="-1">All Categories</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#categoryId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#categoryId").select2({
                  placeholder: "Select a category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateCenterTypes = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#centerTypeId').html('');
                if(allOption){
                    $('#centerTypeId').append('<option value="-1">All Center Types</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#centerTypeId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#centerTypeId").select2({
                  placeholder: "Select an Center type",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateEmpDesignation = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#designationId').html('');
                if(allOption){
                    $('#designationId').append('<option value="-1">All Designations</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#designationId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#designationId").select2({
                  placeholder: "Select a designation",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateEmpDepartment = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#departmentId').html('');
                if(allOption){
                    $('#departmentId').append('<option value="-1">All Departments</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#departmentId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#departmentId").select2({
                  placeholder: "Select a department",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateTaskCategory = function(apiUrl, allOption){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#taskCategoryId').html('');
                if(allOption){
                    $('#taskCategoryId').append('<option value="-1">All Categories</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#taskCategoryId').append('<option value="' + row.id + '">' + row.name +  '</option>');
                }
                $("#taskCategoryId").select2({
                  placeholder: "Select a Category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateLeaveType = function(url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#leaveTypeId').html('');
                if(allOption){
                    $('#leaveTypeId').append('<option value="-1">All Types</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#leaveTypeId').append('<option value="' + row.id + '">' + row.name +  '</option>');
                }
                $("#leaveTypeId").select2({
                  placeholder: "Select a Category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateSalaryComponent = function (url, allOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#salaryComponentId').html('');
                if(allOption){
                    $('#salaryComponentId').append('<option value="-1">All salary Components</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#salaryComponentId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#salaryComponentId").select2({
                  placeholder: "Select a Salary Component",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateBlogCategories = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#blogCategoriesId').html('');
                if(allOption){
                    $('#blogCategoriesId').append('<option value="-1">All Categories</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#blogCategoriesId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + (row.displayName || row.name) + '</option>');
                }
                $("#blogCategoriesId").select2({
                  placeholder: "Select a category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}


var populateItemCategory = function (url, allOption, noneOption){
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#itemCategoryId').html('');
                if(allOption){
                    $('#itemCategoryId').append('<option value="-1">All Categories</option>');
                }
                if(noneOption){
                    $('#itemCategoryId').append('<option value=""></option>');
                }
                for (var i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#itemCategoryId').append('<option value="' + row.id + '">' + row.name + '</option>');
                }
                $("#itemCategoryId").select2({
                  placeholder: "Select a Category",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var populateTrunetoItem = function(apiUrl, allOption, selectedId){
    $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#mpServiceId').html('');
                if(allOption){
                    $('#mpServiceId').append('<option value="-1">All Services</option>');
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#mpServiceId').append('<option value="' + row.id + '"' + (row.id === selectedId? "selected": "" ) +'>' + row.name + '</option>');
                }
                $("#mpServiceId").select2({
                  placeholder: "Select a service",
                  allowClear: allOption? false: true
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });
}

var addBank = function(url, refreshUrl){
	$("#addBankInfo").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/mode?psize=2000&token=<%= user.token %>';
        var data = {
            bankName: $('#mBankName').val(),
            accountNo: $('#mBankAccountNo').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New bank added successfully.");

                populateBankList(refreshUrl,false);
                //window.location.replace("/sales-entry");
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addCustomer = function(url, refreshUrl){
	$("#addCustomer").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/customer?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#mCustomerName').val(),
            mobile: $('#mCustomerMobile').val() !== ''? $('#mCustomerMobile').val() : null,
            email: $('#mCustomerEmail').val() !== ''? $('#mCustomerEmail').val() : null,
            address: $('#mCustomerAddress').val() !== ''? $('#mCustomerAddress').val() : null
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Customer added successfully.");

                populateCustomers(refreshUrl,false,data.result.id);
                //window.location.replace("/sales-entry");
            },
            error: function(data) {
                toastr.options.closeButton = true;
                toastr.error(data.responseJSON.error);
            }
        });
        event.preventDefault();
    });
}


var addVariation = function(url, refreshUrl){
    $("#addVariation").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/customer?psize=2000&token=<%= user.token %>';
        var data = {
            displayName: $('#vName').val(),
            price: $('#vPrice').val(),
            quantity: $('#vQuantity').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Customer added successfully.");
                location.reload();
                //populateCustomers(refreshUrl,false);
                //window.location.replace("/sales-entry");
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addVendor = function(url, refreshUrl){  
    $("#addVendor").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            mobile: $('#mVendorMobile').val(),
            name: $('#mVendorName').val(),
            email: $('#mVendorEmail').val(),
            address: $('#mVendorAddress').val(),
            description:$('#mVendorDescription').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Vendor added successfully.");
                //window.location.replace("/vendors");
                populateVendors(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}


var addEmployee = function(url, refreshUrl){  
    $("#addEmployee").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#mEmployeeName').val(),
            mobile: $('#mEmployeeMobile').val(),
            email: $('#mEmployeeEmail').val(),
            type: $('#mEmployeeType').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Employee added successfully.");
                //window.location.replace("/sales-entry");
                populateEmployees(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addVendor = function(url, refreshUrl){  
    $("#addVendor").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#mVendorName').val(),
            mobile: $('#mVendorMobile').val(),
            email: $('#mVendorEmail').val(),
            address: $('#mVendorAddress').val(),
            description: $('#mVendorDescription').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Vendor added successfully.");
                //window.location.replace("/sales-entry");
                populateVendors(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addCategory = function(url, refreshUrl){  
    $("#addCategory").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#cName').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Category added successfully.");
                //window.location.replace("/sales-entry");
                populateCategories(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addActivityType = function(url, refreshUrl){  
    $("#addActivityType").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#activityType').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New activity type added successfully.");
                //window.location.replace("/sales-entry");
                populateCategories(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addExpenseCategories = function(url, refreshUrl){  
    $("#addExpenseCategories").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            cName: $('#mExpenseCategoryName').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Expense Categories added successfully.");
                //window.location.replace("/sales-entry");
                populateExpenseCategories(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addEventTypes = function(url, refreshUrl){  
    $("#addEventType").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#mEventTypeName').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Event Type added successfully.");
                //window.location.replace("/sales-entry");
                populateEventTypes(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}


var addActivityTypes = function(url, refreshUrl){  
    $("#addActivityType").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            activityType: $('#activityType').val(),
            description: $('#activityTypeDescription').val(),
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Activity Type added successfully.");
                //window.location.replace("/sales-entry");
                populateActivityTypes(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addProductCategory = function(url, refreshUrl){  
    $("#addProductCategories").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#categoryName').val(),
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Category added successfully.");
                //window.location.replace("/sales-entry");
                populateProductCategory(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}


var addCenterTypes = function(url, refreshUrl){  
    $("#addCenterType").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#centerType').val(),
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Center Type added successfully.");
                //window.location.replace("/sales-entry");
                populateCenterTypes(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}


var addEmpDesignation = function(url, refreshUrl){  
    $("#addEmpDesignation").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#mDesignationName').val()
        };


        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success(" New Designation added successfully.");
                //window.location.replace("/sales-entry");
                populateEmpDesignation(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}


var addEmpDepartment = function(url, refreshUrl){  
    $("#addEmpDepartment").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#mDepartmentName').val()
        };


        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success(" New Department added successfully.");
                //window.location.replace("/sales-entry");
                populateEmpDepartment(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addItem = function(url, refreshUrl){
    $("#addItem").on('click', function(event) {
        var data = {
            name: $('#mItemName').val(),
            price: $('#mItemPrice').val(),
            type: $('#mItemType').val(),
            unit: $('#mItemUnit').val(),
            description: $('#mItemDescription').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Item added successfully.");

                populateItems(refreshUrl,false);
                //window.location.replace("/sales-entry");
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addTaskCategory = function(url, refreshUrl){  
    $("#addTaskCategory").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#tName').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Task Category added successfully.");
                //window.location.replace("/sales-entry");
                populateTaskCategory(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addMembers = function(url, refreshUrl){  
    $("#addMembers").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#memberName').val(),
            mobile: $('#memberMobile').val(),
            dateOfBirth: $('#dateOfBirth').val(),
            startDate: $('#startDate').val(),
            designation: $('#designation').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Committee Member added successfully.");
                //window.location.replace("/sales-entry");
                populateMembers(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addLeave = function(url, refreshUrl){
    $("#addLeaveType").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/mode?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#name').val(),
            maxNagativeBal: $('#maxNagativeBal').val(),
            salaryComponentId: $('#salaryComponentId').val(),
            maxDaysAlloted: $('#maxDaysAlloted').val()
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New bank added successfully.");

                populateLeaveType(refreshUrl,false);
                //window.location.replace("/sales-entry");
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addBlogCategories = function(url, refreshUrl){  
    $("#addBlogCategories").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#blogCategoryName').val(),
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Category added successfully.");
                //window.location.replace("/sales-entry");
                populateBlogCategories(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var addItemCategory = function(url, refreshUrl){  
    $("#addItemCategories").on('click', function(event) {
        //var url = '<%= api.serverUrl %>/api/vendor?psize=2000&token=<%= user.token %>';
        var data = {
            name: $('#itemCategoryName').val(),
        };

        $.ajax({
            url: url,
            type: 'POST',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("New Category added successfully.");
                //window.location.replace("/sales-entry");
                populateItemCategory(refreshUrl,false);
            },
            error: function(data) {
                //alert(data);
                toastr.options.closeButton = true;
                toastr.error("Something went wrong. Please try again with all the fields.");
            }
        });
        event.preventDefault();
    });
}

var buildUrl = function(serverUrl, api, token, psize ,data){
	var url = serverUrl + '/api/' + api + '/?token=' + token;
	if(psize )
		url = url + '&psize=' + psize;
    if(data){
        url = url + '&sId=' + data;
    }
	return url;
}

var alertMessages = {
    //internaleServerError: 'Internal server error! Please try again in some time. Call us at <a href="tel:+918026644556"><i class="fa fa-phone-square"></i> +91 80 2664 4556</a> or email to <a href="mailto:care@onground.in"><i class="fa fa-envelope"></i> care@onground.in</a> for any help.',
    //validationError: 'Form validation failed! Please correct them and submit again. Call us at <a href="tel:+918026644556"><i class="fa fa-phone-square"></i> +91 80 2664 4556</a> or email to <a href="mailto:care@onground.in"><i class="fa fa-envelope"></i> care@onground.in</a> for any help.',
    internaleServerError: 'Internal server error! Please try again.',
    validationError: 'Form validation failed! Please try again.',
    successMessage: ''
};

var showAlertMessage = function(msgType, message, alertType, faIcon){
    $('#form-alerts').html('');
    var msg = '';
    console.log(message);
    switch(msgType){
        case 'internaleServerError':
            msg = message.responseJSON.error;
            break;
        case 'validationError':
            msg = alertMessages.validationError;
            break;
        case 'successMessage':
            msg = message;
            break;
        default:
            msg = alertMessages.internaleServerError;
    }

    $.bootstrapGrowl(
        msg, {
        ele: 'body', // which element to append to
        type: alertType, // (null, 'info', 'danger', 'success', 'warning')
        offset: {
            from: 'top',
            amount: 0
        }, // 'top', or 'bottom'
        align: 'center', // ('left', 'right', or 'center')
        width: 350, // (integer, or 'auto')
        delay: 15000, // Time while the message will be displayed. It's not equivalent to the *demo* timeOut!
        allow_dismiss: true, // If true then will display a cross to close the popup.
        stackup_spacing: 10 // spacing between consecutively stacked growls.
    });

    // App.alert({ 
    //     message: msg,
    //     type: alertType,
    //     closeInSeconds: 60,
    //     container: '#form-alerts', // alerts parent container place: 'append', // append or prepent in container type: 'success', // alert's type message: 'Test alert', // alert's message
    //     close: true, // make alert closable reset: false, // close all previouse alerts first focus: true, // auto scroll to the alert after shown closeInSeconds: 10000, // auto close after defined seconds
    //     icon: 'fa ' + faIcon // put icon class before the message 
    // });
}

var getDate = function(dateString){
    var newDateStr = '';
    if(dateString != null && dateString != ''){
        var dateParts = dateString.split("-");
        // format it in yyyy/mm/dd
        if(dateParts && dateParts.length == 3){
            newDateStr = dateParts[2] + '/' + dateParts[1] + '/' + dateParts[0];
            return newDateStr;
        }
    }else{
        return null;    
    }
}

var getDateTime = function(dateString){
    var newDateStr = '';
    if(dateString != null && dateString != ''){
        newDateStr =  moment(dateString, "DD MMMM YYYY - HH:mm").format("YYYY-MM-DD HH:mm");
            return newDateStr;
    }else{
        return null;    
    }
}


var scrollToTop = function(selector){
    var body = $("html, body");
    body.stop().animate({scrollTop:0}, '500', 'swing', function() { 
        //alert("Finished animating");
    });
}

var titleCase = function(str) {
    return str.toLowerCase().split(' ').map(function(word) {
        return (word.charAt(0).toUpperCase() + word.slice(1));
    }).join(' ');
}

var formatModes = function(modeStr) {
    return (modeStr != undefined ? (modeStr == 'bank' ? '<span class="label label-sm label-info"> '+ titleCase(modeStr) + ' </span>':'<span class="label label-sm label-warning"> '+ titleCase(modeStr) + ' </span>') : '');
}

var formatItemTypes = function(itemType) {
    return (itemType != undefined ? (itemType == 'product' ? '<span class="label label-sm label-success"> '+ titleCase(itemType) + ' </span>':'<span class="label label-sm label-info"> '+ titleCase(itemType) + ' </span>') : '');
}

var formatTransactionTypes = function(typeStr) {
    return (typeStr != undefined ? (typeStr == 'receipt' ? '<span class="label label-sm label-success"> '+ titleCase(typeStr) + ' </span>':'<span class="label label-sm label-danger"> '+ titleCase(typeStr) + ' </span>') : '');
}

var formatExpenseFor = function(forStr) {
    var str = '';
    if(forStr != undefined && forStr != null){
        if(forStr === 'self'){
            str = '<span class="label label-sm label-info"> '+ titleCase(forStr);
        }else if(forStr === 'customer'){
            str = '<span class="label label-sm label-success"> '+ titleCase(forStr);
        }else if(forStr === 'vendor'){
            str = '<span class="label label-sm label-warning"> '+ titleCase(forStr);
        }else if(forStr === 'employee'){
            str = '<span class="label label-sm label-danger"> '+ titleCase(forStr);
        }
    }
    return str;
}

var formatStatus = function(forStr) {
    var str = '';
    if(forStr != undefined && forStr != null){
        if(forStr === 'To-do'){
            str = '<span class="label label-sm label-danger"> '+ titleCase(forStr);
        }else if(forStr === 'In Progress'){
            str = '<span class="label label-sm label-warning"> '+ titleCase(forStr);
        }else if(forStr === 'Completed'){
            str = '<span class="label label-sm label-success"> '+ titleCase(forStr);
        }
    }
    return str;
}

var formatLeadRows = function(leadStatus){
    var style = '';
    if(leadStatus != undefined && leadStatus != null){
        if(leadStatus === 'NEW'){
            style = '';
        }else if(leadStatus === 'CONVERTED'){
            style = 'style="background-color:green;color:white;"';
        }else if(leadStatus === 'PAID'){
            style = 'style="background-color:#28348c;color:white;"';
        }else if(leadStatus === 'ON HOLD'){
            style = 'style="background-color:orange;color:white;"';
        }else if(leadStatus === 'CANCELLED'){
            style = 'style="background-color:red;color:white;"';
        }
    }
    return style;
}

var formatLeadStatus = function(oStatus) {
    var str = '';
    if(oStatus != undefined && oStatus != null){
        if(oStatus === 'NEW'){
            str = '<span class="label label-sm label-info"> '+ titleCase(oStatus);
        }else if(oStatus === 'CONVERTED'){
            str = '<span class="label label-sm" style="background-color:#1bbc9b;"> '+ titleCase('Confirmed');
        }else if(oStatus === 'PAID'){
            str = '<span class="label label-sm" style="background-color:#05bbd8;"> '+ titleCase('Paid Online');
        }else if(oStatus === 'ON HOLD'){
            str = '<span class="label label-sm label-warning"> '+ titleCase(oStatus);
        }else if(oStatus === 'CANCELLED'){
            str = '<span class="label label-sm label-danger"> '+ titleCase(oStatus);
        }
    }
    return str;

    // <option value="NEW" selected="true">New</option>
    // <option value="INSPECTION PENDING">Inspection Pending</option>
    // <option value="INSPECTION IN PROGRESS">Inspection in Progress</option>
    //     <option value="QUOTE PENDING">Quote Pending</option>
    // <option value="QUOTE SEND">Quote Send</option>
    // <option value="QUOTE APPROVED">Quote Approved</option>
    // <option value="ON HOLD">On Hold</option>
    // <option value="CANCELLED">Cancelled</option>
    // <option value="CONVERTED">Converted</option>
}

var formatTaskStatus = function(oStatus) {
    var str = '';
    if(oStatus != undefined && oStatus != null){
        if(oStatus === 'To-do'){
            str = '<span class="label label-sm label-danger"> '+ titleCase(oStatus);
        }else if(oStatus === 'Completed'){
            str = '<span class="label label-sm" style="background-color:#1bbc9b;"> '+ titleCase('Completed');
        }else if(oStatus === 'In-Progress'){
            str = '<span class="label label-sm label-warning"> '+ titleCase('In-Progress');
        }else if(oStatus === 'Cancelled'){
            str = '<span class="label label-sm" style="background-color:blue;"> '+ titleCase('Cancelled');
        }
    }
    return str;
}

var formatVisitorStatus = function(oStatus) {
    var str = '';
    if(oStatus != undefined && oStatus != null){
        if(oStatus === 'visit'){
            str = '<span class="label label-sm label-info"> '+ titleCase('visit');
        }else if(oStatus === 'confirmed'){
            str = '<span class="label label-sm" style="background-color:#1bbc9b;"> '+ titleCase('Confirmed');
        }else if(oStatus === 'measurement'){
            str = '<span class="label label-sm label-warning"> '+ titleCase('Measurement');
        }else if(oStatus === 'unsuccessful'){
            str = '<span class="label label-sm label-danger"> '+ titleCase('Unsuccessful');
        }else if(oStatus === 'quotation'){
            str = '<span class="label label-sm" style="background-color:blue;"> '+ titleCase('Quotation');
        }
    }
    return str;

    // <option value="NEW" selected="true">New</option>
    // <option value="INSPECTION PENDING">Inspection Pending</option>
    // <option value="INSPECTION IN PROGRESS">Inspection in Progress</option>
    //     <option value="QUOTE PENDING">Quote Pending</option>
    // <option value="QUOTE SEND">Quote Send</option>
    // <option value="QUOTE APPROVED">Quote Approved</option>
    // <option value="ON HOLD">On Hold</option>
    // <option value="CANCELLED">Cancelled</option>
    // <option value="CONVERTED">Converted</option>
}


var formatOrderStatus = function(oStatus) {
    var str = '';
    if(oStatus != undefined && oStatus != null){
        if(oStatus === 'open'){
            str = '<span class="label label-sm label-danger"> '+ titleCase(oStatus);
        }else if(oStatus === 'packing'){
            str = '<span class="label label-sm label-info"> '+ titleCase(oStatus);
        }else if(oStatus === 'shipping'){
            str = '<span class="label label-sm label-warning"> '+ titleCase(oStatus);
        }else if(oStatus === 'dispatched'){
            str = '<span class="label label-sm label-warning"> '+ titleCase(oStatus);
        }else if(oStatus === 'delivered'){
            str = '<span class="label label-sm label-success"> '+ titleCase(oStatus);
        }else if(oStatus === 'cancelled'){
            str = '<span class="label label-sm label-danger"> '+ titleCase(oStatus);
        }
    }
    return str;
}


var initDateRange = function(apiUrl) {
    if (!jQuery().daterangepicker) {
        return;
    }
    $('#date-range').daterangepicker({
        "ranges": {
            'Today': [moment(), moment()],
            'Yesterday': [moment().subtract('days', 1), moment().subtract('days', 1)],
            'Last 7 Days': [moment().subtract('days', 6), moment()],
            'Last 30 Days': [moment().subtract('days', 29), moment()],
            'This Month': [moment().startOf('month'), moment().endOf('month')],
            'Last Month': [moment().subtract('month', 1).startOf('month'), moment().subtract('month', 1).endOf('month')]
        },
        format: 'MM/DD/YYYY',
        separator: ' to ',
        startDate: moment().subtract('days', 29),
        endDate: moment(),
        "locale": {
            "format": "MM/DD/YYYY",
            "separator": " - ",
            "applyLabel": "Apply",
            "cancelLabel": "Cancel",
            "fromLabel": "From",
            "toLabel": "To",
            "customRangeLabel": "Custom",
            "daysOfWeek": ["Su","Mo","Tu","We","Th","Fr","Sa"],
            "monthNames": ["January","February","March",
                "April","May","June","July","August","September","October","November","December"
            ],
            "firstDay": 1
        },
        opens: (App.isRTL() ? 'right' : 'left'),
    }, function(start, end, label) {
        $('#date-range span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        // alert(start.format('YYYY/MM/DD'));
        // alert(end.format('YYYY/MM/DD'));
        //alert(label);
        if(apiUrl != undefined){
            if(apiUrl.includes('bank-ledger')){
                filterBankLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('cash-ledger')){
                    filterCashLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('customer-ledger')){
                filterCustomersLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if (apiUrl.includes('expenses')){
                filterExpensesLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('sales-ledger')){
                filterSalesLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('vendor-ledger')){
                filterVendorLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('purchase-ledger')){
                filterPurchaseLedgerData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('dashboard/orders')) {
                filterOrderDashboardData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null);
            }else if(apiUrl.includes('dashboard')){
                filterLeadDashboardData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null);
            }else if(apiUrl.includes('orders')){
                filterOrderData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('leads')){
                filterLeadsListData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('events')){
                filterEventsData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('visitors')){
                filterVisitorData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }else if(apiUrl.includes('blog')){
                filterBlogsListData(apiUrl, start.format('YYYY/MM/DD'), end.format('YYYY/MM/DD'), null, null);
            }

        }
    });

    $('#date-range span').html(moment().subtract('days', 29).format('MMMM D, YYYY') + ' - ' + moment().format('MMMM D, YYYY'));
    $('#date-range').show();
}

var getIdPath = function(id){
    return id.split('-').join('/');
};

$('.group-checkable').change(function() {
    if($(this).is(":checked")) {
        $('.btn-delete').removeClass('hidden');
    }else{
        $('.btn-delete').addClass('hidden');
    }
});


// var sendSMS = function(url, refreshUrl){
//     $("#sendSMS").on('click', function(event) {
//         //var url = '<%= api.serverUrl %>/api/mode?psize=2000&token=<%= user.token %>';
//         var data = {
//             mobile: $('#mMobile').val(),
//             message: $('#mMessage').val()
//         };

//         $.ajax({
//             url: url,
//             type: 'POST',
//             dataType: "json",
//             data: JSON.stringify(data),
//             contentType: "application/json; charset=utf-8",
//             success: function(data) {
//                 toastr.options.closeButton = true;
//                 toastr.success("Your message submitted successfully.");

//                // populateBankList(refreshUrl,false);
//                 //window.location.replace("/sales-entry");
//             },
//             error: function(data) {
//                 //alert(data);
//                 toastr.options.closeButton = true;
//                 toastr.error("Something went wrong. Please try again with all the fields.");
//             }
//         });
//         event.preventDefault();
//     });
// }

/*$('#sendSMSBtn').on('click', function() {
    $('#sendSMSModal').modal();
    $("#mMobile").val( $('#smsMobile').val() );
    $("#mMessage").val( $('#smsMessage').val() );
});
*/

function showStuff (id){
   $("#"+id).removeClass("hidden");
}


function getToken(){
    return $('#apiToken').val();
}

function getAPIUrl(){
    return $('#apiUrl').val();
}
$().ready(function() {
    var categoriesAddForm = $('#categories_add_form');
    var categoriesAddFormErrors = $('.alert-danger', categoriesAddForm);
    var categoriesAddFormSuccess = $('.alert-success', categoriesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    categoriesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    categoriesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (activity, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = categoriesAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                displayName: $('#dName').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Categories added successfuly. You can view the Categories details in <a href="/blog/categories"><i class="fa fa-file-text-o"></i> Categories</a>.','success','fa-check fa-lg');
                    window.location.replace("/admin/blog/categories");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', categoriesAddForm).change(function () {
        categoriesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        categoriesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});

$().ready(function() {
    var categoriesData = null;

    var updateDetails = function(){

        $('#displayName').html(categoriesData.blogCategory.name);
        $('#displayDescription').html(categoriesData.blogCategory.description);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                categoriesData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
    
        $('#name').val(categoriesData.blogCategory.name);
        $('#description').val(categoriesData.blogCategory.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/admin/blog/categories';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var categoriesEditForm = $('#categories_edit_form');
    var categoriesEditFormErrors = $('.alert-danger', categoriesEditForm);
    var categoriesEditFormSuccess = $('.alert-success', categoriesEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    categoriesEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    categoriesEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           name: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(categoriesEditForm.attr('action'));
            var url = categoriesEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#categoriesId').val(),
                name: $('#name').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Categories updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/admin/blog/categories");
                    categoriesData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', categoriesEditForm).change(function () {
        categoriesEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        categoriesEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterCategoriesData = function(url){
    //delete the table
    $("#categories").remove();
    $("#categories_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="categories">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#categories .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getCategoriesData(url);
};

var goToCategories = function(categoriesId){
    window.location = '/admin/blog/categories/' + categoriesId;
};

var getCategoriesData = function(url){
    // App.blockUI({
    //     target: '#categories_portlet',
    //     animate: true
    // });

    // window.setTimeout(function() {
    //     App.unblockUI('#categories_portlet');
    // }, 500);
    App.blockUI();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToCategories("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#categories');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#categories_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    //App.unblockUI('#categories_portlet');
    App.unblockUI();
};

$().ready(function() {
    getCategoriesData(buildUrl(getAPIUrl(),'blog-categories', getToken(), 3000));
});
$().ready(function() {
    var postsAddForm = $('#posts_add_form');
    var postsAddFormErrors = $('.alert-danger', postsAddForm);
    var postsAddFormSuccess = $('.alert-success', postsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    postsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    postsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            title: {
                required: true
            },
            displayTitle: {
                required: true
            },
            shortDescription: {
                required: true
            },
            content: {
                required: true
            },
            categoryId: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (activity, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = postsAddForm.attr('action');
            var data = {
                title: $('#title').val(),
                content: $('#summernote123').summernote('code'),
                categoryId: $('#blogCategoriesId').val(),
                tags: $('#tags').val(),
                coverImage: $('#coverImage').val(),
                shortDescription: $('#shortDescription').val(),
            };

            if($("#breaking").val()== 'true'){
                data.isBreakingNews = true;
            }else{
                data.isBreakingNews = false;
            }
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Post added successfuly. You can view the Post details in <a href="/blog/posts"><i class="fa fa-file-text-o"></i> Posts</a>.','success','fa-check fa-lg');
                    window.location.replace("/admin/blog/posts");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', postsAddForm).change(function () {
        postsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        postsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});

populateBlogCategories(buildUrl(getAPIUrl(), 'blog-categories', getToken(), 3000));
$().ready(function() {
    var widget = uploadcare.Widget('[role=uploadcare-uploader]');
    widget.onUploadComplete(function(info) {
      // Handle uploaded file info.
      //alert('info : '+ JSON.stringify(info));
      $('#coverImagePreview').attr('src',info.cdnUrl + '-preview');
    });
     // Same as above:
    widget.onChange(function(file) {
      if (file) {
        file.done(function(info) {
          // Handle uploaded file info.
          //alert('file : '+ JSON.stringify(file));
        });
      };
    });

    $('#breakingnews').change(function() {
        if($("#breakingnews").is(':checked')){
            $("#breaking").val(true);
        }else{
            $("#breaking").val(false);
        }       
    });
});
$().ready(function() {
    var blogPostsData = null;

    $("#updateStatus").click(function() {
        var id = $(this).attr("data-id");
        var v = $(this).attr("value");
        var uNm = $(this).attr("data-uname");
        var data = {};
        if(v === 'Pending'){
            data.approvedStatus ='Approved',
            data.id = id;
        }else if(v === 'Approved'){
            data.approvedStatus ='Pending',
            data.id = id;
        }
        
        var url = getAPIUrl()+'/api/blog/'+id+'?token='+ getToken();
        $.ajax({
            url: url,
            type: 'PUT',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                window.location.replace("/admin/blog/posts/"+id);
            },
            error: function(data) {
            }
        })
    });
    
    $.ajax({
        url: buildUrl(getAPIUrl(),'blogs',getToken(),10),
        type: 'GET',
        success: function(data) {
            if (data) {
                blogPostsData = data;
                updateBlogList();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});
$().ready(function() {
    var postsAddForm = $('#posts_update_form');
    var postsAddFormErrors = $('.alert-danger', postsAddForm);
    var postsAddFormSuccess = $('.alert-success', postsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    postsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    postsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            title: {
                required: true
            },
            content: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (activity, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = postsAddForm.attr('action');
            var data = {
                title: $('#title').val(),
                content: $('#summernote123').summernote('code'),
                shortDescription: $('#shortDescription').val(),
                categoryId: $('#blogCategoriesId').val(),
                tags: $('#tags').val(),
                coverImage: $('#coverImage').val(),
                approvedStatus: $('#status').val()

            };

            if($("#breaking").val()== 'true'){
                data.isBreakingNews = true;
            }else{
                data.isBreakingNews = false;
            }
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Post added successfuly. You can view the Post details in <a href="/blog/posts"><i class="fa fa-file-text-o"></i> Posts</a>.','success','fa-check fa-lg');
                    window.location.replace("/admin/blog/posts");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', postsAddForm).change(function () {
        postsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        postsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });    
});

$().ready(function() {
  var token = getToken();
  var sUrl = getAPIUrl();
                
    populateBlogCategories(buildUrl(sUrl,'blog-categories', token, '3000'),false, $('#catId').val());


          $('#summernote123').summernote({
            height: 500,
            focus: true,
            dialogsInBody: true,
            toolbar: [
              ['style', ['style']],
              ['font', ['bold', 'italic', 'underline', 'clear']],
              ['fontname', ['fontname']],
              ['color', ['color']],
              ['para', ['ul', 'ol', 'paragraph']],
              ['height', ['height']],
              ['table', ['table']],
              ['insert', ['media', 'link', 'hr', 'uploadcare',  'video']],
              ['view', ['fullscreen', 'codeview']],
              ['help', ['help']]
            ],
            uploadcare: {
              // uploadcare widget options,
              // see https://uploadcare.com/documentation/widget/#configuration
              // button name (default is Uploadcare)
              buttonLabel: '',
              // font-awesome icon name (you need to include font awesome on the page)
              buttonIcon: 'picture-o',
              // text which will be shown in button tooltip
              tooltipText: 'Upload files or video or something',
              //tooltipText: '',
              publicKey: 'e016898a23c03d30dc92', // set your API key
              crop: 'free',
              tabs: 'all',
              multiple: true
            }
          });
     
    
        UPLOADCARE_PUBLIC_KEY = 'e016898a23c03d30dc92';

    $('#summernote123').summernote('code', $('#scontent').val());

    
    var widget = uploadcare.Widget('[role=uploadcare-uploader]');
    widget.onUploadComplete(function(info) {
      // Handle uploaded file info.
      //alert('info : '+ JSON.stringify(info));
      $('#coverImagePreview').attr('src',info.cdnUrl + '-preview');
    });
     // Same as above:
    widget.onChange(function(file) {
      if (file) {
        file.done(function(info) {
          // Handle uploaded file info.
          //alert('file : '+ JSON.stringify(file));
        });
      };
    });
    $('#breakingnews').change(function() {
        if($("#breakingnews").is(':checked')){
            $("#breaking").val(true);
        }else{
            $("#breaking").val(false);
        }       
    });
});


var filterBlogsListData = function(url,fromDate, toDate,  name, mobile){
    //delete the table
    $("#blogs").remove();
    $("#blogs_wrapper").remove();
    var uuu = '/admin/blog/posts'
    if(fromDate != null){
        uuu = uuu + '?fromDate=' + fromDate;
    }
    if(toDate != null){
        uuu = uuu + '&toDate=' + toDate;
    }
    uuu = uuu + '&pno=' + $('#pno').val() + '&psize=' + $('#psize').val();
    if($('#option').val() !=''){
        uuu = uuu +'&q='+$('#option').val();
    }
    
    window.location = uuu;
    initializeTable();
};

$("#tableData > tr > td.clickable").hover(function() {
    $(this).css('cursor','pointer');
}, function() {
    $(this).css('cursor','auto');
});

$('.checkboxes').change(function() {
    if($('.checkboxes:checked').length >= 1){
        $('.btn-action').removeClass('hidden');

        $('#smsMobile').val(number);
        $('#smsMessage').val(msg);
        var msg = $(this).data('service') + '\n' + $(this).data('name') + '\n' + $(this).data('mobile')  + '\n' + $(this).data('jdate') +'\n' + $(this).data('address')+'\n' + $(this).data('price');
        var number = parseInt($(this).data('empid'));
        
    }else{
        $('.btn-action').addClass('hidden');
    }
});
$('.checkboxes').change(function() {
    if($('.checkboxes:checked').length === 1){
        $('#edit').removeClass('hidden');
    }else{
        $('#edit').addClass('hidden');
    } 
});
var initializeTable = function(){
    var table = $('#blog');
   
    //var tableWrapper = jQuery('#customers_wrapper');

    table.find('.group-checkable').change(function () {
        
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $('.checkboxes').prop("checked", true);
            } else {
                $('.checkboxes').prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#blogs_portlet');
};
$('#delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/blog/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/admin/blog/posts';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});


$('#edit').on('click',function(event){

   event.preventDefault();
    var checkboxValues = [];
    $('.checkboxes:checked').map(function() {
        checkboxValues.push($(this).data('id'));
    });
    if(checkboxValues.length === 1){
        var url = '/admin/blog/posts/'+  checkboxValues[0] + '/edit'
        window.location = url;
    }

});

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
        $("#customerId").select2({allowClear: false});
    });
    $('#searched').on('click', function(){
        var npath ='//admin/blog/posts';
       var psize = $("#psize").val();
       var pno = $('#pno').val();

        if($("#from").val() !="" && $("#to").val() !=""){
          npath =npath+'?q='+$('#query').val()+'&fromDate='+$("#from").val()+'&toDate='+$("#to").val()+'&pno='+ pno +'&psize='+ psize;
        }else{
         npath =npath+'?q='+$('#query').val()+'&pno='+ pno +'&psize='+ psize;
        }
        window.location = npath;
    });


    //filterVisitorData(buildUrl(getAPIUrl(),'blogs', getToken(), 5000));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterBlogsListData(
            buildUrl(getAPIUrl(),'admin/blog/posts', getToken(), 5000), 
            fromDate, toDate, 
            $('#customerId').val()
        );

    });
    initDateRange(buildUrl(getAPIUrl(),'admin/blog/posts', getToken(), 5000));
    //filterVisitorData(buildUrl(getAPIUrl(),'blogs', getToken(), 5000));
});



$(document).ready(function() {
  $('.pagination').pagination({
      items: $('#total').val(),
      itemsOnPage: $('#psize').val(),
      currentPage: $('#pno').val(),
      cssStyle: 'light-theme',
      onPageClick: function(pageNumber){
          //var sortby = $j("#sortby").val();
          //alert(pageNumber);
          var psize = $("#psize").val();
          var pno = pageNumber;
          var path = window.location.pathname;
         // window.location.href; // Returns full URL
         var npath ='/admin/blog/posts';
         if($("#from").val() !="" && $("#to").val() !=""){
             npath =npath+'?fromDate='+$("#from").val()+'&toDate='+$("#to").val()+'&pno='+ pageNumber +'&psize='+ psize;
         }else{
             npath =npath+'?pno='+ pageNumber +'&psize='+ psize;
            }
            if($('#option').val() !=''){
                npath = npath +'&q='+$('#option').val();
            }
          window.location = npath;
        }
    });
  $('.checkboxes').change(function() {
        if($('.checkboxes:checked').length >= 1){
            $('.btn-delete').removeClass('hidden');
        }else{
            $('.btn-delete').addClass('hidden');
        }
    });

  $("#tableData > tr > td.clickable").hover(function() {
            $(this).css('cursor','pointer');
        }, function() {
            $(this).css('cursor','auto');
    });

  if($('#psize').val()==25){
    $('.page-size').html('25');

  }else if($('#psize').val()==50){
    $('.page-size').html('50');

  }else if($('#psize').val()==100){
     $('.page-size').html('100');

  }else{
    $('.page-size').html('10');
  }
});
var filterPostsData = function(url){
    $("#subscriptions").remove();
    $("#posts_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="posts">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#subscriptions .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Title </th>'+
                    '<th> Category </th>'+
                    '<th> Status </th>'+
                    '<th> Author </th>'+
                    '<th> Tags </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getPostsData(url);
};


var goToSubscriptions = function(subscriptionsId){
    window.location = '/admin/blog/subscriptions/' + subscriptionsId;
};

var getSubscriptionsData = function(url){
    App.blockUI({
        target: '#subscriptions_portlet',
        animate: true
    });


    window.setTimeout(function() {
        App.unblockUI('#subscriptions_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    //var shortContent = row.content.substring(0,200);
                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable"> ' + (row.createdOn != undefined ? (new Date(row.createdOn).toISOString().slice(0, 10)) : '') + ' </td>' +
                            '<td class="clickable"> ' + (row.emailId != undefined ? row.emailId : '') + ' </td>' +
                        '</tr>'

                        
                    );
                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};
getSubscriptionsData(buildUrl(getAPIUrl(),'subscribes', getToken(), 3000));
var initializeTable = function(){
    var table = $('#subscriptions');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#subscriptions_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#subscriptions_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/subscribe/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/admin/blog/subscribers';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});



 
$().ready(function() {
    var authorsData = null;

    var updateDetails = function(){   

      //  var date = moment(new Date(authorsData.applicant.updatedOn)); 
 //alert(authorsData.applicant.jobopening.jobTitle);
        $('#name').html(authorsData.applicant.name);
        $('#mobile').html(authorsData.applicant.mobile);
        $('#message').html(authorsData.applicant.message);
        $('#jobId').html(authorsData.applicant.jobId);
        $('#email').html(authorsData.applicant.email); 
        $('#jobTitle').html(authorsData.applicant.jobopening.jobTitle); 
        $('#resume').html('click here').attr('href',authorsData.applicant.resume);
        $('#createdOn').html(authorsData.applicant.createdOn);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            if (data) {
                authorsData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
    
        $('#authorName').val(authorsData.name);
        $('#authorMobile').val(authorsData.mobile);
        $('#authorEmail').val(authorsData.email);
        $('#authorType').val(authorsData.blogUserType);
        $('#authorAddress').val(authorsData.address);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                     window.location = '/careers/applicant-list';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var authorsEditForm = $('#authors_edit_form');
    var authorsEditFormErrors = $('.alert-danger', authorsEditForm);
    var authorsEditFormSuccess = $('.alert-success', authorsEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    authorsEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    authorsEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           authorName: {
                required: true
            },
            authorMobile: {
                required: true,
                number: true
            },
            authorEmail: {
                required:true,
                email:true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(authorsEditForm.attr('action'));
            var url = authorsEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#authorId').val(),
                name: $('#authorName').val(),
                mobile: $('#authorMobile').val(),
                email: $('#authorEmail').val(),
                email: $('#authorType').val(),
                address: $('#authorAddress').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Authors updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/admin/users");
                    authorsData = data1.applicant;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', authorsEditForm).change(function () {
        authorsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        authorsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterJobsData = function(url){
    //delete the table

    $("#jobs").remove();
    $("#jobs_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="jobs">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#jobs .checkboxes" /> </th>'+
                    '<th> Applicant Name </th>'+
                    '<th> E-Mail Address </th>'+
                    '<th> Mobile Number </th>'+
                    '<th> Job Applied For </th>'+
                    '<th> Submission Time </th>'+ 
                    '<th> Resume </th>'+ 
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>' 
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getJobsData(url);
};

var goToDetail = function(applicantId){
    window.location =  '/careers/applicant-details/' + applicantId;
};
var goToFile =function(resume){
window.open(resume,'_blank');
}

var getJobsData = function(url){
    App.blockUI({
        target: '#jobs_portlet',
        animate: true
    });

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToDetail("'+row.id +'")> ' + (row.email != undefined ? row.email : '') + ' </td>' +
                            '<td class="clickable" onclick=goToDetail("'+row.id +'")> ' + (row.mobile != undefined ? row.mobile : '') + ' </td>' +
                            '<td class="clickable" onclick=goToDetail("'+row.id +'")> ' + (row.jobopenings != undefined ? row.jobopenings.jobTitle : '') + ' </td>' +
                            '<td class="clickable" onclick=goToDetail("'+row.id +'")> ' + (row.createdOn != undefined ? new Date(row.createdOn).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td class="clickable" onclick=goToFile("'+row.resume +'") > ' + ( '<a href="#">Download</a>') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#jobs');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#jobs_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#jobs_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/applicant/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/careers/applicant-list';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});

$('.filter-btn').on('click', function(){
    $('.table-filters').toggleClass("hide");});
//     $("#customerId").select2({allowClear: false});
// });

getJobsData(buildUrl(getAPIUrl(),'applicant', getToken(), 3000));

// $('#filter-submit').on('click', function(event){
//     // var str = $('#reportrange span').html();
//     // var dates = str.split(" - ");
//     // var fromDate = moment(dates[0], "MMMM D, YYYY");
//     // var toDate = moment(dates[1], "MMMM D, YYYY");

//     var fromDate = toDate = null;
//     event.preventDefault();

//     filterOrderData(
//         buildUrl(getAPIUrl(),'orders', getToken(), 3000),
//         fromDate, toDate,
//         $('#customerId').val()
//     );

// });

// initDateRange(buildUrl(getAPIUrl(),'orders', getToken(), 3000));
// populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000), true);
var filterJobsData = function(url){
    //delete the table

    $("#jobs").remove();
    $("#jobs_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="jobs">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#jobs .checkboxes" /> </th>'+
                    '<th> Job Title </th>'+
                    '<th> Experience </th>'+
                    '<th> Openings </th>'+ 
                    '<th> Updated On </th>'+
                    '<th> Last Date </th>'+  
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>' 
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getJobsData(url);
};

var goToJobDetail = function(jobId){
    window.location =  '/careers/job-detail/' + jobId;
};

var getJobsData = function(url){
    App.blockUI({
        target: '#jobs_portlet',
        animate: true
    });

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToJobDetail("'+row.id +'")> ' + (row.jobTitle != undefined ? row.jobTitle: '') + ' </td>' +
                            '<td class="clickable" onclick=goToJobDetail("'+row.id +'")> ' + (row.reqExperience != undefined ? row.reqExperience : '') + ' </td>' +
                            '<td class="clickable" onclick=goToJobDetail("'+row.id +'")> ' + (row.noOfOpenings != undefined ? row.noOfOpenings : '') + '</td>' +
                            '<td class="clickable" onclick=goToJobDetail("'+row.id +'")> ' + (row.updatedOn != undefined ? new Date(row.updatedOn).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td class="clickable" onclick=goToJobDetail("'+row.id +'")> ' + (row.lastDate != undefined ? new Date(row.lastDate).toISOString().slice(0, 10) : '') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#jobs');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#jobs_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#jobs_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/jobopening/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/careers/jobs-list';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});

$('.filter-btn').on('click', function(){
    $('.table-filters').toggleClass("hide");});
//     $("#customerId").select2({allowClear: false});
// });

getJobsData(buildUrl(getAPIUrl(),'jobopenings', getToken(), 3000));

// $('#filter-submit').on('click', function(event){
//     // var str = $('#reportrange span').html();
//     // var dates = str.split(" - ");
//     // var fromDate = moment(dates[0], "MMMM D, YYYY");
//     // var toDate = moment(dates[1], "MMMM D, YYYY");

//     var fromDate = toDate = null;
//     event.preventDefault();

//     filterOrderData(
//         buildUrl(getAPIUrl(),'orders', getToken(), 3000),
//         fromDate, toDate,
//         $('#customerId').val()
//     );

// });

// initDateRange(buildUrl(getAPIUrl(),'orders', getToken(), 3000));
// populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000), true);

$().ready(function() {
    var jobsAddForm = $('#jobs_add_form');
    var jobsAddFormErrors = $('.alert-danger', jobsAddForm);
    var jobsAddFormSuccess = $('.alert-success', jobsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    jobsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // } 
    }) 
    jobsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            jobTitle: {
                required: true
            },
            company: {
                required: true   
            },
            noOpening: {
            	required:true,
                number: true
            },
            experience: {
                required: true
            },
            postedDate: {
                required: true 
            },
            qualification: {
                required: true 
            },
            salary: {
                required: true,
                number: true
            } 
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = jobsAddForm.attr('action');
            var data = {
            	jobTitle: $('#jobTitle').val(),
                shortDescription: $('#company').val(),
                noOfOpenings: $('#noOpening').val(),
                reqExperience: $('#experience').val(),
                postedDate: getDate($('#postedDate').val()),
                lastDate: getDate($('#expireDate').val()),
                jobLocation: $('#location').val(),
                jobDescription: $('#description').val(),
                qualification: $('#qualification').val(),
                jobType: $('#jobType').val(),
                shifTtype: $('#shiftType').val(),
                salary: $('#salary').val(),
                skillLevel: $('#skill').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Job added successfuly. You can view the jobs details in <a href="/careers/job-list"><i class="fa fa-graduate"></i> job openings</a>.','success','fa-check fa-lg');
                     window.location.replace("/careers/jobs-list");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', jobsAddForm).change(function () {
        jobsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        jobsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
 
$().ready(function() {
    var authorsData = null;

    var updateDetails = function(){   

      //  alert(JSON.stringify(authorsData));
      //  var date = moment(new Date(authorsData.jobopening.updatedOn)); 

        $('#description').html(authorsData.jobopening.jobDescription);
        $('#location').html(authorsData.jobopening.jobLocation);
        $('#jobTitle').html(authorsData.jobopening.jobTitle);
        $('#jobType').html(authorsData.jobopening.jobType);
        $('#noOpening').html(authorsData.jobopening.noOfOpenings);
        $('#qualification').html(authorsData.jobopening.qualification);
        $('#experience').html(authorsData.jobopening.reqExperience);
        $('#salary').html(authorsData.jobopening.salary);
        $('#shiftType').html(authorsData.jobopening.shifTtype);
        $('#skill').html(authorsData.jobopening.skillLevel);
        $('#postedDate').html(authorsData.jobopening.updatedOn);
        $('#expireDate').html(authorsData.jobopening.lastDate);
        $('#company').html(authorsData.jobopening.shortDescription);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                authorsData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
    
        $('#authorName').val(authorsData.name);
        $('#authorMobile').val(authorsData.mobile);
        $('#authorEmail').val(authorsData.email);
        $('#authorType').val(authorsData.blogUserType);
        $('#authorAddress').val(authorsData.address);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                     window.location = '/careers/jobs-list';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var authorsEditForm = $('#authors_edit_form');
    var authorsEditFormErrors = $('.alert-danger', authorsEditForm);
    var authorsEditFormSuccess = $('.alert-success', authorsEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    authorsEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    authorsEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           authorName: {
                required: true
            },
            authorMobile: {
                required: true,
                number: true
            },
            authorEmail: {
                required:true,
                email:true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(authorsEditForm.attr('action'));
            var url = authorsEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#authorId').val(),
                name: $('#authorName').val(),
                mobile: $('#authorMobile').val(),
                email: $('#authorEmail').val(),
                email: $('#authorType').val(),
                address: $('#authorAddress').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Authors updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/admin/users");
                    authorsData = data1.jobopening;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', authorsEditForm).change(function () {
        authorsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        authorsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var jobAddForm = $('#jobs_add_form');
    var jobAddFormErrors = $('.alert-danger', jobAddForm);
    var jobAddFormSuccess = $('.alert-success', jobAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    jobAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    jobAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            jobTitle: {
                required: true
            },
            company: {
                required: true
            },
            noOpening: {
                required: true
            },
            experience: {
                required: true
            },
            postedDate: {
                required: true
            },
            expireDate: {
                required: true
            },
            location:{
                required: true
            },
            qualification:{
                required: true
            },
            jobType:{
                required: true
            },
            shiftType:{
                required: true
            },
            salary:{
                required: true
            },
            skill:{
                required: true
            },
            description:{
                required: true
            },



        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(jobAddForm.attr('action')); 
            var url = jobAddForm.attr('action');
            var data = {
                id: $('#jobId').val(),
                jobTitle: $('#jobTitle').val(),
                shortDescription : $('#company').val(),
                noOfOpenings: $('#noOpening').val(),
                experience: $('#reqExperience').val(),
                postedDate: getDate($('#postedDate').val()),
                lastDate: getDate($('#expireDate').val()),
                jobLocation: $('#location').val(),
                jobDescription: $('#description').val(),
                qualification: $('#qualification').val(),
                jobType: $('#jobType').val(),
                shifTtype: $('#shiftType').val(),
                salary: $('#salary').val(),
                skillLevel: $('#skill').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    toastr.options.closeButton = true;
                    toastr.clear();
                    toastr.success('Job Updated successfuly. You can view the Jobs in Job List.'); 
                    showAlertMessage('successMessage','Job Updated successfuly. You can view the Jobs in <a href="/jobs-list"><i class="icon-basket-loaded"></i> Job List</a>.','success','fa-check fa-lg');
                    window.location.replace("/careers/jobs-list");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', jobAddForm).change(function () {
        jobAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        jobAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : jobAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();  
                
                
               
                $('.lid').html(data.jobopening.name);
                $('#jobTitle').val(data.jobopening.jobTitle);
                $('#company').val(data.jobopening.shortDescription);
                $('#noOpening').val(data.jobopening.noOfOpenings);
                $('#experience').val(data.jobopening.reqExperience);
                $('#postedDate').val(data.jobopening.postedDate);
                $('#expireDate').val(data.jobopening.lastDate); 
                $('#location').val(data.jobopening.jobLocation);
                $('#description').val(data.jobopening.jobDescription);
                $('#qualification').val(data.jobopening.qualification);
                $('#jobType').val(data.jobopening.jobType);
                $('#shiftType').val(data.jobopening.shifTtype);
                $('#salary').val(data.jobopening.salary);
                $('#skill').val(data.jobopening.skillLevel);
                
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

 //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        jobAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var assetAddForm = $('#asset_add_form');
    var assetAddFormErrors = $('.alert-danger', assetAddForm);
    var assetAddFormSuccess = $('.alert-success', assetAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
   assetAddForm.on('submit', function() {
   // alert('hiii');
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    assetAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tagId: {
                required: true
            },
            type: {
                required: true
            },
            status: {
                required: true
            }
        },


        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = assetAddForm.attr('action');
            //alert('url---'+url);
            var data = {
                tagId: $('#tagId').val(),
                type: $('#type').val(),
                allocatedTo: $('#customerId').val(),
                description: $('#description').val(),
                price: $('#price').val(),
                astatus: $('#status').val(),
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Asset added successfuly. You can view the asset details in <a href="/asset"><i class="fa fa-notebook"></i> Asset</a>.','success','fa-check fa-lg');
                    window.location.replace("/asset");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }
    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', assetAddForm).change(function () {
        assetAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });
 populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
 addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
 });
$().ready(function() {
    var assetData = null;

    //{"address":"jp nagar","country":"India","email":"ashutosh@zinetgo.com","landmark":"govt high school","mobile":"9886681566","name":"Ashu","pinCode":"560078"}

    var updateDetails = function(){
       // alert(JSON.stringify(assetData));

        /*$("#cDiv").append(
            '<div class="table-responsive">'+
                '<table class="table table-hover table-bordered table-striped">'+
                    '<thead>'+
                        '<tr>'+

                            '<th> Product </th>'+
                            '<th> Item Status </th>'+
                            '<th> Original Price </th>'+
                            '<th> Price </th>'+
                            '<th> Quantity </th>'+
                            '<th> Tax Amount </th>'+
                            '<th> Tax Percent </th>'+
                            '<th> Discount Amount </th>'+
                            '<th> Total </th>'+
                        '</tr>'+
                    '</thead>'+
                    '<tbody id="cData"></tbody>'+
                '</table>'+
            '</div>'
        );*/
        $('#displayTagId').html(assetData.tagId);
        $('#displayCustomer').html(assetData.customer.name);
        $('#displayCustomerEmail').html(assetData.customer.email);
        $('#displayCustomerMobile').html(assetData.customer.mobile);
        $('#displayPrice').html(assetData.price);
        $('#displayStatus').html(assetData.astatus);
        $('#displayDescription').html(assetData.description);
        $('#displayType').html(assetData.type);
    };
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                assetData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
         //populate edit form data
        
        $('#tagId').val(assetData.tagId);
        $('#type').val(assetData.type);
        $('#price').val(assetData.price);
        $('#description').val(assetData.description);
        $('#astatus').val(assetData.astatus);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/asset';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var assetAddForm = $('#asset_edit_form');
    var assetAddFormErrors = $('.alert-danger', assetAddForm);
    var assetAddFormSuccess = $('.alert-success', assetAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    assetAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    assetAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tagId:{
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(orderAddForm.attr('action'));
            var url = assetAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id: $('#assetId').val(),
                tagId: $('#tagId').val(),
                customerId: $('#customerId').val(),
                type: $('#type').val(),
                description: $('#description').val(),
                price: $('#price').val(),
                astatus: $('#astatus').val()
            };
           
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Order updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/asset");
                    assetData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', assetAddForm).change(function () {
        assetAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });
    $("#download-me").click(function(event){
        var doc = new jsPDF();
        doc.canvas.height = 72 * 11;
        doc.canvas.width = 72 * 8.5;
        
        //$('#mPrice').val(data.price);
        var specialElHandlers = { 
         '#remove-me': function(element, renderer){
           return true;
         }
        };
        var source = window.document.getElementsByClassName("portlet-body form")[0];
        doc.fromHTML(
            source,
           15, 
           15, 
           {
            width: 180,
            'elementHandlers': specialElHandlers
            });
            event.preventDefault();
            doc.save('quotation.pdf');
        });


     populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
       
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
});
$().ready(function() {
    var assetAddForm = $('#asset_add_form');
    var assetAddFormErrors = $('.alert-danger', assetAddForm);
    var assetAddFormSuccess = $('.alert-success', assetAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    assetAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    assetAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tagId: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(ordersAddForm.attr('action'));
            var url = assetAddForm.attr('action');
            var data = {
                id: $('#assetId').val(),
                tagId: $('#tagId').val(),
                customerId: $('#customerId').val(),
                type: $('#type').val(),
                description: $('#description').val(),
                price: $('#price').val(),
                astatus: $('#astatus').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                   // alert('save');
                    //showAlertMessage('successMessage','orders added successfuly. You can view the orders details in <a href="/orderss"><i class="icon-basket-loaded"></i> orderss</a>.','success','fa-check fa-lg');
                    window.location.replace("/asset");
                },
                error: function(data) {
                                      //  alert('errors');

                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', assetAddForm).change(function () {
        assetAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    
    


    $.ajax({
       // url: $('#url').val(),
        url : assetAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
           // alert(JSON.stringify(data));
            if (data) {
                populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), '3000'),false, data.customerId);
                

               
                addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), '3000'));

                $('.lid').html(data.assetId);
                $('#customerId').val(data.customerId);
                $('#tagId').val(data.tagId);
                $('#description').val(data.description);
                $('#price').val(data.price);
                $('#astatus').val(data.astatus);
                $('#type').val(data.type);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

     populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));

});
var filterAssetListData = function(url, startDate, endDate, employeeId){
    //delete the table
    $("#asset_list").remove();
    $("#asset_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="asset_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#asset_list .checkboxes" /> </th>'+
                        '<th> Asset Id </th>'+
                        '<th> Tag Id </th>'+
                        '<th> Type </th>'+
                        '<th> Allocated To </th>'+
                        '<th> Description </th>'+
                        '<th> Price </th>'+
                        '<th> Status </th>'+

                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    getassetListData(url);
};

var goToAsset = function(tokenId){
    window.location = '/asset/' + tokenId;
};

var getassetListData = function(url){
    
    App.blockUI({
        target: '#asset_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#asset_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    //alert(JSON.stringify(row));
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+ // onclick=goToEmployees("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id +'"/></td>' +
                            
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.assetId != undefined ? row.assetId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.tagId != undefined ? row.tagId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.type != undefined ? row.type: '') + ' </td>' +
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.customer != undefined ? row.customer.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.description != undefined ? row.description : '') + ' </td>' +
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.price != undefined ? row.price : '') + ' </td>' +
                            '<td class="clickable" onclick=goToAsset("'+row.id +'")>' + (row.astatus != undefined ? row.astatus: '') + ' </td>' +
                        '</tr>'
                    );
                    }

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }

           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }

    });
};

var initializeTable = function(){
    var table = $('#asset_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#asset_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#asset_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/asset/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Asset has been deleted successfully.", "success");
                            window.location = '/asset';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
    
});

getassetListData(buildUrl(getAPIUrl(),'assets', getToken(), 3000));


var filterOrderDashboardData = function(url, fromDate, toDate){
    //delete the table
    $("#posts").html('0');

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }

    getBlogDashboardData(url);
};

var getBlogDashboardData = function(url){
    App.blockUI({
        target: '#blogs_dashboard_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#blogs_dashboard_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data && data.status == 'ok') {
                $("#posts").html(data.blogs);
                $("#approved").html(data.approved);
                $("#pending").html(data.blogs-data.approved);
            }else{
                alert("error");
                $("#posts").html('0');
            }
           // initialize the table
           App.unblockUI('#blogs_dashboard_portlet');
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

/*getLeadDashboardData(buildUrl($('#url').val(),'dashboard/leads', $('#token').val(), 200));
initDateRange(buildUrl($('#url').val(),'dashboard/leads', $('#token').val(), 200));*/

getBlogDashboardData(buildUrl($('#url').val(),'dashboard/blogs', $('#token').val(), 200));

initDateRange(buildUrl($('#url').val(),'dashboard/blogs', $('#token').val(), 200));
var filterLeadDashboardData = function(url, fromDate, toDate){
    //delete the table
    $("#leads").html('0');
    $("#jobs").html('0');
    $("#sales").html('0');
    $("#average").html('0');

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }

    getLeadDashboardData(url);
};

var getLeadDashboardData = function(url){
    App.blockUI({
        target: '#leads_dashboard_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#leads_dashboard_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data && data.status == 'ok') {
                $("#leads").html(data.leads);
                $("#jobs").html(data.jobs);
                $("#sales").html(data.sales);
                $("#average").html(data.average);
            }else{
                $("#leads").html('0');
                $("#jobs").html('0');
                $("#sales").html('0');
                $("#average").html('0');
            }
           // initialize the table
           App.unblockUI('#leads_dashboard_portlet');
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};


getLeadDashboardData(buildUrl($('#url').val(),'dashboard/leads', $('#token').val(), 200));
initDateRange(buildUrl($('#url').val(),'dashboard/leads', $('#token').val(), 200));
var AppCalendar1 = function() {
    var evnt;
    return {
        //main function to initiate the module
        init: function(eData) {
            this.initCalendar1(eData);
        },

        initCalendar1: function(eventsData) {

            this.evnt = eventsData;
            //alert(JSON.stringify(eventsData));

            if (!jQuery().fullCalendar) {
                return;
            }

            var date = new Date();
            var d = date.getDate();
            var m = date.getMonth();
            var y = date.getFullYear();

            var h = {};

            if (App.isRTL()) {
                if ($('#calendar1').parents(".portlet").width() <= 720) {
                    $('#calendar1').addClass("mobile");
                    h = {
                        right: 'title, prev, next',
                        center: '',
                        left: 'agendaDay, agendaWeek, month, today'
                    };
                } else {
                    $('#calendar1').removeClass("mobile");
                    h = {
                        right: 'title',
                        center: '',
                        left: 'agendaDay, agendaWeek, month, today, prev,next'
                    };
                }
            } else {
                if ($('#calendar1').parents(".portlet").width() <= 720) {
                    $('#calendar1').addClass("mobile");
                    h = {
                        left: 'title, prev, next',
                        center: '',
                        right: 'today,month,agendaWeek,agendaDay'
                    };
                } else {
                    $('#calendar1').removeClass("mobile");
                    h = {
                        left: 'title',
                        center: '',
                        right: 'prev,next,today,month,agendaWeek,agendaDay'
                    };
                }
            }

            var initDrag = function(el) {
                // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
                // it doesn't need to have a start or end
                var eventObject = {
                    title: $.trim(el.text()) // use the element's text as the event title
                };
                // store the Event Object in the DOM element so we can get to it later
                el.data('eventObject', eventObject);
                // make the event draggable using jQuery UI
                el.draggable({
                    zIndex: 999,
                    revert: true, // will cause the event to go back to its
                    revertDuration: 0 //  original position after the drag
                });
            };

            var addEvent = function(title) {
                title = title.length === 0 ? "Untitled Event" : title;
                var html = $('<div class="external-event label label-default">' + title + '</div>');
                jQuery('#event_box').append(html);
                initDrag(html);
            };

            $('#external-events div.external-event').each(function() {
                initDrag($(this));
            });

            $('#event_add').unbind('click').click(function() {
                var title = $('#event_title').val();
                addEvent(title);
            });

            //predefined events
            $('#event_box').html("");
            // addEvent("My Event 1");
            // addEvent("My Event 2");
            // addEvent("My Event 3");
            // addEvent("My Event 4");
            // addEvent("My Event 5");
            // addEvent("My Event 6");

            $('#calendar1').fullCalendar('rerenderEvents');

            $('#calendar1').fullCalendar('destroy'); // destroy the calendar
            $('#calendar1').fullCalendar({ //re-initialize the calendar
                header: h,
                defaultView: 'month', // change default view with available options from http://arshaw.com/fullcalendar/docs/views/Available_Views/ 
                slotMinutes: 15,
                editable: false,
                droppable: false, // this allows things to be dropped onto the calendar !!!
                drop: function(date, allDay) { // this function is called when something is dropped

                    // retrieve the dropped element's stored Event Object
                    var originalEventObject = $(this).data('eventObject');
                    // we need to copy it, so that multiple events don't have a reference to the same object
                    var copiedEventObject = $.extend({}, originalEventObject);

                    // assign it the date that was reported
                    copiedEventObject.start = date;
                    copiedEventObject.allDay = allDay;
                    copiedEventObject.className = $(this).attr("data-class");

                    // render the event on the calendar
                    // the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                    $('#calendar1').fullCalendar('renderEvent', copiedEventObject, true);

                    // is the "remove after drop" checkbox checked?
                    if ($('#drop-remove').is(':checked')) {
                        // if so, remove the element from the "Draggable Events" list
                        $(this).remove();
                    }
                },
                events: this.evnt
            });

        }

    };

}();

jQuery(document).ready(function() {
    var leadsData = [];
    var tstatus =  $('#setStatus').val();
    var url = getAPIUrl()+ '/api/tasks?tStatus='+tstatus+'&token='+ getToken();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (var i = 0; i < data.data.length; i++) {
                    var lead = data.data[i];

                    var dateObj = new Date(lead.startDate);
                    var month = dateObj.getUTCMonth(); //months from 1-12
                    var day = dateObj.getUTCDate();
                    var year = dateObj.getUTCFullYear();
                    var hour = dateObj.getHours();
                    var minutes = dateObj.getMinutes();

                    var bgcolor = '';
                    if(lead.tStatus != undefined && lead.tStatus != null){
                        if(lead.tStatus === 'To-do'){
                            bgcolor = 'red';
                        }else if(lead.tStatus === 'Completed'){
                            bgcolor = 'green';
                        }else if(lead.tStatus === 'In-Progress'){
                            bgcolor = 'yellow';
                        }else if(lead.tStatus === 'Cancelled'){
                            bgcolor = 'grey';
                        }
                    }
                    leadsData.push({
                        title: lead.name,
                        start: new Date(lead.startDate),
                        url: lead.url,
                        backgroundColor: App.getBrandColor(bgcolor)
                    })
                }
                AppCalendar1.init(leadsData);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
   AppCalendar1.init(leadsData);
});

jQuery(document).ready(function() {
    var tstatus =  $('#setStatus').val();
    var url = getAPIUrl()+ '/api/tasks/today?tStatus='+tstatus+'&token='+ getToken();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#tTotal').html(data.ttotal);
                $('#cTotal').html(data.ctotal);
                $('#total').html(data.total);
                $('#pTotal').html(data.ptotal);
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#taskData').append(
                        '<li>'+
                        '<div class="task-checkbox">'+
                            '<label class="mt-checkbox mt-checkbox-single mt-checkbox-outline">'+
                                '<input type="checkbox" value="1" class="checkboxes" data-id="'+row.id+'">'+
                                '<span></span>'+
                            '</label>'+
                        '</div>'+
                        '<div class="task-title">'+
                            '<a href="/tasks/'+row.id+'"><span class="task-title-sp">'+row.name+'( '+moment(row.startDate).format("LT")+' )' +'</span></a>'+
                            '<span>'+formatTaskStatus(row.tStatus)+'</span>'+
                        '</div>'+
                        '</li>'
                    );
                }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});

$('.tStatus').on('click',function(event){
    var data = {
        tStatus:$(this).attr('data-id')
    };
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        var url = getAPIUrl()+ '/api/task/'+$(this).attr('data-id')+'?token='+ getToken();
        $.ajax({
            url: url,
            type: 'PUT',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                i++;
                if(i == count){
                    window.location.replace("/dashboard");
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });    
});

$('.status').on('click',function(event){
    var tStatus=$(this).attr('data-id');
    if(tStatus === 'All'){
        var sts = '';
    }else {
        var sts = tStatus;
    }
    window.location.replace('/dashboard?status='+sts);
});

$(document).on('show.bs.modal','#taskreschedule', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        var taskId = $(this).attr('data-id');
        $('#taskId').val(taskId);
    });
});


$('#addTask').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/task/'+$('#taskId').val()+'?token='+  $('#token').val();
    var url1 = $('#apiUrl').val()+ '/api/task?token='+  $('#token').val();
    var data = {
        description:$('#description').val(),
        tStatus:'Completed'
    };

    var data1 = {
        startDate: $('#tDate').val(),
        dueDate: $('#tDate').val(),
        description:$('#description').val(),
        tStatus:'To-do'
    };

    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            data1.url = data.result.url;
            data1.name =  data.result.name;
            $.ajax({
                url: url1,
                type: 'POST',
                data: JSON.stringify(data1),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    toastr.options.closeButton = true;
                    toastr.success("Task updated successfully.");
                    window.location = '/dashboard';

                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});
$().ready(function() {
    var carosalAddForm = $('#carosal_add_form');
    var carosalAddFormErrors = $('.alert-danger', carosalAddForm);
    var carosalAddFormSuccess = $('.alert-success', carosalAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    carosalAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    carosalAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            cPosition: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (carosal, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = carosalAddForm.attr('action');
            
            var data = new FormData();
            jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                data.append('fileToUpload', file);
            });
            data.append('text',$('#cText').val());
            data.append('position',parseInt($('#cPosition').val()));

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false,   // tell jQuery not to set contentType

                success: function(data) {
                    showAlertMessage('successMessage','Item added successfuly. You can view the item details in <a href="/crosal/home"><i class="icon-picture-o"></i> Carosals</a>.','success','fa-check fa-lg');
                    window.location.replace("/carosal/home");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', carosalAddForm).change(function () {
        carosalAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        carosalAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterCarosalsData = function(url){
    //delete the table
    $("#carosals").remove();
    $("#carosals_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-bordered table-hover">'+
            '<thead>'+
                '<tr role="row" class="heading">'+
                    '<th width="10%"> Image </th>'+
                    '<th width="60%"> Text On Image </th>'+
                    '<th width="20%"> Sort Order </th>'+
                    '<th width="5%"> </th>'+
                    '<th width="5%"> </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData">'+
            '</tbody>'+
        '</table>'
    );

    

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getCarosalsData(url);
};

var goToCarosal = function(centerId){
    window.location = 'carosal/home/' + centerId;
};

var getCarosalsData = function(url){
    App.blockUI({
        target: '#carosals_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#carosals_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                                
                        '<tr data-id="'+ row.id +'">'+
                            '<td>'+' <a href="'+(row.coverImage != undefined ? row.coverImage : "") + '" title="'+ row.text + '" class="fancybox-button" data-fancybox-group="fancybox-button">'+
                                       ' <img class="img-responsive" src='+(row.coverImage != undefined ? row.coverImage : '')+'></a></td>'+
                            '<td>'+
                                '<input type="text" class="form-control" data-text="'+ row.text +'" value="'+(row.text != undefined ? row.text : '')+'"> </td>'+
                            '<td>'+
                                '<input type="text" class="form-control" data-position="'+ row.position +'" value="'+(row.position != undefined ? row.position : '')+'"> </td>'+
                            '<td class="text-center">'+
                                '<a href="javascript:;" class="dt-button buttons-html5 btn blue btn-outline btn-save">'+
                                    '<i class="fa fa-save"></i> Save </a>'+
                            '</td>'+
                            '<td class="text-center">'+
                                '<a href="javascript:;" class="dt-button buttons-html5 btn red btn-outline btn-remove">'+
                                    '<i class="fa fa-times"></i> Remove </a>'+
                            '</td>'+
                        '</tr>'
                    );

                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                    $("a.fancybox-button").fancybox();
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#centers');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#centers_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#carosals_portlet');
};

    
    $(document).ready(function() {
    
        $(document).on("click",".btn-save",function() {
            alert("clicked");
            alert($(this).attr('data-text'));
        });
    });    

getCarosalsData(buildUrl(getAPIUrl(),'home/carosals', getToken(), 3000));

$('#filter-submit').on('click', function(event){
var str = $('#reportrange span').html();
var dates = str.split(" - "); 

event.preventDefault();
});

initDateRange(null);
var filterOrderDashboardData = function(url, fromDate, toDate){
    //delete the table
    $("#sales").html('0');
    $("#orders").html('0');
    $("#average").html('0');

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }

    getOrderDashboardData(url);
};

var getOrderDashboardData = function(url){
    App.blockUI({
        target: '#orders_dashboard_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#orders_dashboard_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data && data.status == 'ok') {
                $("#sales").html(data.sales);
                $("#orders").html(data.orders);
                $("#average").html(data.average);
            }else{
                $("#sales").html('0');
                $("#orders").html('0');
                $("#average").html('0');
            }
           // initialize the table
           App.unblockUI('#orders_dashboard_portlet');
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

getOrderDashboardData(buildUrl(getAPIUrl(),'dashboard/orders', getToken(), 3000));
initDateRange(buildUrl(getAPIUrl(),'dashboard/orders', getToken(), 3000));


var AppCalendar1 = function() {
    var evnt;
    return {
        //main function to initiate the module
        init: function(eData) {
            this.initCalendar1(eData);
        },

        initCalendar1: function(eventsData) {

            this.evnt = eventsData;
            //alert(JSON.stringify(eventsData));

            if (!jQuery().fullCalendar) {
                return;
            }

            var date = new Date();
            var d = date.getDate();
            var m = date.getMonth();
            var y = date.getFullYear();

            var h = {};

            if (App.isRTL()) {
                if ($('#calendar1').parents(".portlet").width() <= 720) {
                    $('#calendar1').addClass("mobile");
                    h = {
                        right: 'title, prev, next',
                        center: '',
                        left: 'agendaDay, agendaWeek, month, today'
                    };
                } else {
                    $('#calendar1').removeClass("mobile");
                    h = {
                        right: 'title',
                        center: '',
                        left: 'agendaDay, agendaWeek, month, today, prev,next'
                    };
                }
            } else {
                if ($('#calendar1').parents(".portlet").width() <= 720) {
                    $('#calendar1').addClass("mobile");
                    h = {
                        left: 'title, prev, next',
                        center: '',
                        right: 'today,month,agendaWeek,agendaDay'
                    };
                } else {
                    $('#calendar1').removeClass("mobile");
                    h = {
                        left: 'title',
                        center: '',
                        right: 'prev,next,today,month,agendaWeek,agendaDay'
                    };
                }
            }

            var initDrag = function(el) {
                // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
                // it doesn't need to have a start or end
                var eventObject = {
                    title: $.trim(el.text()) // use the element's text as the event title
                };
                // store the Event Object in the DOM element so we can get to it later
                el.data('eventObject', eventObject);
                // make the event draggable using jQuery UI
                el.draggable({
                    zIndex: 999,
                    revert: true, // will cause the event to go back to its
                    revertDuration: 0 //  original position after the drag
                });
            };

            var addEvent = function(title) {
                title = title.length === 0 ? "Untitled Event" : title;
                var html = $('<div class="external-event label label-default">' + title + '</div>');
                jQuery('#event_box').append(html);
                initDrag(html);
            };

            $('#external-events div.external-event').each(function() {
                initDrag($(this));
            });

            $('#event_add').unbind('click').click(function() {
                var title = $('#event_title').val();
                addEvent(title);
            });

            //predefined events
            $('#event_box').html("");
            // addEvent("My Event 1");
            // addEvent("My Event 2");
            // addEvent("My Event 3");
            // addEvent("My Event 4");
            // addEvent("My Event 5");
            // addEvent("My Event 6");

            $('#calendar1').fullCalendar('rerenderEvents');

            $('#calendar1').fullCalendar('destroy'); // destroy the calendar
            $('#calendar1').fullCalendar({ //re-initialize the calendar
                header: h,
                defaultView: 'month', // change default view with available options from http://arshaw.com/fullcalendar/docs/views/Available_Views/ 
                slotMinutes: 15,
                editable: false,
                droppable: false, // this allows things to be dropped onto the calendar !!!
                drop: function(date, allDay) { // this function is called when something is dropped

                    // retrieve the dropped element's stored Event Object
                    var originalEventObject = $(this).data('eventObject');
                    // we need to copy it, so that multiple events don't have a reference to the same object
                    var copiedEventObject = $.extend({}, originalEventObject);

                    // assign it the date that was reported
                    copiedEventObject.start = date;
                    copiedEventObject.allDay = allDay;
                    copiedEventObject.className = $(this).attr("data-class");

                    // render the event on the calendar
                    // the last `true` argument determines if the event "sticks" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                    $('#calendar1').fullCalendar('renderEvent', copiedEventObject, true);

                    // is the "remove after drop" checkbox checked?
                    if ($('#drop-remove').is(':checked')) {
                        // if so, remove the element from the "Draggable Events" list
                        $(this).remove();
                    }
                },
                events: this.evnt
            });

        }

    };

}();

jQuery(document).ready(function() {
    var leadsData = [];
    var tstatus =  $('#setStatus').val();
    var url = getAPIUrl()+ '/api/tasks?tStatus='+tstatus+'&token='+ getToken();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (var i = 0; i < data.data.length; i++) {
                    var lead = data.data[i];

                    var dateObj = new Date(lead.startDate);
                    var month = dateObj.getUTCMonth(); //months from 1-12
                    var day = dateObj.getUTCDate();
                    var year = dateObj.getUTCFullYear();

                    var bgcolor = '';
                    if(lead.tStatus != undefined && lead.tStatus != null){
                        if(lead.tStatus === 'To-do'){
                            bgcolor = 'red';
                        }else if(lead.tStatus === 'Completed'){
                            bgcolor = 'green';
                        }else if(lead.tStatus === 'In-Progress'){
                            bgcolor = 'yellow';
                        }else if(lead.tStatus === 'Cancelled'){
                            bgcolor = 'grey';
                        }
                    }
                    leadsData.push({
                        title: lead.name,
                        start: new Date(lead.startDate),
                        url: lead.url,
                        backgroundColor: App.getBrandColor(bgcolor)
                    })
                }
                AppCalendar1.init(leadsData);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
   AppCalendar1.init(leadsData);
});


jQuery(document).ready(function() {
    var tstatus =  $('#setStatus').val();
    var url = getAPIUrl()+ '/api/tasks/today?tStatus='+tstatus+'&token='+ getToken();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#tTotal').html(data.ttotal);
                $('#cTotal').html(data.ctotal);
                $('#total').html(data.total);
                $('#pTotal').html(data.ptotal);
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#taskData').append(
                        '<li>'+
                        '<div class="task-checkbox">'+
                            '<label class="mt-checkbox mt-checkbox-single mt-checkbox-outline">'+
                                '<input type="checkbox" value="1" class="checkboxes" data-id="'+row.id+'">'+
                                '<span></span>'+
                            '</label>'+
                        '</div>'+
                        '<div class="task-title">'+
                            '<a href="/tasks/'+row.id+'"><span class="task-title-sp">'+row.name+'( '+moment(row.startDate).format("LT")+' )' +'</span></a>'+
                            '<span>'+formatTaskStatus(row.tStatus)+'</span>'+
                        '</div>'+
                        '</li>'
                    );
                }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});

$('.tStatus').on('click',function(event){
    var data = {
        tStatus:$(this).attr('data-id')
    };
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        var url = getAPIUrl()+ '/api/task/'+$(this).attr('data-id')+'?token='+ getToken();
        $.ajax({
            url: url,
            type: 'PUT',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                i++;
                if(i == count){
                    window.location.replace("/dashboard");
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });    
});

$('.status').on('click',function(event){
    var tStatus=$(this).attr('data-id');
    if(tStatus === 'All'){
        var sts = '';
    }else {
        var sts = tStatus;
    }
    window.location.replace('/dashboard?status='+sts);
});


$('#addTask').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/task/'+$('#taskId').val()+'?token='+  $('#token').val();
    var url1 = $('#apiUrl').val()+ '/api/task?token='+  $('#token').val();
    var data = {
        description:$('#description').val(),
        tStatus:'Completed'
    };

    var data1 = {
        startDate: getDatetTime($('#tDate').val()),
        dueDate: getDatetTime($('#tDate').val()),
        description:$('#description').val(),
        tStatus:'To-do'
    };

    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            data1.url = data.result.url;
            data1.name =  data.result.name;
            $.ajax({
                url: url1,
                type: 'POST',
                data: JSON.stringify(data1),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    toastr.options.closeButton = true;
                    toastr.success("Task updated successfully.");
                    window.location = '/dashboard';

                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});
var filterWaDashboardData = function(url, fromDate, toDate){
    //delete the table
    $("#center").html('0');
    $("#member").html('0');
    $("#events").html('0');
    $("#product").html('0');
    $("#activity").html('0');
    $("#magazine").html('0');

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }

    getWaDashboardData(url);
};

var getWaDashboardData = function(url){
    App.blockUI({
        target: '#wa_dashboard_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#wa_dashboard_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data && data.status == 'ok') {
                $("#center").html(data.center);
                $("#member").html(data.member);
                $("#events").html(data.events);
                $("#product").html(data.product);
                $("#activity").html(data.activity);
                $("#magazine").html(data.magazine);
            }else{
                $("#center").html('0'); 
                $("#member").html('0');
                $("#events").html('0');
                $("#product").html('0');
                $("#activity").html('0');
                $("#magazine").html('0');
            }
           // initialize the table
           App.unblockUI('#wa_dashboard_portlet');
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

getWaDashboardData(buildUrl(getAPIUrl(),'dashboard/orders', getToken(), 3000));
initDateRange(buildUrl(getAPIUrl(),'dashboard/orders', getToken(), 3000));
$().ready(function() {
    $('#save').on('click',function(event){
        var tab = $(this).attr("data-id");
        var tab1 = $(this).attr("data-prev");
        var li = $(this).attr("tab-id");
        var li1 = $(this).attr("tab-prev");
        var data = new FormData();
        jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
            data.append('fileToUpload', file);
        });
        var video={
            credit:$('#vCredit').val(),
            title:$('#vTitle').val(),
            youtubeId: $('#vId').val(),
            youtubeThumbnailUrl: $('#vthumb').val() ,
            youtubeUrl:$('#vurl').val()
        }
        if($('#mpServiceId').val() || $('#mpServiceId').val() !=null){
            data.append('mpServiceId',$('#mpServiceId').val());
            data.append('mpId','0e0234a9-ade2-4b07-95be-464371450bd4');
        }
        data.append('name',$('#name').val());
        data.append('categoryId',$('#itemCategoryId').val());
        data.append('price',$('#price').val());
        data.append('lprice',parseInt($('#lprice').val()));
        data.append('type',$('#itemType').val());
        data.append('description',$('#description').val());
        data.append('shortDescription',$('#sdescription').val());
        data.append('video',JSON.stringify(video));
        var url = $('#apiUrl').val()+ '/api/item?token='+$('#token').val();
        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   // tell jQuery not to set contentType
            success: function(data) {
                $('#itemId').val(data.result.id);
                $('#'+tab1).removeClass('active');
                $('#'+tab).addClass('active');
                $('#'+li1).removeClass('active');
                $('#'+li1).addClass('disabled');
                $('#'+li).addClass('active');
                
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });


    $('#addCheck').on('click',function(event){
        var tab = $(this).attr("data-id");
        var tab1 = $(this).attr("data-prev");
        var li = $(this).attr("tab-id");
        var li1 = $(this).attr("tab-prev");
        var checklist = []
        jQuery('.checklist').each(function(e){
            var obj = {
                seq:$(this).find('input[name*="cseq"]').val(),
                title:$(this).find('input[name*="ctitle"]').val(),
                description:$(this).find('input[name*="cdesc"]').val(),
                stepsVideoUrl:$(this).find('input[name*="cvurl"]').val()
            }
            checklist.push(obj);
        });
        var data = {
            checklist: checklist
        }
        var url = $('#apiUrl').val()+ '/api/item/'+$('#itemId').val()+'?token='+$('#token').val();
        $.ajax({
            url: url,
            type: 'PUT',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                $('#'+tab1).removeClass('active');
                $('#'+tab).addClass('active');
                $('#'+li1).removeClass('active');
                $('#'+li).addClass('active');
                
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    /*$('#process').on('click',function(event){
        var tab = $(this).attr("data-id");
        var tab1 = $(this).attr("data-prev");
        var li = $(this).attr("tab-id");
        var li1 = $(this).attr("tab-prev");
        
        var checklist = [];
        jQuery('.process').each(function(e){
            var data = new FormData();
            alert($(this).find('input[name*="pcimage"]')[0].files[0]);
            data.append('image', $(this).find('input[name*="pcimage"]')[0].files[0]); 
            alert(data);
            alert(JSON.stringify(data));
            var video ={
                title:$(this).find('input[name*="pvtitle"]').val(),
                credit:$(this).find('input[name*="pvcredit"]').val(),
                youtubeUrl:$(this).find('input[name*="pvurl"]').val(),
                youtubeId:$(this).find('input[name*="pvid"]').val(),
                youtubeThumbnailUrl:$(this).find('input[name*="pvthumb"]').val()
            }
            data.append('seq',$(this).find('input[name*="pseq"]').val());
            data.append('title',$(this).find('input[name*="ptitle"]').val());
            data.append('description',$(this).find('input[name*="pdesc"]').val());

            data.append('video',JSON.stringify(video));
            checklist.push(data);
        });
        var data1 = {
            process: checklist
        }
        alert(JSON.stringify(data1));
        var url = $('#apiUrl').val()+ '/api/item/'+$('#itemId').val()+'?token='+$('#token').val();
        $.ajax({
            url: url,
            type: 'PUT',
            data: data1,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   // tell jQuery not to set contentType
            success: function(data) {
                $('#'+tab1).removeClass('active');
                $('#'+tab).addClass('active');
                $('#'+li1).removeClass('active');
                $('#'+li1).addClass('disabled');
                $('#'+li).addClass('active');
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });*/

    $('#seo').on('click',function(event){
        var data = new FormData();
        jQuery.each(jQuery('#oimage')[0].files, function(i, file) {
            data.append('oimage', file);
        });
        var seo={
            ogType:$('#otype').val(),
            ogTitle:$('#otitle').val(),
            ogDescription: $('#odesc').val(),
            ogUrl: $('#ourl').val() 
        }
        data.append('seo',JSON.stringify(seo));
        var url = $('#apiUrl').val()+ '/api/item/'+$('#itemId').val()+'?token='+$('#token').val();
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   // tell jQuery not to set contentType
            success: function(data) {
                window.location.replace("/items");
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    $('.next').on('click',function(event){
        var tab = $(this).attr("data-id");
        var tab1 = $(this).attr("data-prev");
        var li = $(this).attr("tab-id");
        var li1 = $(this).attr("tab-prev");
        $('#'+tab1).removeClass('active');
        $('#'+tab).addClass('active');
        $('#'+li1).removeClass('active');
        $('#'+li1).addClass('disabled');
        $('#'+li).addClass('active');
    });

    populateItemCategory(buildUrl(getAPIUrl(),'categories', getToken(), 3000));
    addItemCategory(buildUrl(getAPIUrl(),'category', getToken(), null),buildUrl(getAPIUrl(),'categories', getToken(), 3000));

    $('#addToTruneto').change(function() {
        if($("#addToTruneto").is(':checked')){
            $('#tser').removeClass('hidden');
            populateTrunetoItem(buildUrl(getAPIUrl(),'items-truneto', getToken(), 3000));
        }else{
            $('#tser').addClass('hidden');
        }       
    });
});
$().ready(function() {
    var itemData = null;

    var updateDetails = function(){

        $('#displayName').html(itemData.item.name);
        $('#displayCategory').html(itemData.item.category? itemData.item.category.name: '');
        $('#displayType').html(itemData.item.type);
        $('#displayUnit').html(itemData.item.unit);
        $('#displayPrice').html(itemData.item.price);
        $('#displayleadPrice').html(itemData.item.lprice || 0);
        $('#displayDescription').html(itemData.item.description);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                itemData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/items';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var itemsEditForm = $('#items_edit_form');
    var itemsEditFormErrors = $('.alert-danger', itemsEditForm);
    var itemsEditFormSuccess = $('.alert-success', itemsEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    itemsEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    itemsEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           name: {
                required: true
            },
            categoryId: {
                required: true
            },
            type: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(itemsEditForm.attr('action'));
            var url = itemsEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#itemId').val(),
                name: $('#name').val(),
                categoryId: $('#itemCategoryId').val(),
                type: $('#itemType').val(),
                unit: $('#itemUnit').val(),
                price: $('#price').val(),
                description: $('#description').val()
            };
            if($('#mpServiceId').val() || $('#mpServiceId').val() !=null){
                data.mpServiceId = $('#mpServiceId').val();
                data.mpId = '0e0234a9-ade2-4b07-95be-464371450bd4';
            }

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Items updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/items");
                    itemData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });


     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', itemsEditForm).change(function () {
        itemsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        itemsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateItemCategory(buildUrl(getAPIUrl(),'categories', getToken(), 3000));

    addItemCategory(
        buildUrl(getAPIUrl(),'category', getToken(), 3000),
        buildUrl(getAPIUrl(),'categories', getToken(), 3000)
        );

    $('#addToTruneto').change(function() {
        if($("#addToTruneto").is(':checked')){
            $('#tser').removeClass('hidden');
            populateTrunetoItem(buildUrl(getAPIUrl(),'items-truneto', getToken(), 3000));
        }else{
            $('#tser').addClass('hidden');
        }       
    });
});
$().ready(function() {
	
    var itemsAddForm = $('#items_edit_form');
    var itemsAddFormErrors = $('.alert-danger', itemsAddForm);
    var itemsAddFormSuccess = $('.alert-success', itemsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    itemsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    itemsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules:  {
            name: {
                required: true
            }
        },
        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(itemsAddForm.attr('action'));
            var url = itemsAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                lprice:parseInt($('#lprice').val()),
                categoryId:$('#itemCategoryId').val(),
                type:$('#itemType').val(),
                unit:$('#itemUnit').val(),
                price:$('#price').val(),
                description:$('#description').val()
            };
            if($('#mpServiceId').val() || $('#mpServiceId').val() !=null){
                data.mpServiceId = $('#mpServiceId').val();
                data.mpId = '0e0234a9-ade2-4b07-95be-464371450bd4';
            }
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','tasks added successfuly. You can view the tasks details in <a href="/taskss"><i class="icon-basket-loaded"></i> taskss</a>.','success','fa-check fa-lg');
                    window.location.replace("/items/"+$('#itemId').val());
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', itemsAddForm).change(function () {
        itemsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        itemsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : itemsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                $('#name').val(data.item.name);
		        $('#itemCategoryId').val(data.item.category? data.item.category.name: '');
		        $('#itemType').val(data.item.type);
		        $('#itemUnit').val(data.item.unit);
		        $('#price').val(data.item.price);
		        $('#description').val(data.item.description);
		        if(data.item.mpServiceId && data.item.mpServiceId !=null){
		        	$('#check').addClass('hidden');
		        	$('#tser').removeClass('hidden');
		        	populateTrunetoItem(buildUrl(getAPIUrl(),'items-truneto', getToken(), 3000),false, data.item.mpServiceId);
		        }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    populateItemCategory(buildUrl(getAPIUrl(),'categories', getToken(), 3000));

    addItemCategory(
        buildUrl(getAPIUrl(),'category', getToken(), 3000),
        buildUrl(getAPIUrl(),'categories', getToken(), 3000)
        );

    $('#addToTruneto').change(function() {
	    if($("#addToTruneto").is(':checked')){
	        $('#tser').removeClass('hidden');
	        populateTrunetoItem(buildUrl(getAPIUrl(),'items-truneto', getToken(), 3000));
	    }else{
	        $('#tser').addClass('hidden');
	    }       
	});


});
var filterItemData = function(url, name, mobile){
    //delete the table
    $("#items").remove();
    $("#items_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="items">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#items .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Category </th>'+
                    '<th> Type </th>'+
                    '<th> Unit </th>'+
                    '<th> Price </th>'+
                    // '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(itemId != null && itemId!= -1){
    //     url = url + '&itemId=' + itemId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getItemData(url);
};

var goToItems = function(itemId){
    window.location = '/items/' + itemId;
};

var getItemData = function(url){
    // App.blockUI({
    //     target: '#items_portlet',
    //     animate: true
    // });

    // window.setTimeout(function() {
    //     App.unblockUI('#items_portlet');
    // }, 500);
    App.blockUI();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToItems("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.category != undefined ? row.category.name: '') + ' </td>' +
                            '<td> ' + formatItemTypes(row.type) + ' </td>' +
                            '<td> ' + (row.unit != undefined ? row.unit: '') + ' </td>' +
                            '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
                            // '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#items');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#items_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    //App.unblockUI('#items_portlet');
    App.unblockUI();
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/item/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/items';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});


getItemData(buildUrl(getAPIUrl(),'items', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    var fromDate = moment(dates[0], "MMMM D, YYYY");
    var toDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();

    filterItemData(buildUrl(getAPIUrl(),'items', getToken(), 3000), $('#name').val(), $('#mobile').val());
});

initDateRange(null);
$().ready(function() {
    var inspectionsAddForm = $('#inspections_add_form');
    var inspectionsAddFormErrors = $('.alert-danger', inspectionsAddForm);
    var inspectionsAddFormSuccess = $('.alert-success', inspectionsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    inspectionsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    inspectionsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            // leadId: {
            //     required: true
            // },
            employeeId: {
                required: true
            },
            scheduledDate: {
                required: true
            },
            customerId: {
                required: true
            },
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(inspectionsAddForm.attr('action'));
            var url = inspectionsAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                //leadId: $('#leadId').val(),
                scheduledDate: $('#scheduledDate').val(),
                customerId: $('#customerId').val(),
                //completionDate: $('#completionDate').val(),
                chargesApplicable: $('#chargesApplicable').val(),
                charges: $('#charges').val(),
                employeeId: $('#employeeId').val(),
                inspectionStatus: $('#inspectionStatus').val(),
                description: $('#description').val()
            };
            
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Inspection added successfuly. You can view the inspections details in <a href="/inspections"><i class="icon-emoticon-smile"></i> inspections</a>.','success','fa-check fa-lg');
                    window.location.replace("/inspections");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', inspectionsAddForm).change(function () {
        inspectionsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        inspectionsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterInspectionsData = function(url){
    //delete the table
    $("#inspections").remove();
    $("#inspections_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="inspections">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#inspections .checkboxes" /> </th>'+
                    //'<th> Lead Id </th>'+
                    '<th> Scheduled Date </th>'+
                    '<th> Customer </th>'+
                    //'<th> Completion Date </th>'+
                    //'<th> Charges Appclicable </th>'+
                    '<th> Charges </th>'+
                    '<th> Assigned To </th>'+
                    '<th> Status </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getInspectionsData(url);
};

var getInspectionsData = function(url){
    App.blockUI({
        target: '#inspections_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#inspections_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            //'<td> ' + (row.leadId != undefined ? row.leadId: '') + ' </td>' +
                            '<td> ' + (row.scheduledDate != undefined ? new Date(row.scheduledDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.customer != undefined ? row.customer.name: '') + ' </td>' +
                            //'<td> ' + (row.completionDate != undefined ? new Date(row.completionDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            //'<td> ' + (row.chargesApplicable != undefined ? row.chargesApplicable: '') + ' </td>' +
                            '<td> ' + (row.charges != undefined ? row.charges: '') + ' </td>' +
                            '<td> ' + (row.employee != undefined ? row.employee.name: '') + ' </td>' +
                            '<td> ' + (row.inspectionStatus != undefined ? row.inspectionStatus: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#inspections');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#inspections_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#inspections_portlet');
};
$('.pointer').on('click',function(event){
	var clickedID = this.id;
	if(clickedID === 'tper'){
		$('#tper').addClass("greenDiv");
		$('#trs').removeClass("greenDiv");

		var tamount = parseInt($('#stt').val()) * (parseInt(($('#tax').val() || 0))/100);
		$('#taxamount').val(tamount);
		if($('#discount').val() ==0){
            var subtotal = (parseInt($('#discount').val())+tamount)+ parseInt($('#stt').val());
        }else{
            var subtotal = (tamount-parseInt($('#discount').val()))+ parseInt($('#stt').val());
        }
         $('#total').html('₹'+subtotal);
         $('#totalval').val(subtotal);
	}else if(clickedID === 'trs'){
		$('#tper').removeClass("greenDiv");
		$('#trs').addClass("greenDiv");
		var tamount = parseInt($('#tax').val() || 0);
		$('#taxamount').val(tamount);
		if($('#discount').val() ==0){
            var subtotal = (parseInt($('#discount').val())+tamount)+ parseInt($('#stt').val());
        }else{
            var subtotal = (tamount-parseInt($('#discount').val()))+ parseInt($('#stt').val());
        }
        $('#total').html('₹'+subtotal);
        $('#totalval').val(subtotal);

	}else if(clickedID === 'dper'){
		$('#drs').removeClass("greenDiv");
		$('#dper').addClass("greenDiv");

        var damount = parseInt($('#stt').val()) * ((parseInt($('#dis').val() || 0))/100);

        $('#discount').val(damount);

        var subtotal =  (parseInt($('#taxamount').val())-damount) + parseInt($('#stt').val());
        $('#total').html('₹'+subtotal);
        $('#totalval').val(subtotal);
	}else{
		$('#drs').addClass("greenDiv");
		$('#dper').removeClass("greenDiv");
		var damount =parseInt($('#dis').val() || 0);

        $('#discount').val(damount);
        
        var subtotal =  (parseInt($('#taxamount').val())-damount) + parseInt($('#stt').val());
        $('#total').html('₹'+subtotal);
        $('#totalval').val(subtotal);
	}
})

$('#addInvoice').on('click',function(event){
	var data= {
		from:$('#from').val(),
		to:$('#to').val(),
		invoiceNo: $('#qno').val(),
		panNo: $('#pan').val(),
		gstNo: $('#gst').val(),
		date: $('#qdate').val(),
		notes:$('#notes').val(),
		terms:$('#terms').val(),
		total:$('#total').text(),
		subTotal:$('#st').text(),
		leadId: $('#leadId').val()
	};

	var idArray = [];
    $('.greenDiv').each(function () {
        idArray.push(this.id);

    });
     if(idArray.indexOf('dper')> -1){
        data.discount = ( $('#dis').val() || 0)+'%';
     }else{
        data.discount = '₹'+($('#dis').val() || 0);
     }

     if(idArray.indexOf('tper')> -1){
        data.tax = ($('#tax').val() || 0)+'%';
     }else{
        data.tax = '₹'+($('#tax').val() || 0);
     }

	var checklist = []
    jQuery('.service').each(function(e){
        var obj = {
            item:$(this).find('input[name*="item1"]').val(),
            price:$(this).find('input[name*="rate"]').val(),
            quantity:$(this).find('input[name*="qty"]').val(),
            amount:$(this).find('input[name*="amount"]').val()
        }
        checklist.push(obj);
    });
    data.services = checklist;
	 var url = getAPIUrl()+ '/api/invoice?token='+getToken();
	$.ajax({
        url: url,
        type: 'POST',
        dataType: "json",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function(data) {
        	window.open(data.result);
          //window.open(data.result,'_blank');
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
})

$('#sendEmail').on('click',function(event){
	var data= {
		from:$('#from').val(),
		to:$('#to').val(),
		invoiceNo: $('#qno').val(),
		panNo: $('#pan').val(),
		gstNo: $('#gst').val(),
		date: $('#qdate').val(),
		notes:$('#notes').val(),
		terms:$('#terms').val(),
		total:$('#total').text(),
		subTotal:$('#st').text(),
		leadId: $('#leadId').val()
	};

	var idArray = [];
    $('.greenDiv').each(function () {
        idArray.push(this.id);

    });
     if(idArray.indexOf('dper')> -1){
        data.discount = ( $('#dis').val() || 0)+'%';
     }else{
        data.discount = '₹'+($('#dis').val() || 0);
     }

     if(idArray.indexOf('tper')> -1){
        data.tax = ($('#tax').val() || 0)+'%';
     }else{
        data.tax = '₹'+($('#tax').val() || 0);
     }

	var checklist = []
    jQuery('.service').each(function(e){
        var obj = {
            item:$(this).find('input[name*="item1"]').val(),
            price:$(this).find('input[name*="rate"]').val(),
            quantity:$(this).find('input[name*="qty"]').val(),
            amount:$(this).find('input[name*="amount"]').val()
        }
        checklist.push(obj);
    });
    data.services = checklist;
	 var url = getAPIUrl()+ '/api/invoice/sendemail?token='+getToken();
	$.ajax({
        url: url,
        type: 'POST',
        dataType: "json",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function(data) {
        	//window.open(data.result);
          //window.open(data.result,'_blank');
          toastr.options.closeButton = true;
           toastr.success("Your email send successfully.");
           window.location = '/leads';
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
})

$().ready(function() {
	$(document).on('show.bs.modal','#invoice-preview', function () {
		$("#logo1").attr("src",$('#logo').attr('src'));

		$('#from1').html($('#from').val());
		$('#to1').html($('#to').val());
		$('#qoteno1').html($('#qno').val());
		$('#pan1').html($('#pan').val());
		$('#gst1').html($('#gst').val());
		$('#date1').html($('#qdate').val());
		$('#notes1').html($('#notes').val());
		$('#terms1').html($('#terms').val());
		$('#st1').html($("#st").text());
		$('#total1').html($('#total').text());

		$("#letter").attr("src",$('#lth').val());
		var idArray = [];
	    $('.greenDiv').each(function () {
	        idArray.push(this.id);

	    });
	     if(idArray.indexOf('dper')> -1){
	        $('#dis1').html(( $('#dis').val() || 0)+'%');
	     }else{
	        $('#dis1').html('₹'+($('#dis').val() || 0));
	     }
	     if(idArray.indexOf('tper')> -1){
	        $('#tax1').html(($('#tax').val() || 0)+'%');
	     }else{
	        $('#tax1').html('₹'+($('#tax').val() || 0));
	     }


		var checklist = []
        jQuery('.service').each(function(e){
            var obj = {
                item:$(this).find('input[name*="item1"]').val(),
                price:$(this).find('input[name*="rate"]').val(),
                quantity:$(this).find('input[name*="qty"]').val(),
                amount:$(this).find('input[name*="amount"]').val()
            }
            checklist.push(obj);
        });
        /*var data = {
            services: checklist
        }*/
        if(checklist.length >0){
        	for (i = 0; i < checklist.length; i++) {
	            var row = checklist[i];
	            $('#tableData').append(
	                //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
	                '<div class="row item">'+
	                  '<div class="col-xs-6 desc">'+(row.item != undefined ? row.item: '')+'</div>'+
	                  '<div class="col-xs-2 qty">'+(row.price != undefined ? row.price: 0)+'</div>'+
	                  '<div class="col-xs-2 qty">'+(row.quantity != undefined ? row.quantity: 0)+'</div>'+
	                  '<div class="col-xs-2 amount text-right">'+(row.amount != undefined ? row.amount: 0)+'</div>'+
	                '</div>'
	                /*'<tr>'+
	                    '<td> ' + (row.item != undefined ? row.item: '') + ' </td>' +
	                    '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
	                    '<td> ' + (row.quantity != undefined ? row.quantity: '') + ' </td>' +
	                    '<td> ' + (row.amount != undefined ? row.amount: '') + ' </td>' +
	                    // '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
	                '</tr>'*/
	            );
	        }
        }

	});
	$('#total').html('₹'+0);
	$('#totalval').val(0);
	$('#discount').val(0);
	$('#taxamount').val(0);
	$('#stt').val(0);
	$('#st').html('₹'+0);
})

$().ready(function() {
    var invoicesAddForm = $('#invoice_add_form');
    var invoicesAddFormErrors = $('.alert-danger', invoicesAddForm);
    var invoicesAddFormSuccess = $('.alert-success', invoicesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    invoicesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    invoicesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            cName: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(invoicesAddForm.attr('action'));
            var url = invoicesAddForm.attr('action');
            
            var inv = new Object();
            inv.key = $('#invoiceNoKey').val();
            inv.value = $('#invoiceNoValue').val();

            var dn = new Object();
            dn.key = $('#deliveryNoteKey').val();
            dn.value = $('#deliveryNoteValue').val();

            var sr = new Object();
            sr.key = $('#supplierRefKey').val();
            sr.value = $('#supplierRefValue').val();

            var iv = new Object();
            iv.key = $('#invoiceDateKey').val();
            iv.value = $('#invoiceDateValue').val();

            var pm = new Object();
            pm.key = $('#paymentModeKey').val();
            pm.value = $('#paymentModeValue').val();

            var or = new Object();
            or.key = $('#otherRefKey').val();
            or.value = $('#otherRefValue').val();

            var on = new Object();
            on.key = $('#orderNoKey').val();
            on.value = $('#orderNoValue').val();

            var dp = new Object();
            dp.key = $('#dispatchedNoKey').val();
            dp.value = $('#dispatchedNoValue').val();

            var dt = new Object();
            dt.key = $('#dispatchedThroughKey').val();
            dt.value = $('#dispatchedThroughValue').val();

            var od = new Object();
            od.key = $('#orderDateKey').val();
            od.value = $('#orderDateValue').val();

            var dDate = new Object();
            dDate.key = $('#dispatchedDateKey').val();
            dDate.value = $('#dispatchedDateValue').val();

            var dtn = new Object();
            dtn.key = $('#destinationKey').val();
            dtn.value = $('#destinationValue').val();

            var itemDes = new Object();
            itemDes.key = $('#itemDescriptionKey').val();
            itemDes.value = $('#itemDescriptionValue').val();

            var qty = new Object();
            qty.key = $('#quantityKey').val();
            qty.value = $('#itemQty').val();

            var ret = new Object();
            ret.key = $('#rateKey').val();
            ret.value = $('#itemRate').val();

            var amt = new Object();
            amt.key = $('#amountKey').val();
            amt.value = parseFloat($('#itemTotal').html());

            var sTotal = new Object();
            sTotal.key = $('#subTotalLabel').val();
            sTotal.value = parseFloat($('#subTotal').html());

            var tax = new Object();
            tax.key = $('#taxLabel').val();
            tax.value = parseFloat($('#taxAmt').html());

            var tot = new Object();
            tot.key = $('#totalLabel').val();
            tot.value = parseFloat($('#total').html());

            var sTax = new Object();
            sTax.key = $('#serviceTaxNoKey').val();
            sTax.value = $('#serviceTaxNoValue').val();

            var pan = new Object();
            pan.key = $('#panNoKey').val();
            pan.value = $('#panNoValue').val();

            var tin = new Object();
            tin.key = $('#tinNoKey').val();
            tin.value = $('#tinNoValue').val();

            var bank = new Object();
            bank.key = $('#bankNameKey').val();
            bank.value = $('#bankNameValue').val();

            var account = new Object();
            account.key = $('#accountNoKey').val();
            account.value = $('#accountNoValue').val();

            var ifsc = new Object();
            ifsc.key = $('#branchIfscKey').val();
            ifsc.value = $('#branchIfscValue').val();

            var sig = new Object();
            sig.key = $('#signature').val();
            sig.value = $('#signature').val();

            var note = new Object();
            note.key = $('#notesKey').val();
            note.value = $('#notesValue').val();

            var term = new Object();
            term.key = $('#termsKey').val();
            term.value = $('#termsValue').val();

            var data = {
                cName: $('#companyName').val(),
                //cName: JSON.stringify(cn),
                street: $('#street').val(),
                province: $('#province').val(),
                city: $('#city').val(),
                country: $('#country').val(),
                email: $('#email').val(),
                invoiceNo: inv,
                deliveryNote: dn,
                supplierRef: sr,
                iDate: iv,
                paymentMode: pm,
                otherRef: or,
                billTo: $('#billTo').val(),
                orderNo: on,
                dispatchedNo: dp,
                dispatchedThrough: dt,
                orderDate: od,
                dispatchedDate: dDate,
                destination: dtn,
                itemDescription: itemDes,
                quantity: qty,
                rate: ret,
                amount: amt,
                subTotal: sTotal,
                salesTax: tax,
                total: tot,
                inWords: $('#totalInwords').val(),
                cDetails: $('#cDetails').val(),
                serviceTaxNo: sTax,
                panNo: pan,
                tinNo: tin,
                bankName: bank,
                accountNo: account,
                branchIfsc: ifsc,
                description: $('#description').val(),
                signature: sig,
                notes: note,
                terms: term,
                address: $('#address').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','New Invoice added successfuly. You can view the Invoice details in <a href="/invoices"><i class="fa fa-file-text-o"></i> Invoices</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', invoicesAddForm).change(function () {
        invoicesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        invoicesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var invoicesAddForm = $('#invoice_add_form');
    var invoicesAddFormErrors = $('.alert-danger', invoicesAddForm);
    var invoicesAddFormSuccess = $('.alert-success', invoicesAddForm);

    var dUrl = $('#url').val();
    $.ajax({
        url: dUrl,
        type: 'GET',
        success: function(data) {
            if (data){
                //$("#logo1").attr("src",$('#logo').attr('src'));
                $('#from1').val(data.invoice.from);
                $('#to1').val(data.invoice.to);
                $('#qoteno1').html(data.invoice.invoiceNo);
                $('#pan1').html(data.invoice.panNo);
                $('#gst1').html(data.invoice.gstNo);
                $('#date1').html(data.invoice.date != undefined ? moment(data.invoice.date).format("DD-MM-YYYY"):'');
                $('#tax1').html(data.invoice.tax);
                $('#dis1').html(data.invoice.discount);
                $('#notes1').val(data.invoice.notes);
                $('#terms1').val(data.invoice.terms);
                $('#st1').html(data.invoice.subTotal);
                $('#total1').html(data.invoice.total);
                $('#lid').html(data.invoice.leadId);
                $(".pdf").attr("href", data.invoice.pdf);
                
                if(data.invoice.services && data.invoice.services.length >0){
                    for (i = 0; i < data.invoice.services.length; i++) {
                        var row = data.invoice.services[i];
                        $('#tableData').append(
                            //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                            '<tr>'+
                                '<td> ' + (row.item != undefined ? row.item: '') + ' </td>' +
                                '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
                                '<td> ' + (row.quantity != undefined ? row.quantity: '') + ' </td>' +
                                '<td> ' + (row.amount != undefined ? row.amount: '') + ' </td>' +
                                // '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                            '</tr>'
                        );
                    }
                }

            }
            //showAlertMessage('successMessage','New Quotation added successfuly. You can view the Quotation details in <a href="/invoices"><i class="fa fa-file-text-o"></i> Quotations</a>.','success','fa-check fa-lg');
            //window.location.replace("/sales-ledger");
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
})

var filterInvoiceListData = function(url){
    //delete the table
    $("#invoices_list").remove();
    $("#invoices_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="invoices_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#invoices_list .checkboxes" /> </th>'+
                        '<th> Quote Id </th>'+
                        '<th> Lead Id </th>'+
                        '<th> Customer </th>'+
                        '<th> Date </th>'+
                        '<th> Name </th>'+
                        // '<th> Mobile </th>'+
                        // '<th> Address </th>'+
                        '<th> Amount </th>'+ 
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getInvoiceListData(url);
};

var goToInvoice = function(quoteId){
    window.location = '/invoices/' + quoteId;
};

var getInvoiceListData = function(url){
    App.blockUI({
        target: '#invoices_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#invoices_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToInvoice("'+row.id +'")>' + (row.invoiceNo != undefined ? row.invoiceNo: '') + ' </td>' +
                            '<td class="clickable" onclick=goToInvoice("'+row.id +'")>' + (row.date != undefined ? moment(new Date(row.date)).format("DD MMM YYYY"): '') + ' </td>' +
                            '<td class="clickable" onclick=goToInvoice("'+row.id +'")>' + (row.to != undefined ? row.to: '') + ' </td>' +
                            '<td> ' + (row.total != undefined ? row.total: 0) + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });
                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#invoices_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#invoices_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#invoices_portlet');
};


$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/quotation/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Quotation has been deleted successfully.", "success");
                            window.location = '/invoices';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

$().ready(function() {
    getInvoiceListData(buildUrl(getAPIUrl(),'invoices', getToken(), 3000));

    $('#filter-submit').on('click', function(event){
        var str = $('#reportrange span').html();
        var dates = str.split(" - "); 
        // var fromDate = moment(dates[0], "MMMM D, YYYY");
        // var toDate = moment(dates[1], "MMMM D, YYYY");

        event.preventDefault();

        filterInvoiceListData(buildUrl(getAPIUrl(),'invoices', getToken(), 3000));
    });

    initDateRange(null);
});

function onSignupReady() {
    $(document.body).css("visibility", "visible");
    $.fn.zaSignUp.defaults.disableSubmit = function() {
            return "Sign Up"; 
    }
    $.fn.zaSignUp.defaults.getConfirmationTemplate = function() {
            return '';
    }

    $("#signupform").zaSignUp({
        onsubmit: function() {
                $("#za-signup-btn").attr("disabled", true);
                $("#ZI-load").css("display","block");
        },
        oncomplete: function(state) {
            var statusKey;
            $.each($.fn.zaSignUp.SIGNUP_STATE, function(key, value) {
                    if (state === value) {
                            statusKey = key;
                            return false; 
                    }
            });

            dataLayer.push({
                    event: 'gaEvent',
                    gaCategory: 'invoice_conversion',
                    gaAction: 'signup',
                    gaLabel: 'STATE_' + statusKey
            });

            if (state == $.fn.zaSignUp.SIGNUP_STATE.ERROR) {
                    $("#za-signup-btn").attr("disabled", false); 
                    $("#ZI-load").css("display","none"); 
            }
            if (state == $.fn.zaSignUp.SIGNUP_STATE.ACCOUNT_CREATED) {

                    dataLayer.push({
                            event: 'gaEvent',
                            gaCategory: 'invoice_conversion_from_invgenerator',
                            gaAction: 'signup',
                            gaLabel: 'completed'
                    });
            }
        },
        x_signup: {
                password_required: true
        }
    });
}
$().ready(function() {

    getInvoicesListData(buildUrl(getAPIUrl(),'invoices', getToken(), 3000));

    $('#filter-submit').on('click', function(event){
        var str = $('#reportrange span').html();
        var dates = str.split(" - "); 
        // var fromDate = moment(dates[0], "MMMM D, YYYY");
        // var toDate = moment(dates[1], "MMMM D, YYYY");

        event.preventDefault();

        filterInvoicesListData(buildUrl(getAPIUrl(),'invoices', getToken(), 3000));
    });

    initDateRange(null);
 });

$().ready(function() {
    var jobsAddForm = $('#jobs_add_form');
    var jobsAddFormErrors = $('.alert-danger', jobsAddForm);
    var jobsAddFormSuccess = $('.alert-success', jobsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    jobsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    jobsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            // leadId: {
            //     required: true
            // },
            // itemId: {
            //     required: true
            // },
            // scheduledDate: {
            //     required: true
            // },
            customerId: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(jobsAddForm.attr('action'));
            var url = jobsAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                leadId: $('#leadId').val(),
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                referenceNumber: $('#referenceNumber').val(),
                //requestedDueDate: $('#requestedDueDate').val(),
                scheduledDueDate: $('#scheduledDueDate').val(),
                //estimateDueDate: $('#estimateDueDate').val(),
                completionDueDate: $('#completionDueDate').val(),
                estimatedTotal: $('#estimatedTotal').val(),
                netTotal: $('#netTotal').val(),
                taxes: $('#taxes').val(),
                grossTotal: $('#grossTotal').val(),
                reviewed: $('#reviewed').val(),
                paymentCollected: $('#paymentCollected').val(),
                serviceAgreementNeeded: $('#serviceAgreementNeeded').val(),
                jobStatus: $('#jobStatus').val()
            };
            
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Job added successfuly. You can view the jobs details in <a href="/jobs"><i class="fa fa-cubes"></i> jobs</a>.','success','fa-check fa-lg');
                    window.location.replace("/jobs");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', jobsAddForm).change(function () {
        jobsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        jobsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterJobsData = function(url){
    //delete the table
    $("#jobs").remove();
    $("#jobs_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="jobs">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#jobs .checkboxes" /> </th>'+
                    '<th> Job Id </th>'+
                    '<th> Customer </th>'+
                    '<th> Start Date </th>'+
                    '<th> End Date </th>'+
                    '<th> Total </th>'+
                    //'<th> Payment Collected </th>'+
                    '<th> Status </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getJobsData(url);
};

var getJobsData = function(url){
    App.blockUI({
        target: '#jobs_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#jobs_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.jobId != undefined ? row.jobId : '') + '</td>' +
                            '<td> ' + (row.customer != undefined ? row.customer.name : '') + '</td>' +
                            '<td> ' + (row.scheduledDueDate != undefined ? new Date(row.scheduledDueDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.completionDueDate != undefined ? new Date(row.completionDueDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.grossTotal != undefined ? row.grossTotal: '') + ' </td>' +
                            //'<td> ' + (row.paymentCollected != undefined ? row.paymentCollected: '') + ' </td>' +
                            '<td> ' + (row.jobStatus != undefined ? row.jobStatus: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#jobs');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#jobs_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#jobs_portlet');
};
$().ready(function() {
    var leadSourcesAddForm = $('#lead_source_add_form');
    var leadSourcesAddFormErrors = $('.alert-danger', leadSourcesAddForm);
    var leadSourcesAddFormSuccess = $('.alert-success', leadSourcesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    leadSourcesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    leadSourcesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            website: {
                required: true,
                url: true
            },
            contactPerson: {
                required: true
            },
            contactNumber: {
                required: true,
                number: true,
                maxlength:10,
                minlength: 10
            },
            comissionType: {
                required: true
            },
            comissionAmount: {
                required: true,
                number: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(leadSourcesAddForm.attr('action'));
            var url = leadSourcesAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                picture: $('#picture').val(),
                website: $('#website').val(),
                contactPerson: $('#contactPerson').val(),
                contactNumber: $('#contactNumber').val(),
                comissionType: $('#comissionType').val(),
                comissionAmount: $('#comissionAmount').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Lead Source added successfuly. You can view the Lead Source details in <a href="/lead-sources"><i class="icon-users"></i> Lead Sources</a>.','success','fa-check fa-lg');
                    window.location.replace("/leads");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', leadSourcesAddForm).change(function () {
        leadSourcesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        leadSourcesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterLeadSourcesListData = function(url, fromDate, toDate, customerId, type){
    //delete the table
    $("#leadSources_list").remove();
    $("#leadSources_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="leadSources_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#leadSources_list .checkboxes" /> </th>'+
                        '<th> Name </th>'+
                        '<th> Website </th>'+
                        '<th> Contact Person </th>'+
                        '<th> Contact Number </th>'+
                        '<th> Commission Type </th>'+
                        '<th> Commission Amount </th>'+ 
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    if(customerId != null && customerId!= -1){
        url = url + '&customerId=' + customerId;
    }
    if(modeType != null && modeType!= -1){
        url = url + '&modeType=' + modeType;
    }
    getLeadSourcesListData(url);
};

var getLeadSourcesListData = function(url){
    App.blockUI({
        target: '#lead_sources_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#lead_sources_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.website != undefined ? row.website: '') + ' </td>' +
                            '<td> ' + (row.contactPerson != undefined ? row.contactPerson: '') + ' </td>' +
                            '<td> ' + (row.contactNumber != undefined ? row.contactNumber : '') + ' </td>' +
                            '<td> ' + (row.comissionType != undefined ? row.comissionType: '') + ' </td>' +
                            '<td> ' + (row.comissionAmount != undefined ? row.comissionAmount: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#leadSources_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#leadSources_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#lead_sources_portlet');
};
$().ready(function() {
    var leadsAddForm = $('#leads_add_form');
    var leadsAddFormErrors = $('.alert-danger', leadsAddForm);
    var leadsAddFormSuccess = $('.alert-success', leadsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    leadsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    leadsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            customerId: {
                required: true
            },
            itemId: {
                required: true
            },
            city: {
                required: true
            },
            address: {
                required: true
            },
            leadStatus: {
                required: true
            },
            dueDate:{
                required: true
            },
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(leadsAddForm.attr('action'));
            var url = leadsAddForm.attr('action');
            var data = {
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                city: $('#city').val(),
                address: $('#address').val(),
                referralType: $('#referralType').val(),
                customerId: $('#customerId').val(),
                vendorId: $('#vendorId').val(),
                aggregatorId: $('#aggregatorId').val(),
                referralTrackingId: $('#referralTrackingId').val(),
                couponId: $('#couponId').val(),
                leadStatus: $('#leadStatus').val(),
                channel: $('#channel').val(),
                dueDate: $('#dueDate').val(),
                createdOn: $('#createdOn').val(),
                description: $('#description').val(),
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','leads added successfuly. You can view the leads details in <a href="/leadss"><i class="icon-basket-loaded"></i> leadss</a>.','success','fa-check fa-lg');
                    window.location.replace("/leads");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', leadsAddForm).change(function () {
        leadsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        leadsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });


    populateCustomers(buildUrl(getAPIUrl(),'customers',getToken(), 3000),false);
    populateItems(buildUrl(getAPIUrl(),'items',getToken(), 3000),false);
    addItem(buildUrl(getAPIUrl(),'item',getToken(), null), buildUrl(getAPIUrl(),'items',getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer',getToken(), null),buildUrl(getAPIUrl(),'customers',getToken(), 3000));
   
    $('#referralType').change(function() {
        if ($(this).val() === 'Customer') {
            $('#customerOption').removeClass('hide');
            $('#vendorOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $("#customerId").select2({
              placeholder: "Select a customer",
              allowClear: true
            });
        } else if ($(this).val() === 'Vendor') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').removeClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $("#vendorId").select2({
              placeholder: "Select a vendor",
              allowClear: true
            });
        } else if ($(this).val() === 'Lead Source') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
            $('#leadSourcesOption').removeClass('hide');
            $('#leadSourcesOption').removeClass('hide');
            $("#aggregatorId").select2({
              placeholder: "Select a Lead Source",
              allowClear: true
            });
            
        } else {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
        }
    });
});
$().ready(function() {
    var leadsAddForm = $('#leads_add_form');
    var leadsAddFormErrors = $('.alert-danger', leadsAddForm);
    var leadsAddFormSuccess = $('.alert-success', leadsAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            // showAlertMessage('successMessage','Event added successfuly. You can view the leads details in <a href="/wa/leads"><i class="fa fa-cubes"></i> leads</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/leads/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#dueDate').html(data.dueDate != undefined ? moment(data.dueDate).format("DD MMMM YYYY - HH:mm"):'');
                $('#bookingdate').html(data.dueDate != undefined ? moment(data.dueDate).format("DD MMMM YYYY - HH:mm"):'');
                $('#bill').html(data.leadId);
                if(data.customer){
                    $('#customer').html(data.customer.name);
                    $('#mobile').html(data.customer.mobile);
                    $('#cEmail').html(data.customer.email);
                }
                if(data.item){
                $('#item').html(data.item.name);
                }
                if(data.employee){
                $('#employeeName').html(data.employee.name);
                $('#employeeMob').html(data.employee.mobile);
                $('#employeeEmail').html(data.employee.email || '');
                }
                if(data.proLead && data.proLead.length >0){
                    for(var j=0; j < data.proLead.length; j++){
                        $('#vData').append(
                            '<tr>'+
                                '<td>'+
                                    '<a href="javascript:;">'+ (data.proLead[j].vendorName != undefined ? data.proLead[j].vendorName: '')+'</a>'+
                                '</td>'+
                                '<td>'+ (data.proLead[j].vendorMobile != undefined ? data.proLead[j].vendorMobile: '')+ '</td>'+
                                '<td>'+(data.proLead[j].vendorEmail != undefined ? data.proLead[j].vendorEmail: '')+'</td>'+
                                '<td>'+data.proLead[j].leadStatus+'</td>'+
                            '</tr>'
                        );
                    }
                }
                $('#remarks').html(data.description? data.description: '');
                $('#address').html(data.address);
                $('#price').html(data.price? data.price: 0);
                $('#pGst').html(data.spareGst? data.spareGst: 0);
                $('#sGst').html(data.serviceGst? data.serviceGst: 0);
                $('#sCharge').html(data.serviceCharge? data.serviceCharge: 0);
                $('#paid').html(data.paid? data.paid: (data.price? data.price: 0));
                $('#dueAmount').html(data.dueAmount? data.dueAmount: 0);
                $('#leadStatus').html(data.leadStatus);
                $('.lid').html(data.leadId);
                if(data.leadInventory && data.leadInventory.length >0){
                    for(var i=0; i < data.leadInventory.length; i++){
                        var price = parseFloat(data.leadInventory[i].price || data.leadInventory[i].productObj.price);
                        $('#cData').append(
                            '<tr>'+
                                '<td>'+
                                    '<a href="javascript:;">'+ data.leadInventory[i].productObj.name+'</a>'+
                                '</td>'+
                                '<td>'+ price+ '</td>'+
                                '<td>'+data.leadInventory[i].quantity+'</td>'+
                                '<td>'+price*data.leadInventory[i].quantity+'</td>'+
                            '</tr>'
                        );
                    }
                }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('.btn-delete').on('click',function(event) {
        var url = $('#apiUrl').val() + '/api/lead/' + $('#leadId').val() + '?token=' + $('#token').val();
        $.ajax({
            url: url,
            type: 'DELETE',
            success: function (data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/leads';
                }
            },
            error: function (data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
   
});
$().ready(function() {
    var leadsAddForm = $('#leads_add_form');
    var leadsAddFormErrors = $('.alert-danger', leadsAddForm);
    var leadsAddFormSuccess = $('.alert-success', leadsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    leadsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    leadsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            customerId: {
                required: true
            },
            itemId: {
                required: true
            },
            city: {
                required: true
            },
            address: {
                required: true
            },
            leadStatus: {
                required: true
            },
            dueDate:{
                required: true
            },
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(leadsAddForm.attr('action'));
            //var dd = moment($('#dueDate').val()).format('DD MMMM YYYY - HH:mm');
            var url = leadsAddForm.attr('action');
            var data = {
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                employeeId: $('#employeeId').val(),
                city: $('#city').val(),
                address: $('#address').val(),
                referralType: $('#referralType').val(),
                customerId: $('#customerId').val(),
                vendorId: $('#vendorId').val(),
                aggregatorId: $('#aggregatorId').val(),
                referralTrackingId: $('#referralTrackingId').val(),
                couponId: $('#couponId').val(),
                leadStatus: $('#leadStatus').val(),
                channel: $('#channel').val(),
                dueDate: $('#dueDate').val(),
                description: $('#description').val(),
                price: parseInt($('#price').val()),
                serviceCharge: parseInt($('#sCharge').val()) || 0,
                paid: parseInt($('#paid').val()) || parseInt($('#price').val()) || 0,
                dueAmount: parseInt($('#due').val()) || 0
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','leads added successfuly. You can view the leads details in <a href="/leadss"><i class="icon-basket-loaded"></i> leadss</a>.','success','fa-check fa-lg');
                    window.location.replace("/leads");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', leadsAddForm).change(function () {
        leadsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        leadsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : leadsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = getToken();
                var sUrl = getAPIUrl();
                
                populateCustomers(buildUrl(sUrl,'customers', token, '3000'),false, data.customerId);
                populateItems(buildUrl(sUrl,'items', token, '3000'),false, data.itemId);
                populateEmployees(buildUrl(sUrl,'employees', token, '3000'),false, data.employeeId);
                if(data.vendorId && data.vendorId !='' && data.vendorId != null){
                    populateVendors(buildUrl(sUrl,'vendors', token, '3000'),false, data.vendorId);
                    addVendor(buildUrl(sUrl,'vendor', token, null), buildUrl(sUrl,'vendors', token, '3000'));
                    $('#vendorId').val(data.vendorId);
                }

                addItem(buildUrl(sUrl,'item', token, null), buildUrl(sUrl,'items', token, '3000'));
                addCustomer(buildUrl(sUrl,'customer', token, null),buildUrl(sUrl,'customers', token, '3000'));
                addEmployee(buildUrl(sUrl,'employee', token, null),buildUrl(sUrl,'employees', token, '3000'));


                $('.lid').html(data.leadId);
                $('#dueDate').val(data.dueDate != undefined ? moment(data.dueDate).format("YYYY-MM-DD HH:mm"):'');
                $('#customerId').val(data.customerId);
                $('#employeeId').val(data.employeeId);
                $('#address').val(data.address);
                $('#bill').val(data.leadId);
                $('#description').val(data.description);
                $('#price').val(data.price);
                $('#sCharge').val(data.serviceCharge);
                $('#paid').val(data.paid);
                $('#due').val(data.dueAmount);
                $('#referralType').val(data.referralType);
                $('#leadStatus').val(data.leadStatus);
                $("#leadStatus").select2({
                    value: data.leadStatus
                });
                $('#channel').val(data.channel);
                $("#channel").select2({
                    value: data.channel
                });
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $('#referralType').change(function() {
        if ($(this).val() === 'Customer') {
            $('#customerOption').removeClass('hide');
            $('#vendorOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $("#customerId").select2({
                placeholder: "Select a customer",
                allowClear: true
            });
        } else if ($(this).val() === 'Vendor') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').removeClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $("#vendorId").select2({
                placeholder: "Select a vendor",
                allowClear: true
            });
        } else if ($(this).val() === 'Lead Source') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
            $('#leadSourcesOption').removeClass('hide');
            $('#leadSourcesOption').removeClass('hide');
            $("#aggregatorId").select2({
                placeholder: "Select a Lead Source",
                allowClear: true
            });

        } else {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
            $('#leadSourcesOption').addClass('hide');
        }
    });


});
var filterLeadsListData = function(url,fromDate, toDate,  name, mobile){
    //delete the table
    $("#leads").remove();
    $("#leads_wrapper").remove();
    var uuu = '/leads'
    if(fromDate != null){
        uuu = uuu + '?fromDate=' + fromDate;
    }
    if(toDate != null){
        uuu = uuu + '&toDate=' + toDate;
    }
    uuu = uuu + '&pno=' + $('#pno').val() + '&psize=' + $('#psize').val();
    if($('#option').val() !=''){
        uuu = uuu +'&q='+$('#option').val();
    }
    
    window.location = uuu;
    initializeTable();
};

$("#tableData > tr > td.clickable").hover(function() {
    $(this).css('cursor','pointer');
}, function() {
    $(this).css('cursor','auto');
});

$('.checkboxes').change(function() {
    if($('.checkboxes:checked').length >= 1){
        $('.btn-action').removeClass('hidden');

        $('#smsMobile').val(number);
        $('#smsMessage').val(msg);
        var msg = $(this).data('service') + '\n' + $(this).data('name') + '\n' + $(this).data('mobile')  + '\n' + $(this).data('jdate') +'\n' + $(this).data('address')+'\n' + $(this).data('price');
        var number = parseInt($(this).data('empid'));
        
    }else{
        $('.btn-action').addClass('hidden');
    }
});
$('.checkboxes').change(function() {
    if($('.checkboxes:checked').length === 1){
        $('#edit').removeClass('hidden');
        $('#task').removeClass('hidden');
        $('#payment').removeClass('hidden');
        $('#invoice').removeClass('hidden');
        if($('#role').val()>0){
            $('#transfer').removeClass('hidden');
             $('#payment').removeClass('hidden');
        }
        $('#confirm').removeClass('hidden');
        if($(this).data('status') === 'CONVERTED'){
            $('#feedback').removeClass('hidden');
            $('#inventory').removeClass('hidden');
        }else{
            $('#quote').removeClass('hidden');
        }
    }else{

        $('#invoice').addClass('hidden');
        $('#task').addClass('hidden');
        $('#payment').addClass('hidden');
        $('#feedback').addClass('hidden');
        $('#edit').addClass('hidden');
        $('#confirm').addClass('hidden');
        $('#inventory').addClass('hidden');
        $('#quote').addClass('hidden');
        $('#transfer').addClass('hidden');
    } 
});
var initializeTable = function(){
    var table = $('#lead');
   
    //var tableWrapper = jQuery('#customers_wrapper');

    table.find('.group-checkable').change(function () {
        
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $('.checkboxes').prop("checked", true);
            } else {
                $('.checkboxes').prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#leads_portlet');
};
$('#delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/lead/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/leads';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

$('#cancel').on('click',function(event){
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        var url = $('#apiUrl').val()+ '/api/lead/'+ $(this).attr('data-id') +'?token='+$('#token').val();
        var data = {
            leadStatus: 'CANCELLED'
        };

        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                if (data && data.result) {
                   i++;
                    if(i == count){
                        window.location = '/leads';
                    }
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

});

$('#complete').on('click',function(event){
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        var url = $('#apiUrl').val()+ '/api/lead/'+ $(this).attr('data-id') +'?token='+$('#token').val();
        var data = {
            leadStatus: 'COMPLETED'
        };

        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                if (data && data.result) {
                   i++;
                    if(i == count){
                        window.location = '/leads';
                    }
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

});

$('#edit').on('click',function(event){

   event.preventDefault();
    var checkboxValues = [];
    $('.checkboxes:checked').map(function() {
        checkboxValues.push($(this).data('id'));
    });
    if(checkboxValues.length === 1){
        var url = '/leads/'+  checkboxValues[0] + '/edit'
        window.location = url;
    }

});


$('#quote').on('click',function(event){
    $('.checkboxes:checked').each(function(){

        var url = '/quotation-add/'+$(this).attr("data-truLead")+'/'+$(this).attr('data-service');
        window.location = url;
    });
});

$('#invoice').on('click',function(event){
    $('.checkboxes:checked').each(function(){
        var url = '/invoice/'+$(this).attr("data-truLead")+'/'+$(this).attr('data-service');
        window.location = url;
    });
});

$("#sendSms").on('click', function(event) {
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        var leadId = $(this).data('id');
        var data = {
            mobile: $(this).data('empid'),
            message: $(this).data('service') 
            + '\nCustomer: ' + $(this).data('name') 
            + '\nMobile: ' + $(this).data('mobile')  
            + '\nDate: ' + $(this).data('jdate') 
            + '\nAddress: ' + $(this).data('address')
            + '\nPrice: ' + $(this).data('price')
        };
        var url = $('#apiUrl').val()+ '/api/bulksms?token='+$('#token').val();
    
        if(data && data.mobile){
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    if(i++ === count){
                        toastr.options.closeButton = true;
                        toastr.success("Your message submitted successfully.");
                    }
                },
                error: function(data) {
                    if(i++ === count){
                        toastr.options.closeButton = true;
                        toastr.error("Something went wrong. Please try again with all the fields.");
                    }
                }
            });
            event.preventDefault();
        }else{
            toastr.error("No employee assigned to the lead "+ leadId);
        }
    });
});


$('#payment').on('click',function(event){
    event.preventDefault();
    var checkboxValues = [];
    $('.checkboxes:checked').map(function() {
        checkboxValues.push($(this).data('id'));
    });
    if(checkboxValues.length === 1){
        var url = $('#apiUrl').val()+'/api/lead/'+  checkboxValues[0] + '/pay?token='+$('#token').val();
        $.ajax({
            url: url,
            type: 'GET',
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Payment link send to the customer");
                window.location = '/leads';
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    }
});

$('#feedback').on('click',function(event){
    $('.checkboxes:checked').each(function(){
            $('#customerName').html($(this).attr("data-customerName"));
            $('#customerNo').html($(this).attr("data-custmobile"));
            $('#customerAddress').html($(this).attr("data-address"));
            $('#customerService').html($(this).attr("data-service"));
            $('#price').html($(this).attr("data-price"));
            $('#jDate').html($(this).attr("data-jdate").slice(0,11));
    });
});

$(document).on('show.bs.modal','#leadConfirmModal', function () {
  //alert('hi');
  var data = null;
  $('.checkboxes:checked').each(function(){
        var leadId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            dd: $(this).data('jdate'),
            empid: $(this).data('eid'),
            price: parseInt($(this).data('price'))
        };
    });
 
  $('#mDueDate').val(data.dd);
  $('#mLeadId').val(data.id);
  $('#mPrice').val(data.price);
  populateEmployees(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false, data.empid);
  $("#employeeId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});



$('#leadConfirm').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/lead/'+ $('#mLeadId').val() +'?token='+$('#token').val();
    var data = {
        leadStatus: 'CONVERTED',
        price: parseInt($('#mPrice').val()),
        dueDate: getDate($('#mDueDate').val()),
        employeeId: $('#employeeId').val()
    };


    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            if($("#sendSmS").is(':checked')){
                $.ajax({
                    url: $('#apiUrl').val()+ '/api/send-sms-customer/'+data.result.id +'?token='+$('#token').val(),
                    type: 'POST',
                    data: {},
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function(data) {
                        toastr.success("Lead confirmed and SMS send successfully.");
                        window.location = '/leads';  
                    },
                    error: function(data) {
                        showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                        return false;
                    }
                });
                
            }else{
                toastr.success("Lead confirmed successfully.");
                window.location = '/leads';    
                
            }  
            

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});


$(document).on('show.bs.modal','#leadAssignModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        var leadId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            dd: $(this).data('jdate'),
            portId: $(this).data('pid'),
            aItemId: $(this).data('aId'),
            cName: $(this).attr("data-customerName"),
            cMob: $(this).data('custmobile'),
            cEmail:$(this).attr("data-custEmail"),
            tLead:$(this).attr("data-truLead"),
            address: $(this).attr("data-address"),
            serviceId: $(this).attr('data-serviceId'),
            price:$(this).attr('data-price')
        };
    });
  $('#aDueDate').val(data.dd);
  $('#aLeadId').val(data.id);
  $('#cName').val(data.cName);
  $('#cMob').val(data.cMob);
  $('#cEmail').val(data.cEmail);
  $('#tLead').val(data.tLead);
  $('#taddress').val(data.address);
  $('#tprice').val(data.price);
  populatePortfolio(buildUrl($('#apiUrl').val(),'mp/portfolios/'+data.serviceId, $('#token').val(), '3000'),false, data.portId);
  $("#portfolioId").select2({
      placeholder: "Select a vendor",
      width: "100%"
  });
   $("#itemId").select2({
          placeholder: "Select an Item",
          width: "100%"
    });
  $('#portfolioId').on('select2:selecting', function() {
      populateItems(buildUrl($('#apiUrl').val(),'getitems/'+this.value, $('#token').val(), '3000',data.serviceId),false, data.aItemId);
          $("#itemId").select2({
              placeholder: "Select an Item",
              width: "100%"
        });
    })
  
});


$('#leadAssign').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/lead/assign?token='+$('#token').val();
    var e = $('#cEmail').val() || '';
    var a = $('#taddress').val() || '';
    var data = {
        dueDate: $('#aDueDate').val(),
        portfolioId: $('#portfolioId').val(),
        itemId: $('#itemId').val(),
        cName: $('#cName').val(),
        cMob: $('#cMob').val(),
        cEmail: e,
        proLeadId : $('#aLeadId').val(),
        leadId : $('#tLead').val(),
        address: a,
        price:$('#tprice').val()
    };

    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/leads';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});

$(document).on('show.bs.modal','#assignToModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        //var leadId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            productId: $(this).data('productId'),
            employeeId:$(this).data('eid')
        };
    });
  $('#mleadId').val(data.id);
  $('#mEmpId').val(data.employeeId);
  //alert($('#mEmpId').val());
  populateProducts(buildUrl($('#apiUrl').val(),'products', $('#token').val(), '30'),false, data.productId);
  $("#productId").select2({
      placeholder: "Select an product",
      width: "100%"
  });

});


$('#assignInvent').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/lead/'+ $('#mleadId').val()+'/inventory?token='+  $('#token').val();
    var data = {
        productId: $('#productId').val(),
        quantity: parseInt($('#mQuantity').val()),
        employeeId: $('#mEmpId').val(),
        leadId: $('#mleadId').val()
    };
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/leads';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});


$(document).on('show.bs.modal','#addTaskModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        var leadId = $(this).data('id');
        $('#leadId').val(leadId);
    });
});

$('#addTask').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/task?token='+  $('#token').val();
    var data = {
        startDate: $('#tDate').val(),
        dueDate: $('#tDate').val(),
        name: $('#name').val(),
        description:$('#description').val(),
        url: '/leads/'+$('#leadId').val()
    };
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Task added successfully.");
            window.location = '/leads';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});



$('#upload').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/lead/bulk?token='+$('#token').val();
    var data = new FormData();
    jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
        data.append('fileToUpload', file);
    });
    $.ajax({
        url: url,
        type: 'POST',
        data: data,
        enctype: 'multipart/form-data',
        processData: false,  // tell jQuery not to process the data
        contentType: false,   // tell jQuery not to set contentType
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead uploaded");
            window.location = '/leads';
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            window.location = '/leads';
            return false;
        }
    });
});

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
        $("#customerId").select2({allowClear: false});
    });
    $('#searched').on('click', function(){
        var npath ='/leads';
       var psize = $("#psize").val();
       var pno = $('#pno').val();

        if($("#from").val() !="" && $("#to").val() !=""){
          npath =npath+'?q='+$('#query').val()+'&fromDate='+$("#from").val()+'&toDate='+$("#to").val()+'&pno='+ pno +'&psize='+ psize;
        }else{
         npath =npath+'?q='+$('#query').val()+'&pno='+ pno +'&psize='+ psize;
        }
        window.location = npath;
    });


    //filterVisitorData(buildUrl(getAPIUrl(),'leads', getToken(), 5000));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterVisitorData(
            buildUrl(getAPIUrl(),'leads', getToken(), 5000), 
            fromDate, toDate, 
            $('#customerId').val()
        );

    });
    initDateRange(buildUrl(getAPIUrl(),'leads', getToken(), 5000));
    //filterVisitorData(buildUrl(getAPIUrl(),'leads', getToken(), 5000));
});
$(document).on('show.bs.modal','#content', function (event) {

   a4 = [595.28, 841.89];
    var source = window.document.getElementsByClassName("print")[0];
    //source.innerHTML = $scope.selectedItem.content;
    margins = {
        top: 80,
        bottom: 60,
        left: 10,
        width: 700
    };
    var doc = new jsPDF({
        margin: margins,
         unit: 'px',
         format: 'a4'
        });
    var specialElHandlers = {
     '#remove-me': function(element, renderer){
       return true;
     }
    };

    $("#download-me").click(function(){
        var printContents = document.getElementById('pdf').innerHTML;
        printContents = '<html><head><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"></head><body>'+ printContents;
        printContents = printContents + '</body></html>';
        window.open().document.write(printContents);
    })
});


$(document).ready(function() {
  $('.pagination').pagination({
      items: $('#total').val(),
      itemsOnPage: $('#psize').val(),
      currentPage: $('#pno').val(),
      cssStyle: 'light-theme',
      onPageClick: function(pageNumber){
          //var sortby = $j("#sortby").val();
          //alert(pageNumber);
          var psize = $("#psize").val();
          var pno = pageNumber;
          var path = window.location.pathname;
         // window.location.href; // Returns full URL
         var npath ='/leads';
         if($("#from").val() !="" && $("#to").val() !=""){
             npath =npath+'?fromDate='+$("#from").val()+'&toDate='+$("#to").val()+'&pno='+ pageNumber +'&psize='+ psize;
         }else{
             npath =npath+'?pno='+ pageNumber +'&psize='+ psize;
            }
            if($('#option').val() !=''){
                npath = npath +'&q='+$('#option').val();
            }
          window.location = npath;
        }
    });
  $('.checkboxes').change(function() {
        if($('.checkboxes:checked').length >= 1){
            $('.btn-delete').removeClass('hidden');
        }else{
            $('.btn-delete').addClass('hidden');
        }
    });

  $("#tableData > tr > td.clickable").hover(function() {
            $(this).css('cursor','pointer');
        }, function() {
            $(this).css('cursor','auto');
    });

  if($('#psize').val()==25){
    $('.page-size').html('25');

  }else if($('#psize').val()==50){
    $('.page-size').html('50');

  }else if($('#psize').val()==100){
     $('.page-size').html('100');

  }else{
    $('.page-size').html('10');
  }
});
 $().ready(function() { 
    var subscriptionAddForm = $('#subscription_add_form');
    var subscriptionAddFormErrors = $('.alert-danger', subscriptionAddForm);
    var subscriptionAddFormSuccess = $('.alert-success', subscriptionAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
   subscriptionAddForm.on('submit', function() {
   // alert('hiii');
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    subscriptionAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            type: {
                required: true
            }
        },


        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = subscriptionAddForm.attr('action');
           // alert('url---'+url);
            var data = {
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                startDate: getDate($('#startDate').val()),
                location: $('#location').val(),
                noservice: parseInt($('#noservice').val()),
                tamount: parseInt($('#samount').val())*parseInt($('#noservice').val()),
                payable: $('#payable').val(),
                samount: $('#samount').val(),
                tax: $('#tax').val(),
                frequency: $('#frequency').val(),
                taxClass: $('#taxClass').val(),
                payment: $('#payment').val(),
                paymentMode: $('#paymentMode').val(),
            };

            alert(JSON.stringify(data));
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','Subscription added successfuly. You can view the maintenance details in <a href="/maintenance"><i class="fa fa-graph"></i> Maintenance</a>.','success','fa-check fa-lg');
                    window.location.replace("/subscriptions");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }
    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', subscriptionAddForm).change(function () {
        subscriptionAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        subscriptionAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null),buildUrl(getAPIUrl(),'items', getToken(), 3000));
    

    $('#startDate').val(moment().format('MM-DD-YYYY'));
    $('#endDate').val(moment().format('MM-DD-YYYY'));
    $('#dueDate').val(moment().format('MM-DD-YYYY'));
 });

startDate = moment().add(1, 'months');

$().ready(function() {
    var subscriptionData = null;
    var updateDetails = function(){
        var date = moment(new Date(subscriptionData.startDate)).format("DD-MMM-YYYY");
        var edate = subscriptionData.endDate != undefined ?moment(new Date(subscriptionData.endDate)).format("DD-MMM-YYYY") :'';
        var ndate = moment(new Date(subscriptionData.dueDate)).format("DD-MMM-YYYY");
        $('#displayCustomer').html(subscriptionData.customer.name);
        $('#displayService').html(subscriptionData.item.name);
        $('#displayStart').html(date);
        $('#displayEnd').html(edate);
        $('#displayNext').html(ndate);
        $('#displayLocation').html(subscriptionData.location);
        $('#displaynoService').html(subscriptionData.noservice);
        $('#displayTamount').html(subscriptionData.tamount); 
        $('#displaySamount').html(subscriptionData.samount);
        $('#displayTax').html(subscriptionData.tax);
        $('#displayFrequency').html(subscriptionData.frequency);
        $('#displayTclass').html(subscriptionData.taxClass);
        $('#displayPayment').html(subscriptionData.payment);
        $('#displayMode').html(subscriptionData.paymentMode);
        $('#displayPayable').html(subscriptionData.payable);
        for(var i=0; i < subscriptionData.Service.length; i++){
            $('#cData').append(
                '<tr>'+
                    '<td>'+ moment(new Date(subscriptionData.Service[i].startDate)).format("DD-MMM-YYYY")+ '</td>'+
                        
                    '<td>'+ subscriptionData.item.name+ '</td>'+
                    '<td>'+subscriptionData.samount+'</td>'+
                    '<td>'+subscriptionData.Service[i].status+'</td>'+
                    '<td><button class="btn btn-sm btn-default btn-paid" paid-id='+subscriptionData.Service[i].id+'>Paid</button></td>'+
                '</tr>'
            );
        }
    };
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                subscriptionData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });



    $('#cData').on('click', '.btn-paid', function(){
        alert('clicked');
        var id = $('.btn-paid').attr('paid-id');
        var sid = $('#subscribeId').val();
        var data = {
            paidId:id
        };
        alert(JSON.stringify(data));
        var u = 'http://localhost:8088/api/paidsubscription/'+sid+'?token='+$('#token').val();
        alert(u);
        $.ajax({
            url: u,
            type: 'PUT',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                alert(JSON.stringify(data));
            },
            error: function(data) {
               alert(JSON.stringify(data));
            } 
        });
    });
});




 $().ready(function() {
    var subscriptionEditForm = $('#subscription_edit_form');
    var subscriptionEditFormErrors = $('.alert-danger', subscriptionEditForm);
    var subscriptionEditFormSuccess = $('.alert-success', subscriptionEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    subscriptionEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    subscriptionEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           type: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(authorsEditForm.attr('action'));
            //var url = maintenanceEditForm.attr('action');
            var url = $('#url').val();
            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#maintenanceId').val(),
                type: $('#type').val(),
                assetId: $('#assetId').val(),
                dueDate: $('#dueDate').val(),
                itemId: $('#itemId').val(),
                employeeId: $('#employeeId').val(),
                mstatus: $('#status').val(),
                description: $('#description').val()
            };
           // alert(url);

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Authors updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/subscriptions");
                    subscriptionData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', subscriptionEditForm).change(function () {
        subscriptionEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        subscriptionEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });



    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null),buildUrl(getAPIUrl(),'items', getToken(), 3000));
    alert(subscriptionEditForm.attr('action'))
    $.ajax({
       // url: $('#url').val(),
        url : subscriptionEditForm.attr('action'),
        type: 'GET',
        success: function(data) {
            alert(JSON.stringify(data));
            if (data) {
                var date = moment(new Date(data.dueDate)).format("DD-MMM-YYYY");
                $('#customerId').val(data.customer.id);
                $('#itemId').val(data.customer.id);
                $('#dueDate').val(date);
                $('#startDate').val(data.itemId);
                $('#endDate').val();
                $('#dueDate').val();
                $('#location').val(data.location);
                $('#noservice').val(data.noservice);
                $('#tamount').val(data.tamount);
                $('#samount').val(data.samount);
                $('#tax').val(data.tax);
                $('#frequency').val(data.frequency);
                $('#taxClass').val(data.taxClass);
                $('#payment').val(data.payment);
                $('#paymentMode').val(data.paymentMode);
                $('#payable').val(data.payable);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('#startDate').val(moment().format('MM-DD-YYYY'));
    $('#endDate').val(moment().format('MM-DD-YYYY'));
    $('#dueDate').val(moment().format('MM-DD-YYYY'));



});
    
var filterSubscriptionListData = function(url, startDate, endDate, customerId){
    //delete the table
    $("#subscription_list").remove();
    $("#subscription_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="subscription_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#subscription_list .checkboxes" /> </th>'+
                        '<th> Date </th>'+
                        '<th> Service </th>'+
                        '<th> Customer </th>'+
                        '<th> Location </th>'+
                        '<th> Amount </th>'+
                        
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    getSubscriptionsListData(url);
};

var goToSubscription = function(subscribeId){
    window.location = '/subscriptions/' + subscribeId;
};

var getSubscriptionsListData = function(url){
    
    App.blockUI({
        target: '#subscription_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#subscription_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    alert(JSON.stringify(row));
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+ // onclick=goToEmployees("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToSubscription("'+row.id +'")>' + (row.startDate != undefined ? moment(new Date(row.startDate)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td class="clickable" onclick=goToSubscription("'+row.id +'")>' + (row.item != undefined ? row.item.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToSubscription("'+row.id +'")>' + (row.customer != undefined ? row.customer.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToSubscription("'+row.id +'")>' + (row.dueDate != undefined ? moment(new Date(row.dueDate)).format("DD-MMM-YYYY"): '') + ' </td>' +
                            '<td class="clickable" onclick=goToSubscription("'+row.id +'")>' + (row.location != undefined ? row.location: '') + ' </td>' +
                            '<td class="clickable" onclick=goToSubscription("'+row.id +'")>' + (row.tamount != undefined ? row.tamount : '') + ' </td>' +

                        '</tr>'
                    );
                    }

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }

           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }

    });
};


var initializeTable = function(){
    var table = $('#maintenance_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#subscription_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#subscription_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/subscription/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Subscription has been deleted successfully.", "success");
                            window.location = '/subscriptions';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
    
});

$('.filter-btn').on('click', function(){
    $('.table-filters').toggleClass("hide");
    $("#customerId").select2({allowClear: false});
});

getSubscriptionsListData(buildUrl(getAPIUrl(),'subscriptions', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var fromDate = toDate = null;
    event.preventDefault();

    filterLeadsListData(
        buildUrl(getAPIUrl(),'leads', getToken(), 3000), 
        fromDate, toDate, 
        $('#customerId').val()
    );

});

initDateRange(buildUrl(getAPIUrl(),'leads', getToken(), 3000));
$().ready(function() {
    var quotationsAddForm = $('#quotation_add_form');
    var quotationsAddFormErrors = $('.alert-danger', quotationsAddForm);
    var quotationsAddFormSuccess = $('.alert-success', quotationsAddForm);

    var lUrl = $('#lUrl').val();
    $.ajax({
            url: lUrl,
            type: 'GET',
            success: function(data) {
                //alert(JSON.stringify(data));
                if (data){
                    $('#leadId').val(data.leadId);
                    $('#leadDate').val(moment(new Date(data.createdOn)).format("MMM DD, YYYY"));
                    $('#customerName').val(data.customer.name);
                    $('#customerAddress').val(data.customer.address);
                    $('#customerMobile').val(data.customer.mobile);
                    $('#customerEmail').val(data.customer.email);

                }
                //showAlertMessage('successMessage','New Quotation added successfuly. You can view the Quotation details in <a href="/quotations"><i class="fa fa-file-text-o"></i> Quotations</a>.','success','fa-check fa-lg');
                //window.location.replace("/sales-ledger");
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    quotationsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    quotationsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            cName: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(quotationsAddForm.attr('action'));

            var url = quotationsAddForm.attr('action');
            
            var inv = new Object();
            inv.key = $('#invoiceNoKey').val();
            inv.value = $('#invoiceNoValue').val();

            var dn = new Object();
            dn.key = $('#deliveryNoteKey').val();
            dn.value = $('#deliveryNoteValue').val();

            var sr = new Object();
            sr.key = $('#supplierRefKey').val();
            sr.value = $('#supplierRefValue').val();

            var iv = new Object();
            iv.key = $('#invoiceDateKey').val();
            iv.value = $('#invoiceDateValue').val();

            var pm = new Object();
            pm.key = $('#paymentModeKey').val();
            pm.value = $('#paymentModeValue').val();

            var or = new Object();
            or.key = $('#otherRefKey').val();
            or.value = $('#otherRefValue').val();

            var on = new Object();
            on.key = $('#orderNoKey').val();
            on.value = $('#orderNoValue').val();

            var dp = new Object();
            dp.key = $('#dispatchedNoKey').val();
            dp.value = $('#dispatchedNoValue').val();

            var dt = new Object();
            dt.key = $('#dispatchedThroughKey').val();
            dt.value = $('#dispatchedThroughValue').val();

            var od = new Object();
            od.key = $('#orderDateKey').val();
            od.value = $('#orderDateValue').val();

            var dDate = new Object();
            dDate.key = $('#dispatchedDateKey').val();
            dDate.value = $('#dispatchedDateValue').val();

            var dtn = new Object();
            dtn.key = $('#destinationKey').val();
            dtn.value = $('#destinationValue').val();

            var itemDes = new Object();
            itemDes.key = $('#itemDescriptionKey').val();
            itemDes.value = $('#itemDescriptionValue').val();

            var qty = new Object();
            qty.key = $('#quantityKey').val();
            qty.value = $('#itemQty').val();

            var ret = new Object();
            ret.key = $('#rateKey').val();
            ret.value = $('#itemRate').val();

            var amt = new Object();
            amt.key = $('#amountKey').val();
            amt.value = parseFloat($('#itemTotal').html());

            var sTotal = new Object();
            sTotal.key = $('#subTotalLabel').val();
            sTotal.value = parseFloat($('#subTotal').html());

            var tax = new Object();
            tax.key = $('#taxLabel').val();
            tax.value = parseFloat($('#taxAmt').html());

            var tot = new Object();
            tot.key = $('#totalLabel').val();
            tot.value = parseFloat($('#total').html());

            var sTax = new Object();
            sTax.key = $('#serviceTaxNoKey').val();
            sTax.value = $('#serviceTaxNoValue').val();

            var pan = new Object();
            pan.key = $('#panNoKey').val();
            pan.value = $('#panNoValue').val();

            var tin = new Object();
            tin.key = $('#tinNoKey').val();
            tin.value = $('#tinNoValue').val();

            var bank = new Object();
            bank.key = $('#bankNameKey').val();
            bank.value = $('#bankNameValue').val();

            var account = new Object();
            account.key = $('#accountNoKey').val();
            account.value = $('#accountNoValue').val();

            var ifsc = new Object();
            ifsc.key = $('#branchIfscKey').val();
            ifsc.value = $('#branchIfscValue').val();

            var sig = new Object();
            sig.key = $('#signature').val();
            sig.value = $('#signature').val();

            var note = new Object();
            note.key = $('#notesKey').val();
            note.value = $('#notesValue').val();

            var term = new Object();
            term.key = $('#termsKey').val();
            term.value = $('#termsValue').val();
           // alert($('#customerMobile').val());
            var data = {
                cName: $('#companyName').val(),
                //cName: JSON.stringify(cn),
                street: $('#street').val(),
                province: $('#province').val(),
                city: $('#city').val(),
                country: $('#country').val(),
                email: $('#email').val(),
                invoiceNo: inv,
                deliveryNote: dn,
                leadId: $('#leadId').val(),
                customerName: $('#customerName').val(), 
                customerMobile: $('#customerMobile').val(),
                customerEmail: $('#customerEmail').val(),
                customerAddress: $('#customerAddress').val(),
                companyLogo: $('#coverImage').val(),
                validUntil: $('#validUntil').val(), 
                supplierRef: sr,
                iDate: iv,
                paymentMode: pm,
                otherRef: or,
                billTo: $('#billTo').val(),
                orderNo: on,
                dispatchedNo: dp,
                dispatchedThrough: dt,
                orderDate: od,
                dispatchedDate: dDate,
                destination: dtn,
                itemDescription: itemDes,
                quantity: qty,
                rate: ret,
                amount: amt,
                subTotal: sTotal,
                salesTax: tax,
                total: tot,
                inWords: $('#totalInwords').val(),
                cDetails: $('#cDetails').val(),
                serviceTaxNo: sTax,
                panNo: pan,
                tinNo: tin,
                bankName: bank,
                accountNo: account,
                branchIfsc: ifsc,
                description: $('#description').val(),
                signature: sig,
                notes: note,
                terms: term,
                address: $('#address').val()
            };
         //   alert(data.customerName);
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','New Quotation added successfuly. You can view the Quotation details in <a href="/quotations"><i class="fa fa-file-text-o"></i> Quotations</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', quotationsAddForm).change(function () {
        quotationsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        quotationsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});

function printQuote(printableArea){
    var printContents = document.getElementById(printableArea).innerHTML;
     var originalContents = document.body.innerHTML;

     document.body.innerHTML = printContents;

     window.print();

     document.body.innerHTML = originalContents;
}
$(document).on("click", "#print-click", printQuote);


var hostUrl = document.location.host;
if (hostUrl.indexOf(".hurreh.com") != -1) {
  hostUrl = "https://accounts.hurreh.com/accounts/register.js?servicename=HurrehInvoice&loadcss=false&serviceurl="+encodeURIComponent('https://invoice.hurreh.com/home?cs=true&websignup=true&source_url=invoice_generator');
} else {
hostUrl = "https://accounts.localhurreh.com/accounts/register.js?servicename=HurrehInvoice&loadcss=false&serviceurl="+encodeURIComponent('https://invoice.localhurreh.com/home?cs=true&websignup=true&source_url=invoice_generator');
}

function setHostUrl(isSend){
    var s = document.createElement("script");
    s.type = "text/javascript";
    s.setAttribute("id", "regscript");
    $("#regscript").remove();
    var encodedURLParam = encodeURIComponent("&source_action=send");
    var targetUrl;
    targetUrl = hostUrl.replace(encodedURLParam, "");
    if(isSend){
        targetUrl = targetUrl + encodedURLParam;
    }
    s.src = targetUrl;
    document.getElementsByTagName("head")[0].appendChild(s);
}

$(document).ready(function() {

for (var i = 1; i <= 3; i++) {
    autosize($("#itemDesc\\." + i));
}
autosize($("#terms"));
autosize($("#customerNotes"));

var todayDate = $.fn.datepicker.DPGlobal.formatDate(new Date(), $.fn.datepicker.DPGlobal.parseFormat("M dd, yyyy"), "en");

$("#iDate").attr("placeholder", todayDate);
$("#orderDate").attr("placeholder", todayDate);

$('.iDate').datepicker({   
    format: "M dd, yyyy",
    autoclose: true,
    orientation: 'auto',
    keyboardNavigation: false,
    todayHighlight: true
});

$('.orderDate').datepicker({
    format: "M dd, yyyy",
    autoclose: true,
    orientation: 'auto',
    keyboardNavigation: false,
    todayHighlight: true
});

$('.dispatchedDate').datepicker({
    format: "M dd, yyyy",
    autoclose: true,
    orientation: 'auto',
    keyboardNavigation: false,
    todayHighlight: true
});

$.each(InvoiceGenerator.currencyList, function(key, item) {
    $('#currencySelect')
        .append($("<option></option>")
            .attr("value", key)
            .attr("symbol", item.currency_symbol)
            .text(key + " - " + item.currency_name + " (" + item.currency_symbol + ")"));
});
$("#currencySelect").val($("#currencyCode").val());

            $('#signupModal').on('shown.bs.modal', function () {
            $('#email').focus();
            });

            var baseUrl =  "https://localhost:8443";
            var hostURL = document.location.host;
            if(hostURL.indexOf("localhurreh.com") !== -1){
                baseUrl = "https://invoice.localhurreh.com";
            } else if(hostURL.indexOf("hurreh.com") !== -1){
                baseUrl = "https://invoice.hurreh.com";
            }
            InvoiceGenerator.baseUrl = baseUrl + "/api/v3/invoicegenerator";
});

 $("#printInvoice").on("click", function () {
    var divContents = $("#invoice").html();
    var printWindow = window.open('', '', 'height=400,width=800');
    printWindow.document.write('<html><head><title>Report</title>');
    printWindow.document.write('</head><body >');
    printWindow.document.write(divContents);
    printWindow.document.write('</body></html>');
    printWindow.document.close();
    printWindow.print();
});

$().ready(function() {
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
});


$().ready(function() {
    var quotationsAddForm = $('#quotation_add_form');
    var quotationsAddFormErrors = $('.alert-danger', quotationsAddForm);
    var quotationsAddFormSuccess = $('.alert-success', quotationsAddForm);

    var dUrl = $('#url').val();
    $.ajax({
        url: dUrl,
        type: 'GET',
        success: function(data) {
            if (data){
                //$("#logo1").attr("src",$('#logo').attr('src'));
                $('#from1').val(data.quotation.from);
                $('#to1').val(data.quotation.to);
                $('#qoteno1').html(data.quotation.quotationNo);
                $('#pan1').html(data.quotation.panNo);
                $('#gst1').html(data.quotation.gstNo);
                $('#date1').html(data.quotation.date != undefined ? moment(data.quotation.date).format("DD-MM-YYYY"):'');
                $('#tax1').html(data.quotation.tax);
                $('#dis1').html(data.quotation.discount);
                $('#notes1').val(data.quotation.notes);
                $('#terms1').val(data.quotation.terms);
                $('#st1').html(data.quotation.subTotal);
                $('#total1').html(data.quotation.total);
                $('#lid').html(data.quotation.leadId);
                $(".pdf").attr("href", data.quotation.pdf);
                
                if(data.quotation.services && data.quotation.services.length >0){
                    for (i = 0; i < data.quotation.services.length; i++) {
                        var row = data.quotation.services[i];
                        $('#tableData').append(
                            //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                            '<tr>'+
                                '<td> ' + (row.item != undefined ? row.item: '') + ' </td>' +
                                '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
                                '<td> ' + (row.quantity != undefined ? row.quantity: '') + ' </td>' +
                                '<td> ' + (row.amount != undefined ? row.amount: '') + ' </td>' +
                                // '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                            '</tr>'
                        );
                    }
                }

            }
            //showAlertMessage('successMessage','New Quotation added successfuly. You can view the Quotation details in <a href="/quotations"><i class="fa fa-file-text-o"></i> Quotations</a>.','success','fa-check fa-lg');
            //window.location.replace("/sales-ledger");
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
})

$('.pointer').on('click',function(event){
	var clickedID = this.id;
	if(clickedID === 'tper'){
		$('#tper').addClass("greenDiv");
		$('#trs').removeClass("greenDiv");

		var tamount = parseInt($('#stt').val()) * (parseInt(($('#tax').val() || 0))/100);
		$('#taxamount').val(tamount);
		if($('#discount').val() ==0){
            var subtotal = (parseInt($('#discount').val())+tamount)+ parseInt($('#stt').val());
        }else{
            var subtotal = (tamount-parseInt($('#discount').val()))+ parseInt($('#stt').val());
        }
         $('#total').html('₹'+subtotal);
         $('#totalval').val(subtotal);
	}else if(clickedID === 'trs'){
		$('#tper').removeClass("greenDiv");
		$('#trs').addClass("greenDiv");
		var tamount = parseInt($('#tax').val() || 0);
		$('#taxamount').val(tamount);
		if($('#discount').val() ==0){
            var subtotal = (parseInt($('#discount').val())+tamount)+ parseInt($('#stt').val());
        }else{
            var subtotal = (tamount-parseInt($('#discount').val()))+ parseInt($('#stt').val());
        }
        $('#total').html('₹'+subtotal);
        $('#totalval').val(subtotal);

	}else if(clickedID === 'dper'){
		$('#drs').removeClass("greenDiv");
		$('#dper').addClass("greenDiv");

        var damount = parseInt($('#stt').val()) * ((parseInt($('#dis').val() || 0))/100);

        $('#discount').val(damount);

        var subtotal =  (parseInt($('#taxamount').val())-damount) + parseInt($('#stt').val());
        $('#total').html('₹'+subtotal);
        $('#totalval').val(subtotal);
	}else{
		$('#drs').addClass("greenDiv");
		$('#dper').removeClass("greenDiv");
		var damount =parseInt($('#dis').val() || 0);

        $('#discount').val(damount);
        
        var subtotal =  (parseInt($('#taxamount').val())-damount) + parseInt($('#stt').val());
        $('#total').html('₹'+subtotal);
        $('#totalval').val(subtotal);
	}
})

$('#addQuotation').on('click',function(event){
	var data= {
		from:$('#from').val(),
		to:$('#to').val(),
		quotationNo: $('#qno').val(),
		panNo: $('#pan').val(),
		gstNo: $('#gst').val(),
		date: $('#qdate').val(),
		notes:$('#notes').val(),
		terms:$('#terms').val(),
		total:$('#total').text(),
		subTotal:$('#st').text(),
		leadId: $('#leadId').val()
	};

	var idArray = [];
    $('.greenDiv').each(function () {
        idArray.push(this.id);

    });
     if(idArray.indexOf('dper')> -1){
        data.discount = ( $('#dis').val() || 0)+'%';
     }else{
        data.discount = '₹'+($('#dis').val() || 0);
     }

     if(idArray.indexOf('tper')> -1){
        data.tax = ($('#tax').val() || 0)+'%';
     }else{
        data.tax = '₹'+($('#tax').val() || 0);
     }

	var checklist = []
    jQuery('.service').each(function(e){
        var obj = {
            item:$(this).find('input[name*="item1"]').val(),
            price:$(this).find('input[name*="rate"]').val(),
            quantity:$(this).find('input[name*="qty"]').val(),
            amount:$(this).find('input[name*="amount"]').val()
        }
        checklist.push(obj);
    });
    data.services = checklist;
	 var url = getAPIUrl()+ '/api/quotation?token='+getToken();
	$.ajax({
        url: url,
        type: 'POST',
        dataType: "json",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function(data) {
        	window.open(data.result);
          //window.open(data.result,'_blank');
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
})

$('#sendEmail').on('click',function(event){
	var data= {
		from:$('#from').val(),
		to:$('#to').val(),
		invoiceNo: $('#qno').val(),
		panNo: $('#pan').val(),
		gstNo: $('#gst').val(),
		date: $('#qdate').val(),
		notes:$('#notes').val(),
		terms:$('#terms').val(),
		total:$('#total').text(),
		subTotal:$('#st').text(),
		leadId: $('#leadId').val()
	};

	var idArray = [];
    $('.greenDiv').each(function () {
        idArray.push(this.id);

    });
     if(idArray.indexOf('dper')> -1){
        data.discount = ( $('#dis').val() || 0)+'%';
     }else{
        data.discount = '₹'+($('#dis').val() || 0);
     }

     if(idArray.indexOf('tper')> -1){
        data.tax = ($('#tax').val() || 0)+'%';
     }else{
        data.tax = '₹'+($('#tax').val() || 0);
     }

	var checklist = []
    jQuery('.service').each(function(e){
        var obj = {
            item:$(this).find('input[name*="item1"]').val(),
            price:$(this).find('input[name*="rate"]').val(),
            quantity:$(this).find('input[name*="qty"]').val(),
            amount:$(this).find('input[name*="amount"]').val()
        }
        checklist.push(obj);
    });
    data.services = checklist;
	 var url = getAPIUrl()+ '/api/quotation/sendemail?token='+getToken();
	$.ajax({
        url: url,
        type: 'POST',
        dataType: "json",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function(data) {
        	//window.open(data.result);
          //window.open(data.result,'_blank');
          toastr.options.closeButton = true;
           toastr.success("Your email send successfully.");
           window.location = '/leads';
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
})


$().ready(function() {
	$(document).on('show.bs.modal','#preview', function () {
		$("#logo1").attr("src",$('#logo').attr('src'));

		$('#from1').val($('#from').val());
		$('#to1').val($('#to').val());
		$('#qoteno1').html($('#qno').val());
		$('#pan1').html($('#pan').val());
		$('#gst1').html($('#gst').val());
		$('#date1').html($('#qdate').val());
		$('#notes1').val($('#notes').val());
		$('#terms1').val($('#terms').val());
		$('#st1').html($("#st").text());
		$('#total1').html($('#total').text());
		var checklist = []
        jQuery('.service').each(function(e){
            var obj = {
                item:$(this).find('input[name*="item1"]').val(),
                price:$(this).find('input[name*="rate"]').val(),
                quantity:$(this).find('input[name*="qty"]').val(),
                amount:$(this).find('input[name*="amount"]').val()
            }
            checklist.push(obj);
        });

        var idArray = [];
	    $('.greenDiv').each(function () {
	        idArray.push(this.id);

	    });
        if(idArray.indexOf('dper')> -1){
	        $('#dis1').html(( $('#dis').val() || 0)+'%');
	     }else{
	        $('#dis1').html('₹'+($('#dis').val() || 0));
	     }
	     if(idArray.indexOf('tper')> -1){
	        $('#tax1').html(($('#tax').val() || 0)+'%');
	     }else{
	        $('#tax1').html('₹'+($('#tax').val() || 0));
	     }
        /*var data = {
            services: checklist
        }*/
        if(checklist.length >0){
        	for (i = 0; i < checklist.length; i++) {
	            var row = checklist[i];
	            $('#tableData').append(
	                //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
	                '<tr>'+
	                    '<td> ' + (row.item != undefined ? row.item: '') + ' </td>' +
	                    '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
	                    '<td> ' + (row.quantity != undefined ? row.quantity: '') + ' </td>' +
	                    '<td> ' + (row.amount != undefined ? row.amount: '') + ' </td>' +
	                    // '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
	                '</tr>'
	            );
	        }
        }

	});
	$('#total').html('₹'+0);
	$('#totalval').val(0);
	$('#discount').val(0);
	$('#taxamount').val(0);
	$('#stt').val(0);
	$('#st').html('₹'+0);
})

var filterQuotationsListData = function(url){
    //delete the table
    $("#quotations_list").remove();
    $("#quotations_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="quotations_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#quotations_list .checkboxes" /> </th>'+
                        '<th> Quote Id </th>'+
                        '<th> Lead Id </th>'+
                        '<th> Customer </th>'+
                        '<th> Date </th>'+
                        '<th> Name </th>'+
                        // '<th> Mobile </th>'+
                        // '<th> Address </th>'+
                        '<th> Amount </th>'+ 
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getQuotationsListData(url);
};

var goToQuotations = function(quoteId){
    window.location = '/quotations/' + quoteId;
};

var getQuotationsListData = function(url){
    App.blockUI({
        target: '#quotations_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#quotations_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToQuotations("'+row.id +'")>' + (row.quotationNo != undefined ? row.quotationNo: '') + ' </td>' +
                            '<td class="clickable" onclick=goToQuotations("'+row.id +'")>' + (row.leadId != undefined ? row.leadId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToQuotations("'+row.id +'")>' + (row.to != undefined ? row.to: '') + ' </td>' +
                            '<td> ' + (row.total != undefined ? row.total: 0) + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });
                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#quotations_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#quotations_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#quotations_portlet');
};


$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/quotation/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Quotation has been deleted successfully.", "success");
                            window.location = '/quotations';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

$().ready(function() {
    getQuotationsListData(buildUrl(getAPIUrl(),'quotations', getToken(), 3000));

    $('#filter-submit').on('click', function(event){
        var str = $('#reportrange span').html();
        var dates = str.split(" - "); 
        // var fromDate = moment(dates[0], "MMMM D, YYYY");
        // var toDate = moment(dates[1], "MMMM D, YYYY");

        event.preventDefault();

        filterQuotationsListData(buildUrl(getAPIUrl(),'quotations', getToken(), 3000));
    });

    initDateRange(null);
});

function onSignupReady() {
    $(document.body).css("visibility", "visible");
    $.fn.zaSignUp.defaults.disableSubmit = function() {
            return "Sign Up"; 
    }
    $.fn.zaSignUp.defaults.getConfirmationTemplate = function() {
            return '';
    }

    $("#signupform").zaSignUp({
        onsubmit: function() {
                $("#za-signup-btn").attr("disabled", true);
                $("#ZI-load").css("display","block");
        },
        oncomplete: function(state) {
            var statusKey;
            $.each($.fn.zaSignUp.SIGNUP_STATE, function(key, value) {
                    if (state === value) {
                            statusKey = key;
                            return false; 
                    }
            });

            dataLayer.push({
                    event: 'gaEvent',
                    gaCategory: 'invoice_conversion',
                    gaAction: 'signup',
                    gaLabel: 'STATE_' + statusKey
            });

            if (state == $.fn.zaSignUp.SIGNUP_STATE.ERROR) {
                    $("#za-signup-btn").attr("disabled", false); 
                    $("#ZI-load").css("display","none"); 
            }
            if (state == $.fn.zaSignUp.SIGNUP_STATE.ACCOUNT_CREATED) {

                    dataLayer.push({
                            event: 'gaEvent',
                            gaCategory: 'invoice_conversion_from_invgenerator',
                            gaAction: 'signup',
                            gaLabel: 'completed'
                    });
            }
        },
        x_signup: {
                password_required: true
        }
    });
}

        window.trackSignUpClick = function() {
            dataLayer.push({
            event: 'gaEvent',
            gaCategory: 'invoice_signup_fromgenerator',
            gaAction: 'signup',
            gaLabel: 'invoice_generator'
            });
        }

 $().ready(function() { 
    var maintenanceAddForm = $('#maintenance_add_form');
    var maintenanceAddFormErrors = $('.alert-danger', maintenanceAddForm);
    var maintenanceAddFormSuccess = $('.alert-success', maintenanceAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
   maintenanceAddForm.on('submit', function() {
   // alert('hiii');
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    maintenanceAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            type: {
                required: true
            }
        },



        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = maintenanceAddForm.attr('action');
           // alert('url---'+url);
            var data = {
                dueDate: $('#dueDate').val(),
                type: $('#type').val(),
                assetId: $('#assetId').val(),
                employeeId: $('#employeeId').val(),
                itemId: $('#itemId').val(),
                description: $('#description').val(),
                price: $('#price').val(),
                mstatus: $('#mstatus').val(),
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Maintenance added successfuly. You can view the maintenance details in <a href="/maintenance"><i class="fa fa-graph"></i> Maintenance</a>.','success','fa-check fa-lg');
                    window.location.replace("/maintenance");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }
    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', maintenanceAddForm).change(function () {
        maintenanceAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        maintenanceAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateEmployees(buildUrl(getAPIUrl(),'employees', getToken(), 3000),false);
    addEmployee(buildUrl(getAPIUrl(),'employee', getToken(), null),buildUrl(getAPIUrl(),'employees', getToken(), 3000));
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null),buildUrl(getAPIUrl(),'items', getToken(), 3000));
    populateAssets(buildUrl(getAPIUrl(),'assets', getToken(), 3000),false);

     $('#dueDate').val(moment().format('MM-DD-YYYY'));
 });

$().ready(function() {
    var maintenanceData = null;

    var updateDetails = function(){ 
        //alert(JSON.stringify(maintenanceData));
        var date = moment(new Date(maintenanceData.dueDate)).format("DD-MMM-YYYY");
        $('#displayType').html(maintenanceData.type);
        $('#displayAsset').html(maintenanceData.asset.assetId);
        $('#displayDate').html(date);
        $('#displayService').html(maintenanceData.item.name);
        $('#displayServiceUnit').html(maintenanceData.item.unit);
        $('#displayServicePrice').html(maintenanceData.item.price);
        $('#displayEngineer').html(maintenanceData.employee.name);
        $('#displayEngineerMobile').html(maintenanceData.employee.mobile);
        $('#displayEngineerEmail').html(maintenanceData.employee.email);
        $('#displayStatus').html(maintenanceData.mstatus);
        $('#displayDescription').html(maintenanceData.description);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                maintenanceData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
        var date = moment(new Date(maintenanceData.dueDate)).format("DD-MMM-YYYY");
        $('#type').val(maintenanceData.type);
        $('#assetId').val(maintenanceData.asset.assetId);
        $('#dueDate').val(date);
        $('#itemId').val(maintenanceData.itemId);
        $('#employeeId').val(maintenanceData.employeeId);
        $('#status').val(maintenanceData.status);
        $('#description').val(maintenanceData.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/maintenance';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var maintenanceEditForm = $('#maintenance_edit_form');
    var maintenanceEditFormErrors = $('.alert-danger', maintenanceEditForm);
    var maintenanceEditFormSuccess = $('.alert-success', maintenanceEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    maintenanceEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    maintenanceEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           type: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(authorsEditForm.attr('action'));
            //var url = maintenanceEditForm.attr('action');
            var url = $('#url').val();
            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#maintenanceId').val(),
                type: $('#type').val(),
                assetId: $('#assetId').val(),
                dueDate: $('#dueDate').val(),
                itemId: $('#itemId').val(),
                employeeId: $('#employeeId').val(),
                mstatus: $('#status').val(),
                description: $('#description').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Authors updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/maintenance");
                    maintenanceData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', maintenanceEditForm).change(function () {
        maintenanceEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        maintenanceEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateEmployees(buildUrl(getAPIUrl(),'employees', getToken(), 3000),false);
    addEmployee(buildUrl(getAPIUrl(),'employee', getToken(), null),buildUrl(getAPIUrl(),'employees', getToken(), 3000));

    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    

    addItem(buildUrl(getAPIUrl(),'item', getToken(), null),buildUrl(getAPIUrl(),'items', getToken(), 3000));

    $('#dueDate').val(moment().format('DD-MM-YYYY'));
});
var filterMaintenanceListData = function(url, startDate, endDate, employeeId){
    //delete the table
    $("#maintenance_list").remove();
    $("#maintenance_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="maintenance_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#maintenance_list .checkboxes" /> </th>'+
                        '<th> Asset Id </th>'+
                        '<th> Type </th>'+
                        '<th> Date </th>'+
                        '<th> Service </th>'+
                        '<th> Engineer </th>'+
                        '<th> Description </th>'+
                        '<th> Status </th>'+

                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    getmaintenanceListData(url);
};

var goToMaintenance = function(tokenId){
    window.location = '/maintenance/' + tokenId;
};

var getmaintenanceListData = function(url){
    
    App.blockUI({
        target: '#maintenance_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#maintenance_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    //alert(JSON.stringify(row));
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+ // onclick=goToEmployees("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id +'"/></td>' +
                            
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.asset != undefined ? row.asset.assetId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.type != undefined ? row.type: '') + ' </td>' +
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.dueDate != undefined ? moment(new Date(row.dueDate)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.item != undefined ? row.item.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.employee != undefined ? row.employee.name : '') + ' </td>' +
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.description != undefined ? row.description : '') + ' </td>' +
                            '<td class="clickable" onclick=goToMaintenance("'+row.id +'")>' + (row.mstatus != undefined ? row.mstatus: '') + ' </td>' + 
                        '</tr>'
                    );
                    }

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }

           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }

    });
};


var initializeTable = function(){
    var table = $('#maintenance_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#maintenance_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#maintenance_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/maintenance/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Maintenance has been deleted successfully.", "success");
                            window.location = '/maintenance';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
     
});
getmaintenanceListData(buildUrl(getAPIUrl(),'maintenances', getToken(), 3000));
$('#dueDate').val(moment().format('DD-MM-YYYY'));
$().ready(function() {
    var orderAddForm = $('#order_add_form');
    var orderAddFormErrors = $('.alert-danger', orderAddForm);
    var orderAddFormSuccess = $('.alert-success', orderAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    orderAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    orderAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            orderDate:{
                required: true
            },
            customerId: {
                required: true
            },
            grossTotal: {
                required: true
            },
            amountPaid: {
                required: true
            },
            orderStatus: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(orderAddForm.attr('action'));
            var url = orderAddForm.attr('action');
            var data = {
                orderId: $('#orderId').val() || '',
                orderDate: getDate($('#orderDate').val()),
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                grossTotal: parseFloat($('#grossTotal').val()),
                amountPaid: parseFloat($('#amountPaid').val()),
                deliveryAddress: $('#deliveryAddress').val(),
                orderStatus: $('#orderStatus').val()
            };
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','Order added successfuly. You can view the order details in <a href="/orders"><i class="icon-basket-loaded"></i> Orders</a>.','success','fa-check fa-lg');
                    if($("#sendSms").is(':checked')){
                        var getAPIUrl = $('#apiUrl').val()+ '/api/bulksms?token='+$('#token').val();
                        var data1 = {
                            mobile: data.customer.mobile,
                            message: 'Dear '+data.customer.name+', thank you for shopping with us. Your order id is '+data.result   .orderId+'. Please visit again to shop more. Happy shopping'
                        };
                        $.ajax({
                            url: getAPIUrl,
                            type: 'POST',
                            dataType: "json",
                            data: JSON.stringify(data1),
                            contentType: "application/json; charset=utf-8",
                            success: function(data) {
                                showAlertMessage('successMessage','Order added successfuly.','success','fa-check fa-lg');
                                window.location.replace("/orders");
                            },
                            error: function(data) {
                                showAlertMessage("Something went wrong. Please try again with all the fields.");
                            }
                        });
                    }else{
                        window.location.replace("/orders");
                    }   
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', orderAddForm).change(function () {
        orderAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        orderAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 7000),false);
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null), buildUrl(getAPIUrl(),'items', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 7000));

    $('#orderDate').val(moment().format('DD-MM-YYYY'));

    $("#grossTotal").bind("change paste keyup", function() {
        if($.isNumeric($("#grossTotal").val()) && $.isNumeric($('#amountPaid').val())){
            $('#amountPaid').val($("#grossTotal").val());
            $('#amountDueDiv').removeClass("hide");
            $('#amountDue').html(parseFloat($('#grossTotal').val()) - parseFloat($('#amountPaid').val()));
        }
    });
    $("#amountPaid").bind("change paste keyup", function() {
        if($.isNumeric($("#grossTotal").val()) && $.isNumeric($('#amountPaid').val())){
            $('#amountDueDiv').removeClass("hide");
            $('#amountDue').html(parseFloat($('#grossTotal').val()) - parseFloat($('#amountPaid').val()));
        }
    });
});
$().ready(function() {
    var orderData = null;

    //{"address":"jp nagar","country":"India","email":"ashutosh@zinetgo.com","landmark":"govt high school","mobile":"9886681566","name":"Ashu","pinCode":"560078"}

    var updateDetails = function(){

        /*$("#cDiv").append(
            '<div class="table-responsive">'+
                '<table class="table table-hover table-bordered table-striped">'+
                    '<thead>'+
                        '<tr>'+

                            '<th> Product </th>'+
                            '<th> Item Status </th>'+
                            '<th> Original Price </th>'+
                            '<th> Price </th>'+
                            '<th> Quantity </th>'+
                            '<th> Tax Amount </th>'+
                            '<th> Tax Percent </th>'+
                            '<th> Discount Amount </th>'+
                            '<th> Total </th>'+
                        '</tr>'+
                    '</thead>'+
                    '<tbody id="cData"></tbody>'+
                '</table>'+
            '</div>'
        );*/
        $('#displayOrderNo').html(orderData.orderId);
        $('#oId').html(orderData.orderId);
        $('#oDate').html(new Date(orderData.orderDate).toISOString().slice(0, 10));
        $('#displayDate').html(new Date(orderData.orderDate).toISOString().slice(0, 10));
        $('#displayCustomer').html(orderData.customer.name);
        $('#displayCustomerEmail').html(orderData.customer.email);
        $('#displayCustomerMobile').html(orderData.customer.mobile);
        $('#displayGrossTotal').html(orderData.grossTotal);
        $('#paid').html(orderData.amountPaid);
        $('#due').html(orderData.grossTotal-orderData.amountPaid);
        $('#paid1').html(orderData.amountPaid);
        $('#due1').html(orderData.grossTotal-orderData.amountPaid);
        $('#displayStatus').html(orderData.orderStatus);
        $('#displayAddress').html(orderData.deliveryAddress);
        $('#displayMobile').html(orderData.mobile);

        $('#netTotal').html(orderData.netTotal);
        $('#deliveryCharge').html(orderData.deliveryCharge);
        $('#grossTotal').html(orderData.grossTotal);
        $('#netTotal1').html(orderData.netTotal);
        $('#deliveryCharge1').html(orderData.deliveryCharge);
        $('#grossTotal1').html(orderData.grossTotal);
        $('#billName').html(orderData.billingAddress.name);
        $('#billaddress').html(orderData.billingAddress.address);
        $('#billCountry').html(orderData.billingAddress.country);
        $('#billEmail').html(orderData.billingAddress.email);
        $('#billLandmark').html(orderData.billingAddress.landmark);
        $('#billMobile').html(orderData.billingAddress.mobile);
        $('#billPin').html(orderData.billingAddress.pinCode);

        $('#shipName').html(orderData.shippingAddress.name);
        $('#shipaddress').html(orderData.shippingAddress.address);
        $('#shipCountry').html(orderData.shippingAddress.country);
        $('#shipEmail').html(orderData.shippingAddress.email);
        $('#shipLandmark').html(orderData.shippingAddress.landmark);
        $('#shipMobile').html(orderData.shippingAddress.mobile);
        $('#shipPin').html(orderData.shippingAddress.pinCode);

        $('.billName').html(orderData.billingAddress.name);
        $('.billaddress').html(orderData.billingAddress.address);
        $('.billCountry').html(orderData.billingAddress.country);
        $('.billEmail').html(orderData.billingAddress.email);
        $('.billLandmark').html(orderData.billingAddress.landmark);
        $('.billMobile').html(orderData.billingAddress.mobile);
        $('.billPin').html(orderData.billingAddress.pinCode);

        $('.shipName').html(orderData.shippingAddress.name);
        $('.shipaddress').html(orderData.shippingAddress.address);
        $('.shipCountry').html(orderData.shippingAddress.country);
        $('.shipEmail').html(orderData.shippingAddress.email);
        $('.shipLandmark').html(orderData.shippingAddress.landmark);
        $('.shipMobile').html(orderData.shippingAddress.mobile);
        $('.shipPin').html(orderData.shippingAddress.pinCode);

        
        $('#paymentType').html(orderData.paymentMode ? orderData.paymentMode : '');
        

        Object.keys(orderData.cart.items).forEach(function(key, index) {
            // key: the name of the object key
            // index: the ordinal position of the key within the object
            var product = orderData.cart.items[key];
            $('#cData').append(
                '<tr>'+
                    '<td>'+
                        '<a href="javascript:;">'+ product.item.name+'</a>'+
                    '</td>'+
                    '<td>'+
                        '<span class="label label-sm label-success"> Available </td>'+
                    '<td>'+ product.item.price+ '</td>'+
                    '<td>'+product.item.discountedPrice+'</td>'+
                    '<td>'+product.qty +'</td>'+
                    '<td>0</td>'+
                    '<td>0</td>'+
                    '<td>0</td>'+
                    '<td>'+product.price+'</td>'+
                '</tr>'
             );
            $('.cData').append(
                '<tr>'+
                    '<td>'+
                         (index+1)+
                    '</td>'+
                    '<td>'+
                        '<a href="javascript:;">'+ product.item.name+'</a>'+
                    '</td>'+
                    '<td>'+product.item.discountedPrice+'</td>'+
                    '<td>'+product.qty +'</td>'+
                    '<td>'+product.price+'</td>'+
                '</tr>'
             );
        }); 
        if(orderData.paymentMode && orderData.paymentMode ==='COD')  {
            $('#paid').html('0');
            $('#due').html(orderData.grossTotal);

        }else{
            $('#paid').html(orderData.grossTotal);
            $('#due').html('0');
        }
    };
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                orderData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
         //populate edit form data
        $('#orderDate').val(new Date(orderData.orderDate).toISOString().slice(0, 10));
        $('#customerId').val(orderData.customerId);
        $('#itemId').val(orderData.itemId);
        $('#grossTotal').val(orderData.grossTotal);
        $('#amountPaid').val(orderData.amountPaid);
        $('#deliveryAddress').val(orderData.deliveryAddress);
        $('#orderStatus').val(orderData.orderStatus);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){

        swal({
            title: "Are you sure to delete this?",
            text: "You will not be able to recover this item once deleted!",
            type: "info",
            showCancelButton: true,
            closeOnConfirm: false,
            showLoaderOnConfirm: true
        }, function () {
            var url = $('#url').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                        swal("Deleted!", "Item has been deleted successfully.", "success");
                        window.location = '/orders';
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });


    var orderAddForm = $('#order_edit_form');
    var orderAddFormErrors = $('.alert-danger', orderAddForm);
    var orderAddFormSuccess = $('.alert-success', orderAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    orderAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    orderAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            orderDate:{
                required: true
            },
            customerId: {
                required: true
            },
            grossTotal: {
                required: true
            },
            amountPaid: {
                required: true
            },
            orderStatus: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(orderAddForm.attr('action'));
            var url = orderAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id: $('#orderId').val(),
                orderDate: getDate($('#orderDate').val()),
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                grossTotal: parseFloat($('#grossTotal').val()),
                amountPaid: parseFloat($('#amountPaid').val()),
                deliveryAddress: $('#deliveryAddress').val(),
                orderStatus: $('#orderStatus').val()
            };
            // data.append('mobile', $('#mobile').val());
            // data.append('name', $('#name').val());
            // data.append('email', $('#email').val());
            // data.append('address', $('#address').val());
            //data.append('profilePic', $('#profilePic').val());

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });
            $.ajax({
                // url: url,
                // type: 'POST',
                // //dataType: "json"
                // cache: false,
                // contentType: false,
                // processData: false,
                // //type: 'POST',
                // data: data,//JSON.stringify(data),
                // //contentType: false,//"application/json; charset=utf-8",
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Order updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/orders");
                    orderData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', orderAddForm).change(function () {
        orderAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        orderAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null), buildUrl(getAPIUrl(),'items', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));

    $('#orderDate').val(moment().format('DD-MM-YYYY'));

    $("#grossTotal").bind("change paste keyup", function() {
        if($.isNumeric($("#grossTotal").val()) && $.isNumeric($('#amountPaid').val())){
            $('#amountPaid').val($("#grossTotal").val());
            $('#amountDueDiv').removeClass("hide");
            $('#amountDue').html(parseFloat($('#grossTotal').val()) - parseFloat($('#amountPaid').val()));
        }
    });
    $("#amountPaid").bind("change paste keyup", function() {
        if($.isNumeric($("#grossTotal").val()) && $.isNumeric($('#amountPaid').val())){
            $('#amountDueDiv').removeClass("hide");
            $('#amountDue').html(parseFloat($('#grossTotal').val()) - parseFloat($('#amountPaid').val()));
        }
    });
    var cItems = $("#cartItem").val();

    $(document).on('show.bs.modal','#invoice', function (event) {
        
        $("#download-me").click(function(){
            var printContents = document.getElementById('pdf').innerHTML;
            printContents = '<html><head><link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet"><link href="https://www.zinetgo.com/dist/css/zinetgo.min.css" rel="stylesheet"></head><body>'+ printContents;
            printContents = printContents + '</body></html>';
            window.open().document.write(printContents);
        });
    });

});
$().ready(function() {
    var ordersAddForm = $('#orders_add_form');
    var ordersAddFormErrors = $('.alert-danger', ordersAddForm);
    var ordersAddFormSuccess = $('.alert-success', ordersAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    ordersAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    ordersAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            customerId: {
                required: true
            },
            /*itemId: {
                required: true
            },*/
            orderDate: {
                required: true
            },
            grossTotal: {
                required: true
            },
            orderStatus: {
                required: true
            },
            
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(ordersAddForm.attr('action'));
            var url = ordersAddForm.attr('action');


            var data = {
                customerId: $('#customerId').val(),
                //itemId: $('#itemId').val(),
                deliveryAddress: $('#deliveryAddress').val(),
                orderStatus: $('#orderStatus').val(),
                amountDue: parseInt($('#amountDue').val()),
                orderDate: getDate($('#orderDate').val()),
                description: $('#description').val(),
                grossTotal: parseInt($('#grossTotal').val())
            };


            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','orders added successfuly. You can view the orders details in <a href="/orderss"><i class="icon-basket-loaded"></i> orderss</a>.','success','fa-check fa-lg');
                    window.location.replace("/orders");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', ordersAddForm).change(function () {
        ordersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        ordersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : ordersAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();
                
                populateCustomers(buildUrl(sUrl,'customers', token, '3000'),false, data.customerId);
                populateItems(buildUrl(sUrl,'items', token, '3000'),false, data.itemId);

                addItem(buildUrl(sUrl,'item', token, null), buildUrl(sUrl,'items', token, '3000'));
                addCustomer(buildUrl(sUrl,'customer', token, null),buildUrl(sUrl,'customers', token, '3000'));

                $('.lid').html(data.orderId);
                $('#orderDate').val(moment(new Date(data.orderDate)).format('DD-MM-YYYY'));
                $('#customerId').val(data.customerId);
                $('#itemId').val(data.itemId);
                $('#description').val(data.description);
                $('#grossTotal').val(data.grossTotal);
                $('#amountDue').val(data.amountDue);
                $('#deliveryAddress').val(data.deliveryAddress);
                $('#orderStatus').val(data.orderStatus);
                $("#orderStatus").select2({
                    value: data.orderStatus
                });
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

});

$("#grossTotal").bind("change paste keyup", function() {
    if($.isNumeric($("#grossTotal").val()) && $.isNumeric($('#amountPaid').val())){
        $('#amountPaid').val($("#grossTotal").val());
        $('#amountDueDiv').removeClass("hide"); 
        $('#amountDue').html(parseFloat($('#grossTotal').val()) - parseFloat($('#amountPaid').val()));
    }
});
$("#amountPaid").bind("change paste keyup", function() {
    if($.isNumeric($("#grossTotal").val()) && $.isNumeric($('#amountPaid').val())){
        $('#amountDueDiv').removeClass("hide");
        $('#amountDue').html(parseFloat($('#grossTotal').val()) - parseFloat($('#amountPaid').val()));
    }
});

var filterOrderData = function(url, fromDate, toDate, customerId){
    //delete the table
    $("#orders").remove();
    $("#orders_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="orders">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#orders .checkboxes" /> </th>'+
                    '<th> Order ID </th>'+
                    '<th> Date </th>'+
                    '<th> Customer </th>'+
                    '<th> Mobile </th>'+
                    '<th> Amount </th>'+
                    //'<th> Amount Paid </th>'+
                    //'<th> Amount Due </th>'+
                    '<th> Status </th>'+
                    //'<th> Address </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(customerId != null && customerId != -1){
        url = url + '&customerId=' + customerId;
    }

    getOrderData(url);
};

var goToOrderDetail = function(orderId){
    window.location = '/orders/' + orderId;
};

var getOrderData = function(url){
    // App.blockUI({
    //     target: '#orders_portlet',
    //     animate: true
    // });

    // window.setTimeout(function() {
    //     App.unblockUI('#orders_portlet');
    // }, 500);
    App.blockUI();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToOrderDetail("'+row.id +'")> ' + (row.orderId != undefined ? row.orderId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToOrderDetail("'+row.id +'")> ' + (row.orderDate != undefined ? new Date(row.orderDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td class="clickable" onclick=goToOrderDetail("'+row.id +'")> ' + (row.customer != undefined ? (row.customer.name? row.customer.name : '') : '') + ' </td>' +
                            '<td class="clickable" onclick=goToOrderDetail("'+row.id +'")> ' + (row.customer != undefined ? (row.customer.mobile? row.customer.mobile : '') : '') + ' </td>' +
                            '<td> ' + (row.grossTotal != undefined ? row.grossTotal: '') + ' </td>' +
                            //'<td> ' + (row.amountPaid != undefined ? row.amountPaid: '') + ' </td>' +
                            //'<td> ' + (row.amountDue != undefined ? row.amountDue: '0') + ' </td>' +
                            '<td> ' + formatOrderStatus(row.orderStatus)+ ' </td>' +
                            //'<td> ' + (row.deliveryAddress != undefined ? row.deliveryAddress: '') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#orders');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#orders_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    //App.unblockUI('#orders_portlet');
    App.unblockUI();
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/order/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/orders';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});


$('.filter-btn').on('click', function(){
    $('.table-filters').toggleClass("hide");
    $("#customerId").select2({allowClear: false});
});

getOrderData(buildUrl(getAPIUrl(),'orders', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    // var str = $('#reportrange span').html();
    // var dates = str.split(" - ");
    // var fromDate = moment(dates[0], "MMMM D, YYYY");
    // var toDate = moment(dates[1], "MMMM D, YYYY");

    var fromDate = toDate = null;
    event.preventDefault();

    filterOrderData(
        buildUrl(getAPIUrl(),'orders', getToken(), 3000),
        fromDate, toDate,
        $('#customerId').val()
    );

});

initDateRange(buildUrl(getAPIUrl(),'orders', getToken(), 3000));
populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000), true);
$().ready(function() {
    var employeeAddForm = $('#submit_form');
    var employeeAddFormErrors = $('.alert-danger', employeeAddForm);
    var employeeAddFormSuccess = $('.alert-success', employeeAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    employeeAddForm.on('button-submit').click(function () {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    employeeAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            // name: {
            //     required: true
            // },
            // email: {
            //     required: true
            // },
            // type: {
            //     required: true
            // },
            // mobile: {
            //     required: true,
            //     number: true,
            //     maxlength:10,
            //     minlength: 10
            // }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(employeeAddForm.attr('action'));
            var url = employeeAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                mobile: $('#mobile').val(),
                mobile1: $('#emobile').val(),
                email: $('#email').val(),
                gender: $('#gender').val(),
                address: $('#address').val(),
                departmentId: $('#departmentId').val(),
                designationId: $('#designationId').val(),
                role: $('#role').val(),
                startDate: getDate($('#startDate').val()),,
                endDate: getDate($('#endDate').val()),,
                employmentType: $('#employmentType').val(),
                branchName: $('#card_branchName').val(),
                accountNumber: $('#card_acnumber').val(),
                ifsc: $('#card_ifsc').val(),
                pan: $('#card_pan').val()
            };
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Employee added successfuly. You can view the employee details in <a href="/employees"><i class="icon-users"></i> Employees</a>.','success','fa-check fa-lg');
                    window.location.replace("/employees");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
            alert('data'+data);
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', employeeAddForm).change(function () {
        employeeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        bankEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var employeesAddForm = $('#employees_add_form');
    var employeesAddFormErrors = $('.alert-danger', employeesAddForm);
    var employeesAddFormSuccess = $('.alert-success', employeesAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the employees details in <a href="/wa/employees"><i class="fa fa-cubes"></i> employees</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/employees/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayId').html(data.empId);
                $('#displayName1').html(data.name);
                $('#displayName').html(data.name);
                $('#displayMobile').html(data.mobile);
                $('#displayEmail').html(data.email);
                $('#displayStartDate').html(date = new Date(data.startDate).toISOString().slice(0,10));
                $('#displayDesignation').html(data.designation.name);
                $('#displayDepartment').html(data.department.name);
                $('#displayEmploymentType').html(data.employmentType);
                // let date = new Date();
                //     date = date.toISOString().slice(0,10);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterEmployeesListData = function(url, fromDate, toDate, customerId, type){
    //delete the table
    $("#employees_list").remove();
    $("#employees_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="employees_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#employees_list .checkboxes" /> </th>'+
                        '<th> Code </th>'+
                        '<th> Name </th>'+
                        '<th> Mobile </th>'+
                        '<th> Joining Date </th>'+
                        '<th> Department </th>'+
                        '<th> Designation </th>'+
                        '<th> Job Type </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    if(customerId != null && customerId!= -1){
        url = url + '&customerId=' + customerId;
    }
    if(modeType != null && modeType!= -1){
        url = url + '&modeType=' + modeType;
    }
    getEmployeesListData(url);
};

var goToEmployeeDetail = function(employeeId){
    window.location = '/employees/' + employeeId;
};

var getEmployeesListData = function(url){
    App.blockUI({
        target: '#employees_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#employees_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToEmployeeDetail("'+row.id +'")> ' + (row.empId != undefined ? row.empId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployeeDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployeeDetail("'+row.id +'")> ' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td> ' + (row.startDate != undefined ? new Date(row.startDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.department != undefined ? row.department.name : '') + ' </td>' +
                            '<td> ' + (row.designation != undefined ? row.designation.name: '') + ' </td>' +
                            '<td> ' + (row.employmentType != undefined ? row.employmentType: '') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#employees_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#employees_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#employees_portlet');
};

$('.btn-delete').on('click',function(event){
    var ids = new Array();

    $('.checkboxes:checked').each(function(){
      ids.push($(this).attr('data-id'));//this is the checked checkbox
    });

    var idText = ids.toString();
    var url = $('#apiUrl').val()+ '/api/employee?token='+$('#token').val() + '&ids=' + idText ;
   
    $.ajax({
        url: url,
        type: 'DELETE',
        success: function(data) {
            if (data && data.status) {
                //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                window.location = '/employees';
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

});
$().ready(function() {
    var leavesAddForm = $('#leaves_add_form');
    var leavesAddFormErrors = $('.alert-danger', leavesAddForm);
    var leavesAddFormSuccess = $('.alert-success', leavesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    leavesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    leavesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            
            employeeId: {
                required: true
            },
            leaveTypeId: {
                required: true
            },
            fromDate: {
                required: true
            },
            toDate: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(leavesAddForm.attr('action'));
            var url = leavesAddForm.attr('action');

            var data = {
                
                employeeId: $('#employeeId').val(),
                leaveTypeId: $('#leaveTypeId').val(),
                fromDate: $('#fromDate').val(),
                toDate: $('#toDate').val(),
                description: $('#description').val()
            };
            
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Inspection added successfuly. You can view the leaves details in <a href="/leaves"><i class="icon-emoticon-smile"></i> leaves</a>.','success','fa-check fa-lg');
                    window.location.replace("/leaves");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', leavesAddForm).change(function () {
        leavesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        leavesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterLeavesData = function(url){
    //delete the table
    $("#leaves").remove();
    $("#leaves_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="leaves">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#leaves .checkboxes" /> </th>'+
                    '<th> Employee </th>'+
                    '<th> Leave Type </th>'+
                    '<th> From Date </th>'+
                    '<th> To Date </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getLeavesData(url);
};

var getLeavesData = function(url){
    App.blockUI({
        target: '#leaves_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#leaves_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.employee != undefined ? row.employee.name: '') + ' </td>' +
                            '<td> ' + (row.leaveType != undefined ? row.leaveType.name: '') + ' </td>' +
                            '<td> ' + (row.fromDate != undefined ? new Date(row.fromDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.toDate != undefined ? new Date(row.toDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#leaves');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#leaves_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#leaves_portlet');
};
$().ready(function() {
    var categoryAddForm = $('#category_add_form');
    var categoryAddFormErrors = $('.alert-danger', categoryAddForm);
    var categoryAddFormSuccess = $('.alert-success', categoryAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    categoryAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    categoryAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            categoryName: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (category, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = categoryAddForm.attr('action');
            
            var data = new FormData();
            jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                data.append('fileToUpload', file);
            });
            data.append('name',$('#categoryName').val());
            data.append('parentId',$('#itemCategoryId').val());
            data.append('picture',$('#fileToUpload').val());
            data.append('description',$('#description').val());
            

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                //dataType: "json",
                //data:itemAddForm.serialize(),
                //cache:false,
                //data: JSON.stringify(data),
                //contentType: "application/json; charset=utf-8",
                //contentType: false,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false,   // tell jQuery not to set contentType

                success: function(data) {
                    showAlertMessage('successMessage','Item added successfuly. You can view the item details in <a href="/items"><i class="icon-layers"></i> Items</a>.','success','fa-check fa-lg');
                    window.location.replace("/categories");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });


            

            // $.ajax({
            //     url: url,
            //     type: 'POST',
            //     dataType: "json",
            //     data: JSON.stringify(data),
            //     contentType: "application/json; charset=utf-8",
            //     success: function(data) {
            //         showAlertMessage('successMessage','Product added successfuly. You can view the category details in <a href="/categorys/catalog"><i class="fa fa-cubes"></i> category</a>.','success','fa-check fa-lg');
            //         window.location.replace("/categorys/catalog");
            //     },
            //     error: function(data) {
            //         showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            //     }
            // });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', categoryAddForm).change(function () {
        categoryAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        categoryAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateItemCategory(buildUrl(getAPIUrl(),'categories', getToken(), 3000),false, true);
});

$().ready(function() {
    var catData = null;

    var updateDetails = function(){
        
        $('#displayCategoryName').html(catData.category.name);
        //$('#displayCategory').html(catData.category.category.name);
        $('#displayPicture').html(catData.category.picture);
        $('#displayDescription').html(catData.category.description);

        $('#coverImage').attr('src', catData.category.coverImage);
        
    };
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                catData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
         //populate edit form data
        $('#productName').val(catData.category.name);
        $('#picture').val(catData.picture);
        $('#description').val(catData.category.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/categories';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var categoryAddForm = $('#product_edit_form');
    var productAddFormErrors = $('.alert-danger', categoryAddForm);
    var productAddFormSuccess = $('.alert-success', categoryAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    categoryAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    categoryAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            productName: {
                required: true
            },
            brandName: {
                required: true
            },
            price: {
                required: true
            },
            salesPackage: {
                required: true
            },
            sku: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(categoryAddForm.attr('action'));
            var url = categoryAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {   
                id: $('#categoryId').val(),
                name: $('#categoryName').val(),
                picture: $('#picture').val() !== '' ? $('#picture').val() : null,
                description: $('#description').val() !== '' ? $('#description').val() : null
            };
            
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Product updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/categories");
                    catData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', categoryAddForm).change(function () {
        categoryAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        categoryAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var productsAddForm = $('#category_edit_form');
    var productsAddFormErrors = $('.alert-danger', productsAddForm);
    var productsAddFormSuccess = $('.alert-success', productsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    productsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    productsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            categoryName: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(productsAddForm.attr('action'));
            var url = productsAddForm.attr('action');
            var data = {
                name: $('#categoryName').val(),
                description: $('#description').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','products added successfuly. You can view the products details in <a href="/productss"><i class="icon-basket-loaded"></i> productss</a>.','success','fa-check fa-lg');
                    window.location.replace("/categories");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', productsAddForm).change(function () {
        productsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        productsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : productsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();

                $('#categoryName').val(data.category.name);
                $('#description').val(data.category.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


});
var filtercategoryData = function(url){
    //delete the table
    $("#category").remove();
    $("#category_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="category">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#category .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Parent Id </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    getcategoryData(url);
};

var goToCategoryDetail = function(categoryId){
    window.location = '/category/' + categoryId;
};

var getcategoryData = function(url){
    // App.blockUI({
    //     target: '#category_portlet',
    //     animate: true
    // });

    // window.setTimeout(function() {
    //     App.unblockUI('#category_portlet');
    // }, 500);
    App.blockUI();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToCategoryDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#category');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#category_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    //App.unblockUI('#category_portlet');
    App.unblockUI();
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/category/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/categories';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });

});

getcategoryData(buildUrl(getAPIUrl(),'categories', getToken(), 3000));
var filterproductData = function(url){
    //delete the table
    $("#shoppe").remove();
    $("#shoppe_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="shoppe">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#shoppe .checkboxes" /> </th>'+
                    '<th> Product Name </th>'+
                    '<th> Variation </th>'+
                    '<th> Price </th>'+
                    '<th> Quantity </th>'+
                    '<th> Unit </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getproductData(url);
};

var goToProductDetail = function(productId){
    window.location = '/products/catalog/' + productId;
};

var getproductData = function(url){
    App.blockUI({
        target: '#shoppe_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#shoppe_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];

                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td> ' + (row.product.name != undefined ? row.product.name: '') + ' </td>' +
                            '<td>' + (row.displayName != undefined ? row.displayName : '') + ' </td>' +
                            '<td> ' + (row.price != undefined ? row.price : '') + '</td>' +
                            '<td> ' + (row.quantity != undefined ? row.quantity : '') + '</td>' +
                            '<td> ' + (row.product.unit != undefined ? row.product.unit : '') + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#shoppe');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#shoppe_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#shoppe_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/product/variation/'+ $(this).attr('data-id')+'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/products/catalog';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});
getproductData(buildUrl(getAPIUrl(),'product/'+ $('#id').val()+ '/variations', getToken(), 3000));
addVariation(buildUrl(getAPIUrl(),'product/'+ $('#id').val()+ '/variation', getToken(), null),buildUrl(getAPIUrl(),'product/'+ $('#id').val()+ '/variations', getToken(), 3000));


$().ready(function() {
    var productAddForm = $('#product_add_form');
    var productAddFormErrors = $('.alert-danger', productAddForm);
    var productAddFormSuccess = $('.alert-success', productAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    productAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    productAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            itemCategoryId: {
                required: true
            },
            productName: {
                required: true
            },
            price: {
                required: true
            },
            sku: {
                required: true
            },
            unit: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (product, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = productAddForm.attr('action');
            
            var data = new FormData();
            jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                data.append('fileToUpload', file);
            });
            data.append('name',$('#productName').val());
            data.append('categoryId',$('#itemCategoryId').val());
            data.append('sku',$('#sku').val());
            data.append('picture',$('#fileToUpload').val());
            data.append('brandName',$('#brandName').val());
            data.append('isFeatured',$('input[name=isFeatured]:checked').val());
            data.append('price',parseInt($('#price').val()));
            data.append('discountedPrice',parseInt($('#discountedPrice').val()));
            data.append('stock',$('#stock').val());
            data.append('description',$('#description').val());
            data.append('unit',$('#unit').val());

           
            if($('#discountedPrice').val() ===undefined || isNaN($('#discountedPrice').val()) || $('#discountedPrice').val() ==null || $('#discountedPrice').val() ==''){
                data.discountedPrice = parseInt($('#price').val());
                
            }

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false,   // tell jQuery not to set contentType

                success: function(data) {
                    showAlertMessage('successMessage','Item added successfuly. You can view the item details in <a href="/items"><i class="icon-layers"></i> Items</a>.','success','fa-check fa-lg');
                    window.location.replace("/products/catalog");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });


            

            // $.ajax({
            //     url: url,
            //     type: 'POST',
            //     dataType: "json",
            //     data: JSON.stringify(data),
            //     contentType: "application/json; charset=utf-8",
            //     success: function(data) {
            //         showAlertMessage('successMessage','Product added successfuly. You can view the product details in <a href="/products/catalog"><i class="fa fa-cubes"></i> product</a>.','success','fa-check fa-lg');
            //         window.location.replace("/products/catalog");
            //     },
            //     error: function(data) {
            //         showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            //     }
            // });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', productAddForm).change(function () {
        productAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        productAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateItemCategory(buildUrl(getAPIUrl(),'categories', getToken(), 3000));
    addItemCategory(buildUrl(getAPIUrl(),'category', getToken(), null),buildUrl(getAPIUrl(),'categories', getToken(), 3000));
});

$().ready(function() {
    var prodData = null;

    var updateDetails = function(){
     //alert(JSON.stringify(prodData));
        $('#displayProductName').html(prodData.product.name);
        $('#pId').val(prodData.product.id);
        $('#displaySku').html(prodData.product.sku);
        $('#displayBrandName').html(prodData.product.brandName);
        if(prodData.product.category){
        $('#displayCategory').html(prodData.product.category.name);
        }
        //$('#displayColor').html(prodData.product.color);
        $('#displayUnit').html(prodData.product.unit || '');
        $('#displayPrice').html(prodData.product.price);
        $('#displaySalesPackage').html(prodData.product.discountedPrice);
        $('#displayPicture').html(prodData.product.picture);
        $('#displayDescription').html(prodData.product.description);
        $('#displayIsFeatured').html(prodData.product.isFeatured == true ? 'Yes':'No');
        $('#displayStock').html(prodData.product.stock);
        $('#coverImage').attr('src', prodData.product.coverImage);

        $('#piu').attr('href','/products/catalog/'+ prodData.product.id + '/images');
        var oldhref= $('#pVar').attr('href');

        $('#pVar').attr('href',oldhref+ '?id='+ prodData.product.id + '&unit=' + prodData.product.unit);
        
        if(prodData.product.productInventory && prodData.product.productInventory.length >0){
            for(var i=0; i < prodData.product.productInventory.length; i++){
                $('#cData').append(
                    '<tr>'+

                        '<td>'+(prodData.product.productInventory[i].empObj != undefined ? prodData.product.productInventory[i].empObj.name : '')+'</td>'+
                        '<td class="text-center">'+ (prodData.product.productInventory[i].empObj != undefined ? prodData.product.productInventory[i].empObj.mobile : '')+ '</td>'+
                        '<td class="text-center">'+prodData.product.productInventory[i].quantity+'</td>'+
                    '</tr>'
                );
            }
        }
        $('#ihs').html(prodData.product.inHouseStock);
        $('#es').html(prodData.product.employeeStock);
        $('#ts').html(prodData.product.stock);

        
        if(prodData.product.inventorylog && prodData.product.inventorylog.length >0){
            for(var i=0; i < prodData.product.inventorylog.length; i++){
                $('#iData').append(
                    '<tr>'+
                        '<td>'+moment(new Date(prodData.product.inventorylog[i].createdOn)).format("MMMM-Do-YYYY,h:mm:ss a")+'</td>'+
                        '<td class="text-center">'+ prodData.product.inventorylog[i].quantity+ '</td>'+
                        '<td class="text-center">'+prodData.product.inventorylog[i].comment+'</td>'+
                        '<td class="text-center">'+prodData.product.inventorylog[i].inhouse+'</td>'+
                        '<td class="text-center">'+prodData.product.inventorylog[i].emp+'</td>'+
                    '</tr>'
                );
            }
        }
        if(prodData.product.media){
             for (i = 0; i < prodData.product.media.length; i++) {
                var row = prodData.product.media[i];
                if(row.coverImage){
                    $('#images').append(
                        '<div class="col-lg-3 col-md-3 col-sm-6 col-xs-12" style="min-height:200px;">'+
                            '<div class="mt-element-overlay">'+
                                '<div class="row">'+
                                    '<div class="col-md-12">'+
                                        '<div class="mt-overlay-6">'+
                                            '<img src="'+ row.coverImage+'"/>'+
                                            '<div class="mt-overlay">'+
                                                '<h2>'+ row.name +'</h2>'+
                                                '<p>'+
                                                    '<a class="mt-info uppercase btn red default btn-outline" href="#">Delete</a>'+
                                                '</p>'+
                                            '</div>'+
                                        '</div>'+
                                    '</div>'+
                                '</div>'+
                            '</div>'+
                        '</div>'
                    );
                }
                
            }
        }
    };
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                prodData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        var url = $('#apiUrl').val()+'/api/product/'+$('#pId').val()+'?token='+$('#token').val();
        $.ajax({
            url: url,
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/products/catalog';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var productAddForm = $('#product_edit_form');
    var productAddFormErrors = $('.alert-danger', productAddForm);
    var productAddFormSuccess = $('.alert-success', productAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    productAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    productAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            productName: {
                required: true
            },
            brandName: {
                required: true
            },
            price: {
                required: true
            },
            salesPackage: {
                required: true
            },
            sku: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(productAddForm.attr('action'));
            var url = productAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {   
                id: $('#productId').val(),
                name: $('#productName').val(),
                sku: $('#sku').val() !== '' ? $('#sku').val() : null,
                picture: $('#picture').val() !== '' ? $('#picture').val() : null,
                brandName: $('#brandName').val() !== '' ? $('#brandName').val() : null,
                categoryType: $('#categoryType').val() !== '' ? $('#categoryType').val() : null,
                color: $('#color').val() !== '' ? $('#color').val() : null,
                price: $('#price').val() !== '' ? $('#price').val() : null,
                salesPackage: parseInt($('#salesPackage').val()),
                description: $('#description').val() !== '' ? $('#description').val() : null
            };
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', productAddForm).change(function () {
        productAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        productAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
    $('.select2me', productAddForm).change(function () {
        productAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        productAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});

$('#assignInvent').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+ $('#productId').val()+'/inventory?token='+  $('#token').val();
    var data = {
        productId: $('#productId').val(),
        quantity: parseInt($('#mQuantity').val()),
        employeeId: $('#employeeId').val()
    };
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/products/catalog';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});

$('#addStock').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+$('#prdId').val()+'?token='+  $('#token').val();
    var data = {
        updatedStock: parseInt($('#sQuantity').val())
    };
    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Inventory updated");
            location.reload(); 
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});



$(document).on('show.bs.modal','#assignProModal', function () {
  var data = null;
  var productId = $('#pId').val();
    data = {
            productId: productId
        };
    $('#productId').val(productId); 
  populateEmployees(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false, data.empid);
  $("#employeeId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});

$(document).on('show.bs.modal','#assignStockModal', function () {
  var data = null;
  var productId = $('#productId').val();
    data = {
            productId: productId
        };
    $('#prdId').val(productId); 
  
});
    
$().ready(function() {
    var productsAddForm = $('#products_add_form');
    var productsAddFormErrors = $('.alert-danger', productsAddForm);
    var productsAddFormSuccess = $('.alert-success', productsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    productsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    productsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            productName: {
                required: true
            },
            sku: {
                required: true
            },
            categoryId: {
                required: true
            },
            brandName: {
                required: true
            },
            price: {
                required: true
            },
            stock:{
                required: true
            },
            unit:{
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(productsAddForm.attr('action'));
            var url = productsAddForm.attr('action');

            var data = new FormData();
            jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                data.append('fileToUpload', file);
            });
            data.append('name',$('#productName').val());
            data.append('categoryId',$('#categoryId').val());
            data.append('sku',$('#sku').val());
            data.append('picture',$('#fileToUpload').val());
            data.append('brandName',$('#brandName').val());
            //data.append('isFeatured',$('input[name=isFeatured]:checked').val());
            data.append('price',parseInt($('#price').val()));
            //data.append('discountedPrice',parseInt($('#discountedPrice').val()));
            data.append('stock',$('#stock').val());
            data.append('description',$('#description').val());
            data.append('unit',$('#unit').val());

            $.ajax({
                url: url,
                type: 'PUT',
                data: data,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false, 
                success: function(data) {
                    //showAlertMessage('successMessage','products added successfuly. You can view the products details in <a href="/productss"><i class="icon-basket-loaded"></i> productss</a>.','success','fa-check fa-lg');
                    window.location.replace("/products/catalog");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', productsAddForm).change(function () {
        productsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        productsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : productsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();
                populateCategories(buildUrl(sUrl,'categories', token, '3000'),false, data.product.categoryId);
                
                addCategory(buildUrl(sUrl,'category', token, null),buildUrl(sUrl,'categories', token, '3000'));

                $('.lid').html(data.product.name);
                $('#categoryId').val(data.product.categoryId);
                $('#brandName').val(data.product.brandName);
                $('#productName').val(data.product.name);
                $('#description').val(data.product.description);
                $('#price').val(data.product.price);
                $('#salesPackage').val(data.product.discountedPrice);
                $('#stock').val(data.product.stock);
                $('#sku').val(data.product.sku);
                $('#unit').select2({
                    value: data.product.unit
                });
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


});
var filterproductData = function(url){
    //delete the table
    $("#shoppe").remove();
    $("#shoppe_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="shoppe">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#activities .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Activity Type </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getproductData(url);
};

var goToActivityDetail = function(productId){
    window.location = '/products/catalog/' + productId;
};

var getproductData = function(url){
    App.blockUI({
        target: '#shoppe_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#shoppe_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                   if(parseInt($('#inv').val()) >-1) {
                        $('#tableData').append(
                            '<tr class="odd gradeX">'+
                                '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +
                                '" data-uname="'+ (row.uName != undefined ? row.uName: '')+'" /></td>' +
                                '<td class="clickable" onclick=goToActivityDetail("'+row.uName +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                                '<td class="clickable" onclick=goToActivityDetail("'+row.uName +'")> ' + (row.brandName != undefined ? row.brandName : '') + ' </td>' +
                                '<td> ' + (row.category != undefined ? row.category.name : '') + '</td>' +
                                '<td> ' + (row.price != undefined ? row.price : '') + '</td>' +
                                '<td> ' + (row.stock != undefined ? row.stock : '0') + ' </td>' +
                                '<td> ' + (row.inHouseStock != undefined ? row.inHouseStock : '0') + ' </td>' +
                                '<td> ' + (row.employeeStock != undefined ? row.employeeStock : '0') + ' </td>' +
                            '</tr>'
                        );
                    } else {
                        $('#tableData').append(
                            '<tr class="odd gradeX">'+
                                '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                                '<td class="clickable" onclick=goToActivityDetail("'+row.uName +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                                '<td class="clickable" onclick=goToActivityDetail("'+row.uName +'")> ' + (row.brandName != undefined ? row.brandName : '') + ' </td>' +
                                '<td> ' + (row.category != undefined ? row.category.name : '') + '</td>' +
                                '<td> ' + (row.price != undefined ? row.price : '') + '</td>' +
                                '<td> ' + (row.stock != undefined ? row.stock : '0') + ' </td>' +
                            '</tr>'
                        );
                    }
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });


                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                        if(parseInt($('#inv').val()) >-1 && $('.checkboxes:checked').length === 1){
                            $('.btn-stock').removeClass('hidden');
                            $('.btn-product').removeClass('hidden');
                        }
                    }else{
                        $('.btn-delete').addClass('hidden');
                        $('.btn-product').addClass('hidden');
                        $('.btn-stock').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#shoppe');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#shoppe_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#shoppe_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/product/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/products/catalog';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});


$(document).on('show.bs.modal','#assignProModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        var productId = $(this).data('id');
        data = {
            id: $(this).data('id')
        };
    });
$('#productId').val(data.id);
  populateEmployees(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false, data.empid);
  $("#employeeId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});


$(document).on('show.bs.modal','#assignStockModal', function () {
  $('.checkboxes:checked').each(function(){
        var productId = $(this).data('uname');
        $('#prdId').val(productId);
    });
});


$('#addStock').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+$('#prdId').val()+'?token='+  $('#token').val();
    var data = {
        updatedStock: parseInt($('#sQuantity').val())
    };
    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Inventory updated");
            window.location = '/products/catalog';
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});


$('#assignInvent').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+ $('#productId').val()+'/inventory?token='+  $('#token').val();
    var data = {
        productId: $('#productId').val(),
        quantity: parseInt($('#mQuantity').val()),
        employeeId: $('#employeeId').val()
    };

    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/products/catalog';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});



getproductData(buildUrl(getAPIUrl(),'products', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    // var fromDate = moment(dates[0], "MMMM D, YYYY");
    // var toDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();
    initDateRange(null);

    // filterCustomerData(buildUrl(getAPIUrl(),'inspections', getToken(), 3000), $('#name').val(), $('#mobile').val());

});


var filterPostsData = function(url){
    //delete the table
    $("#contacts").remove();
    $("#posts_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="posts">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#posts .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Title </th>'+
                    '<th> Category </th>'+
                    '<th> Status </th>'+
                    '<th> Author </th>'+
                    '<th> Tags </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getPostsData(url);
};


var goToContacts = function(postsId){
    window.location = '/admin/contacts/' + contactsId;
};

var getContactsData = function(url){
    App.blockUI({
        target: '#contacts_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#contacts_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    //var shortContent = row.content.substring(0,200);
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.createdOn != undefined ? (new Date(row.createdOn).toISOString().slice(0, 10)) : '') + ' </td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + ' </td>' +
                            '<td> ' + (row.email != undefined ? row.email: '') + ' </td>' +
                            '<td> ' + (row.mobile != undefined ? row.mobile : '') + ' </td>' +
                            '<td> ' + (row.message != undefined ? row.message : '') + ' </td>' +
                        '</tr>'
                    );
                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#contacts');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#contacts_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#contacts_portlet');
};
$().ready(function() {
    var supportAddForm = $('#support_add_form');
    var supportAddFormErrors = $('.alert-danger', supportAddForm);
    var supportAddFormSuccess = $('.alert-success', supportAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    supportAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    supportAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            title: {
                required: true 
            },
            type: {
                required: true
            },
            priority: {
                required: true
            }
        },


        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(supportAddForm.attr('action'));
            var url = supportAddForm.attr('action');
            var data = {
                title: $('#title').val(),
                type: $('#type').val(),
                name: $('#customerName').val(),
                mobile: $('#mobile').val(),
                email: $('#email').val(),
                dueDate: $('#dueDate').val(),
                employeeId: $('#employeeId').val(),
                customerId: $('#customerId').val(),
               
                itemId: $('#itemId').val(),
                serviceName: $('#serviceName').val(),
                iStatus: $('#status').val(),
                priority: $('#priority').val(),
                picture: $('#picture').val(),
                description: $('#description').val(),

            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Support added successfuly. You can view the support details in <a href="/support"><i class="fa fa-support"></i> Support</a>.','success','fa-check fa-lg');
                    window.location.replace("/support/tickets");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', supportAddForm).change(function () {
        supportAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        supportAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    addEmployee(buildUrl(getAPIUrl(),'employee', getToken(), null),buildUrl(getAPIUrl(),'employees', getToken(), 3000));
    populateEmployees(buildUrl(getAPIUrl(),'employees', getToken(), 3000),false);
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);

    addItem(buildUrl(getAPIUrl(),'item', getToken(), null), buildUrl(getAPIUrl(),'items', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
});
$().ready(function() {
    var ticketsAddForm = $('#tickets_add_form');
    var ticketsAddFormErrors = $('.alert-danger', ticketsAddForm);
    var ticketsAddFormSuccess = $('.alert-success', ticketsAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            // showAlertMessage('successMessage','Event added successfuly. You can view the leads details in <a href="/wa/leads"><i class="fa fa-cubes"></i> leads</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/leads/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#dueDate').html(data.dueDate);
               // $('#bookingdate').html(moment(new Date(data.createdOn)).format("DD-MMM-YYYY"));
                $('#tokenId').html(data.tokenId);
                $('#title').html(data.title);
                $('#displayCustomerName').html(data.customer.name);
                $('#displayCustomerEmail').html(data.customer.email);
                $('#displayCustomerMobile').html(data.customer.mobile);
                $('#displayEmployeeName').html(data.employee.name);
                $('#displayEmployeeEmail').html(data.employee.email);
                $('#displayEmployeeMobile').html(data.employee.mobile);
                $('#priority').html(data.priority);
                $('#description').html(data.description);
                $('#displayServiceName').html(data.item.name);
                $('#displayServiceUnit').html(data.item.unit);
                $('#displayServicePrice').html(data.item.price);
                $('#type').html(data.type);
                $('#sStatus').html(data.iStatus);
                $('.lid').html(data.leadId); 
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('.btn-delete').on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/support/tickets';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });
});
$().ready(function() {
    var ticketsAddForm = $('#tickets_add_form');
    var ticketsAddFormErrors = $('.alert-danger', ticketsAddForm);
    var ticketsAddFormSuccess = $('.alert-success', ticketsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    ticketsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    ticketsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            title: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(ordersAddForm.attr('action'));
            var url = ticketsAddForm.attr('action');
            var data = {
                id: $('#tokenId').val(),
                title: $('#title').val(),
                customerId: $('#customerId').val(),
                dueDate: $('#dueDate').val(),
                employeeId: $('#employeeId').val(),
                type: $('#type').val(),
                itemId: $('#itemId').val(),
                priority: $('#priority').val(),
                istatus: $('#istatus').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                   // alert('save');
                    //showAlertMessage('successMessage','orders added successfuly. You can view the orders details in <a href="/orderss"><i class="icon-basket-loaded"></i> orderss</a>.','success','fa-check fa-lg');
                    window.location.replace("/support/tickets");
                },
                error: function(data) {
                                      //  alert('errors');

                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', ticketsAddForm).change(function () {
        ticketsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    


    $.ajax({
       // url: $('#url').val(),
        url : ticketsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            if (data) {
                //alert(JSON.stringify(data));
                $('.lid').html(data.tokenId);
                $('#title').val(data.title);
                $('#customerId').val(data.customerId);
                $('#dueDate').val(data.dueDate);
                $('#employeeId').val(data.employeeId);
                $('#type').val(data.type);
                $('#itemId').val(data.itemId);
                $('#priority').val(data.priority);
                $('#istatus').val(data.status);
                $('#description').val(data.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    addEmployee(buildUrl(getAPIUrl(),'employee', getToken(), null),buildUrl(getAPIUrl(),'employees', getToken(), 3000));
    populateEmployees(buildUrl(getAPIUrl(),'employees', getToken(), 3000),false);
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);

    addItem(buildUrl(getAPIUrl(),'item', getToken(), null), buildUrl(getAPIUrl(),'items', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
});
var filterSupportListData = function(url, startDate, endDate, employeeId){
    //delete the table
    $("#support_list").remove();
    $("#support_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="support_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#support_list .checkboxes" /> </th>'+
                        '<th> Ticket Id </th>'+
                        '<th> Title </th>'+
                        '<th> Customer Name </th>'+
                        '<th> Service Name </th>'+
                        '<th> Due Date </th>'+
                        '<th> Assign To </th>'+
                        '<th> Priority </th>'+
                        '<th> Status </th>'+

                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    url = url + '&startDate=' + startDate.format('YYYY-MM-DD') + '&endDate=' + endDate.format('YYYY-MM-DD');
    if(employeeId != null && employeeId!= -1){
        url = url + '&employeeId=' + employeeId;
    }
    getSupportListData(url);
};
var goToSupports = function(tokenId){
    window.location = '/support/ticket/' + tokenId;
};
var getSupportListData = function(url){
    App.blockUI({
        target: '#support_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#support_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
           // alert(JSON.stringify(data));
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id+ '" /></td>' +
                            //'<td><input type="checkbox" class="checkboxes" value="1" /></td>' + 'data-id="'+row.id+
                            '<td> ' + (row.tokenId != undefined ? row.tokenId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToSupports("'+row.id +'")>' + (row.title != undefined ? row.title: '') + ' </td>' +
                            '<td> ' + (row.customer != undefined ? row.customer.name: '') + ' </td>' +
                            '<td> ' + (row.item != undefined ? row.item.name: '') + ' </td>' +
                            '<td> ' + (row.dueDate != undefined ? row.dueDate: '') + ' </td>' +
                            '<td> ' + (row.employee != undefined ? row.employee.name: '') + ' </td>' +
                            '<td> ' + (row.priority != undefined ? row.priority: '') + ' </td>' +
                            '<td> ' + (row.iStatus != undefined ? row.iStatus: '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                        if($('.checkboxes:checked').length >= 1){
                            $('.btn-delete').removeClass('hidden');
                            $('.btn-assign-ticket').removeClass('hidden');
                            $('.btn-close-ticket').removeClass('hidden');
                            $('.btn-send-sms').removeClass('hidden');
                           // $('.btn-cancel').removeClass('hidden');
                            $('#smsMobile').val(number);
                            $('#smsMessage').val(msg);
                            var msg = $(this).data('service') + '\n' + $(this).data('name') + '\n' + $(this).data('mobile')  + '\n' + $(this).data('jdate') +'\n' + $(this).data('address')+'\n' + $(this).data('price');
                            var number = parseInt($(this).data('empid'));
                            
                        }else{
                            $('.btn-delete').addClass('hidden');
                            $('.btn-send-sms').addClass('hidden');
                            $('.btn-cancel').addClass('hidden');
                            $('.btn-assign-ticket').addClass('hidden');
                            $('.btn-close-ticket').addClass('hidden')
                        }
                    });
                }

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length === 1){
                        $('.btn-close-ticket').removeClass('hidden');
                        $('.btn-assign-ticket').removeClass('hidden');
                        if($(this).data('status') === 'OPEN'){
                            $('.btn-assign-ticket').removeClass('hidden');
                        }
                    }else{
                       // $('.btn-edit').addClass('hidden');
                        $('.btn-confirm').addClass('hidden');
                         $('.btn-inventory').addClass('hidden');
                    }      

                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#support_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#support_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#support_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/support/issuse/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/support/tickets';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

$('.btn-close-ticket').on('click',function(event){
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        var url = $('#apiUrl').val()+ '/api/support/issuse/'+ $(this).attr('data-id') +'?token='+$('#token').val();
        var data = {
            iStatus: 'closed'
        };

        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                if (data && data.result) {
                   i++;
                    if(i == count){
                        window.location = '/support/tickets';
                    }
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

});

$('#assignTicket').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/support/issuse/'+ $('#tokenId').val()+'?token='+ $('#token').val();
    var data = {
        employeeId: $('#employeeId').val()
    };

    //alert(JSON.stringify(data));

    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Ticket assigned successfully");
            window.location = '/support/tickets';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});


$(document).on('show.bs.modal','#assignTicketModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        //var tokenId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            //productId: $(this).data('productId'),
            //employeeId:$(this).data('eid')
        };
    });

  $('#tokenId').val(data.id);
  //alert($('#tokenId').val());
  populateEmployees(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false, data.empid);
  $("#employeeId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});

$(".btn-send-sms").on('click', function(event) {
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
       // var leadId = $(this).data('id');
        var data = {
            mobile: $(this).data('empid'),
            message: $(this).data('service') 
            + '\nCustomer: ' + $(this).data('name') 
            + '\nMobile: ' + $(this).data('mobile')  
            + '\nDate: ' + $(this).data('jdate') 
            + '\nAddress: ' + $(this).data('address')
            + '\nPrice: ' + $(this).data('price')
        };
        var url = $('#apiUrl').val()+ '/api/bulksms?token='+$('#token').val();
    
        if(data && data.mobile){
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    if(i++ === count){
                        toastr.options.closeButton = true;
                        toastr.success("Your message submitted successfully.");
                    }
                },
                error: function(data) {
                    if(i++ === count){
                        toastr.options.closeButton = true;
                        toastr.error("Something went wrong. Please try again with all the fields.");
                    }
                }
            });
            event.preventDefault();
        }else{
            toastr.error("No employee assigned to the Ticket "+ ticketId);
        }
    });
    
});
getSupportListData(buildUrl(getAPIUrl(),'support/tickets', getToken(), 3000));
     $('#dueDate').val(moment().format('DD-MM-YYYY'));
$().ready(function() {
    
    var taskAddForm = $('#task_add_form');
    var taskAddFormErrors = $('.alert-danger', taskAddForm);
    var taskAddFormSuccess = $('.alert-success', taskAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    taskAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    taskAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            employeeId:{
                required:true
            },
            dueDate: {
                required: true
            },
            importance: {
                required: true
            },
            urgency: {
                required: true
            },
            tStatus: {
                required: true
            }
        },


        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(taskAddForm.attr('action'));
            var url = taskAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                taskCategoryId: $('#taskCategoryId').val(),
                employeeId: $('#employeeId').val(),
                startDate: $('#startDate').val(),
                dueDate: $('#dueDate').val(),
                tStatus: $('#tStatus').val(),
                importance: $('#importance').val(),
                urgency: $('#urgency').val(),
                description: $('#description').val(),

            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Task added successfuly. You can view the task details in <a href="/tasks"><i class="icon-users"></i> Tasks</a>.','success','fa-check fa-lg');
                    window.location.replace("/tasks");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', taskAddForm).change(function () {
        taskAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        taskAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    populateEmployees(buildUrl(getAPIUrl(),'employees',getToken(), 3000),false);
    populateTaskCategory(buildUrl(getAPIUrl(),'task/categories',getToken(), 3000),false);
    addEmployee(buildUrl(getAPIUrl(),'employee',getToken(), null), buildUrl(getAPIUrl(),'employees',getToken(), 3000));
    addTaskCategory(buildUrl(getAPIUrl(),'task/category',getToken(), null),buildUrl(getAPIUrl(),'task/categories',getToken(), 3000));
});
$().ready(function() {
    var taskData = null;

    var updateDetails = function(){

        $('#displayName').html(taskData.task.name);
        $('#displayCategory').html(taskData.task.category != undefined ? taskData.task.category.name:'');
        if(taskData.task.employee){
            $('#displayAssignTo').html(taskData.task.employee.name);
        }
        $('#displayStartDate').html(taskData.task != undefined ? moment(new Date(taskData.task.startDate)).format("DD MMMM YYYY - HH:mm"):'');
        $('#displayDueDate').html(taskData.task != undefined ? moment(new Date(taskData.task.dueDate)).format("DD MMMM YYYY - HH:mm"):'');
        $('#displayImportance').html(taskData.task.importance);
        $('#displayUrgency').html(taskData.task.urgency);
        $('#displayStatus').html(taskData.task.tStatus);
        $('#displayDescription').html(taskData.task.description);
    };
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                taskData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
         //populate edit form data
        $('#name').val(taskData.task.name);
        $('#taskCategoryId').val(taskData.task.taskCategoryId);
        $('#employeeId').val(taskData.task.employeeId);

        $('#displayStartDate').val(taskData.task != undefined ? moment(taskData.task.startDate).format("DD MMMM YYYY - HH:mm"):'');
        $('#displayDueDate').val(taskData.task != undefined ? moment(taskData.task.dueDate).format("DD MMMM YYYY - HH:mm"):'');
        $('#tStatus').val(taskData.task.tStatus);
        $('#importance').val(taskData.task.importance);
        $('#urgency').val(taskData.task.urgency);
        $('#description').val(taskData.task.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/tasks';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var taskAddForm = $('#task_edit_form');
    var taskAddFormErrors = $('.alert-danger', taskAddForm);
    var taskAddFormSuccess = $('.alert-success', taskAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    taskAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    taskAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            taskCategoryId:{
                required:true
            },
            employeeId:{
                required:true
            },
            dueDate: {
                required: true
            },
            importance: {
                required: true
            },
            urgency: {
                required: true
            },
            tStatus: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(taskAddForm.attr('action'));
            var url = taskAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });
            var data = {
                id: $('#taskId').val(),
                name: $('#name').val(),
                taskCategoryId: $('#taskCategoryId').val() !== '' ? $('#taskCategoryId').val() : null,
                employeeId: $('#employeeId').val() !== '' ? $('#employeeId').val() : null,
                startDate: getDateTime($('#startDate').val()),
                dueDate: getDateTime($('#dueDate').val()),
                tStatus: $('#tStatus').val() !== '' ? $('#tStatus').val() : null,
                importance: $('#importance').val() !== '' ? $('#importance').val() : null,
                urgency: $('#urgency').val() !== '' ? $('#urgency').val() : null,
                description: $('#description').val() !== '' ? $('#description').val() : null
            };
            // data.append('mobile', $('#mobile').val());
            // data.append('name', $('#name').val());
            // data.append('email', $('#email').val());
            // data.append('address', $('#address').val());
            //data.append('profilePic', $('#profilePic').val());

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });
            $.ajax({
                // url: url,
                // type: 'POST',
                // //dataType: "json"
                // cache: false,
                // contentType: false,
                // processData: false,
                // //type: 'POST',
                // data: data,//JSON.stringify(data),
                // //contentType: false,//"application/json; charset=utf-8",
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Task updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/tasks");
                    taskData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', taskAddForm).change(function () {
        taskAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        taskAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
	
    var tasksAddForm = $('#tasks_add_form');
    var tasksAddFormErrors = $('.alert-danger', tasksAddForm);
    var tasksAddFormSuccess = $('.alert-success', tasksAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    tasksAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    tasksAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules:  {
            name: {
                required: true
            },
            taskCategoryId:{
                required:true
            },
            employeeId:{
                required:true
            },
            dueDate: {
                required: true
            },
            importance: {
                required: true
            },
            urgency: {
                required: true
            },
            tStatus: {
                required: true
            }
        },


     

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(tasksAddForm.attr('action'));
            var url = tasksAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                taskCategoryId: $('#taskCategoryId').val(),
                employeeId: $('#employeeId').val(),
                startDate: $('#startDate').val(),
                dueDate: $('#dueDate').val(),
                tStatus: $('#tStatus').val(),
                importance: $('#importance').val(),
                urgency: $('#urgency').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','tasks added successfuly. You can view the tasks details in <a href="/taskss"><i class="icon-basket-loaded"></i> taskss</a>.','success','fa-check fa-lg');
                    window.location.replace("/tasks");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', tasksAddForm).change(function () {
        tasksAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        tasksAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : tasksAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {

                var token = getToken();
                var sUrl = getAPIUrl();
                populateEmployees(buildUrl(sUrl,'employees', token, 200),false);
				addEmployee(buildUrl(sUrl,'employee', token, null),buildUrl(sUrl,'employees', token, 200));
				populateTaskCategory(buildUrl(sUrl,'task/categories', token, 200),false);
				addTaskCategory(buildUrl(sUrl,'task/category', token, null),buildUrl(sUrl,'task/categories', token, 200));   
				$('.tid').html(data.task.taskId);
				$('#name').val(data.task.name),
				$('#taskCategoryId').val(data.task.taskCategoryId),
                $('#employeeId').val(data.task.employeeId),
                $('#startDate').val(data.task.startDate != undefined ? moment(data.task.startDate).format("YYYY-MM-DD HH:mm"):''),
                $('#dueDate').val(data.task.dueDate != undefined ? moment(data.task.dueDate).format("YYYY-MM-DD HH:mm"):''),
                $('#tStatus').val( data.task.tStatus),
                $('#importance').val(data.task.importance ),
                $('#urgency').val(data.task.urgency),
                $('#description').val(data.task.description),

				$("#taskStatus").select2({
				value: data.taskStatus
				});
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

});
var filterTaskData = function(url, startDate, endDate, employeeId){
    //delete the table
    $("#tasks_list").remove();
    $("#tasks_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="tasks_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#tasks_list .checkboxes" /> </th>'+
                        '<th> Name </th>'+
                        '<th> Category </th>'+
                        '<th> Start Date </th>'+
                        '<th> Due Date </th>'+
                        '<th> Assign To </th>'+
                        '<th> Description </th>'+
                        '<th> Status </th>'+

                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    url = url + '&startDate=' + startDate.format('YYYY-MM-DD') + '&endDate=' + endDate.format('YYYY-MM-DD');
    if(employeeId != null && employeeId!= -1){
        url = url + '&employeeId=' + employeeId;
    }
    getTaskData(url);
};

var goToTaskDetail = function(taskId){
    window.location = '/tasks/' + taskId;
};

var getTaskData = function(url){
    App.blockUI({
        target: '#tasks_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#tasks_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>'+ 
                            '<td class="clickable" onclick=goToTaskDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToTaskDetail("'+row.id +'")> ' + (row.category != undefined ? row.category.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToTaskDetail("'+row.id +'")> ' + (row.startDate != undefined ? moment(new Date(row.startDate)).format("DD MMMM YYYY - HH:mm") : '') + ' </td>' +
                            '<td> ' + (row.dueDate != undefined ?  moment(new Date(row.dueDate)).format("DD MMMM YYYY - HH:mm") : '') + ' </td>' +
                            '<td> ' + (row.employee != undefined ? row.employee.name : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                            '<td> ' + formatStatus (row.tStatus) + ' </td>' +
                        '</tr>'
                    );
                    
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#tasks_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#tasks_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#tasks_portlet');
};


$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = getAPIUrl()+ '/api/task/'+ $(this).attr('data-id') +'?token='+getToken();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/tasks';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

getTaskData(buildUrl(getAPIUrl(),'tasks', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    var startDate = moment(dates[0], "MMMM D, YYYY");
    var dueDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();

    filterTaskData(buildUrl(getAPIUrl(),'tasks', getToken(), 3000), startDate, dueDate, $('#employeeId').val());
});

initDateRange(null);

$().ready(function() {
    var testimonyAddForm = $('#testimony_add_form');
    var testimonyAddFormErrors = $('.alert-danger', testimonyAddForm);
    var testimonyAddFormSuccess = $('.alert-success', testimonyAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    testimonyAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // } 
    }) 
    testimonyAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            
            mobile: {
                required: true   
            },
            rating: {
            	required:true,
                number: true
            },
            serviceId: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = testimonyAddForm.attr('action');
            var data = {
            	name: $('#name').val(),
                mobile: $('#mobile').val(),
                serviceId: $('#serviceId').val(),
                ratings: $('#rating').val(),
                message: $('#message').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Testimony added successfuly.');
                     window.location.replace("/testimonies");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }
    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', testimonyAddForm).change(function () {
        testimonyAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        testimonyAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var testimonyEditForm = $('#testimony_edit_form');
    var testimonyEditFormErrors = $('.alert-danger', testimonyEditForm);
    var testimonyEditFormSuccess = $('.alert-success', testimonyEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    testimonyEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    testimonyEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            ratings: {
                required: true
            },
            status:{
                required: true
            },
            message:{
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = testimonyEditForm.attr('action');
            var data = {
                id: $('#testimonyId').val(),
                name: $('#name').val(),
                ratings: $('#ratings').val(),
                status: $('#status').val(),
                message: $('#message').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    toastr.options.closeButton = true;
                    toastr.clear();
                    toastr.success('Testimony Updated successfuly.'); 
                    showAlertMessage('successMessage','Testimony Updated successfuly.');
                    window.location.replace("/testimonies");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', testimonyEditForm).change(function () {
        testimonyEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        testimonyEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : testimonyEditForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();
                $('#name').val(data.data.name);
                $('#sName').val(data.data.items.name);
                $('#ratings').val(data.data.ratings);
                $('#message').val(data.data.message);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

 //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        testimonyEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterJobsData = function(url){
    //delete the table

    $("#jobs").remove();
    $("#jobs_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="jobs">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#jobs .checkboxes" /> </th>'+
                    '<th> Job Title </th>'+
                    '<th> Experience </th>'+
                    '<th> Openings </th>'+ 
                    '<th> Updated On </th>'+
                    '<th> Last Date </th>'+  
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>' 
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getJobsData(url);
};

var goToTestimonyDetail = function(testimonyId){
    window.location =  '/testimony/edit/' + testimonyId;
};

var getTestimonyData = function(url){
    App.blockUI({
        target: '#testimony_portlet',
        animate: true
    });
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToTestimonyDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToTestimonyDetail("'+row.id +'")> ' + (row.mobile != undefined ? row.mobile : '') + ' </td>' +
                            '<td class="clickable" onclick=goToTestimonyDetail("'+row.id +'")> ' + (row.items != undefined ? row.items.name : '') + '</td>' +
                            '<td class="clickable" onclick=goToTestimonyDetail("'+row.id +'")> ' + (row.ratings != undefined ? row.ratings : '') + '</td>' +
                            '<td class="clickable" onclick=goToTestimonyDetail("'+row.id +'")> ' + (row.status != undefined ? row.status : '') + '</td>' +
                            '<td class="clickable" onclick=goToTestimonyDetail("'+row.id +'")> ' + (row.message != undefined ? row.message : '') + '</td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                        $('.btn-active').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                        $('.btn-active').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#testimony');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#jobs_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#testimony_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/testimony/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Testimonies has been deleted successfully.", "success");
                            window.location = '/testimonies';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

$('.btn-active').on('click',function(event){
    swal({
        title: "Are you sure to active this?",
        text: "You can deactivate this in edit",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/testimony/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            var data = {
                status: 'active'
            };
            $.ajax({
                url: url,
                type: 'PUT',
                data: JSON.stringify(data),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Active!", "Testimonies has been active successfully.", "success");
                            window.location = '/testimonies';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
});

$('.filter-btn').on('click', function(){
    $('.table-filters').toggleClass("hide");});
//     $("#customerId").select2({allowClear: false});
// });

getTestimonyData(buildUrl(getAPIUrl(),'testimonies', getToken(), 3000));



$().ready(function() {
    var authorsAddForm = $('#authors_add_form');
    var authorsAddFormErrors = $('.alert-danger', authorsAddForm);
    var authorsAddFormSuccess = $('.alert-success', authorsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    authorsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    authorsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            authorName: {
                required: true
            },
            authorMobile: {
                required: true,
                number: true
            },
            authorEmail: {
            	required:true,
            	email:true
            },
            password: {
                minlength: 5,
                required: true
            },
            rpassword: {
                minlength: 5,
                required: true,
                equalTo: "#password"
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = authorsAddForm.attr('action');
            var data = {
            	blogUserType: $('#type').val(),
                name: $('#authorName').val(),
                mobile: $('#authorMobile').val(),
                email: $('#authorEmail').val(),
                password: $('#password').val(),
                address: $('#authorAddress').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Author added successfuly. You can view the authors details in <a href="/admin/users/authors"><i class="fa fa-layers"></i> authors</a>.','success','fa-check fa-lg');
                     window.location.replace("/admin/users");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', authorsAddForm).change(function () {
        authorsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        authorsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});

$().ready(function() {
    var authorsData = null;

    var updateDetails = function(){   

        $('#displayName').html(authorsData.result.name);
        $('#displayMobile').html(authorsData.result.mobile);
        $('#displayEmail').html(authorsData.result.email);
        $('#displayType').html(authorsData.result.blogUserType);
        $('#displayAddress').html(authorsData.result.address);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                authorsData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/admin/users';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });
});
$().ready(function() {
    var usersAddForm = $('#users_add_form');
    var usersAddFormErrors = $('.alert-danger', usersAddForm);
    var usersAddFormSuccess = $('.alert-success', usersAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    usersAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    usersAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            mobile: {
                required: true
            },
            name: {
                required: true
            },
            pwd: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(usersAddForm.attr('action'));
            var url = usersAddForm.attr('action');
            var data = {
                mobile: $('#mobile').val(),
                name: $('#name').val(),
                email: $('#email').val(),
                blogUserType: $('#type').val(),
                address: $('#address').val(),
                password: $('#pwd').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','User updated successfuly.','success','fa-check fa-lg');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', usersAddForm).change(function () {
        usersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        usersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : usersAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = getToken();
                var sUrl = getAPIUrl();
                $('.lid').html(data.result.name);
                $('#mobile').val(data.result.mobile);
                $('#name').val(data.result.name);
                $('#email').val(data.result.email);
                $('#address').val(data.result.address);
                $('#pwd').val(data.result.password);
                $("#type").select2({
                    value: data.result.blogUserType
                });
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

});
var filterAuthorsData = function(url){
    //delete the table
    $("#authors").remove();
    $("#authors_wrapper").remove();
    //recreate the table
    $("#aDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="authors">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#authors .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Mobile </th>'+
                    '<th> Email </th>'+
                    '<th> user type </th>'+
                    '<th> Address </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getAuthorsData(url);
};

var goToAuthor = function(authorId){
    window.location = '/admin/users/' + authorId;
};

var getAuthorsData = function(url){
    App.blockUI({
        target: '#authors_portlet',
        animate: true
    });


    window.setTimeout(function() {
        App.unblockUI('#authors_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td class="clickable" onclick=goToAuthor("'+row.id +'")> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.mobile != undefined ? row.mobile : '') + ' </td>' +
                            '<td> ' + (row.email != undefined ? row.email : '') + ' </td>' +
                            '<td> ' + (row.blogUserType != undefined ? row.blogUserType : '') + ' </td>' +
                            '<td> ' + (row.address != undefined ? row.address: '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#authors');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#authors_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#authors_portlet');
};

getAuthorsData(buildUrl(getAPIUrl(),'users',getToken(), 2000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    
    event.preventDefault();

});

initDateRange(null);
var filterVendorsListData = function(url, fromDate, toDate, customerId, type){
    //delete the table
    $("#vendors_list").remove();
    $("#vendors_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="vendors_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#vendors_list .checkboxes" /> </th>'+
                    '<th> Mobile </th>'+
                    '<th> Name </th>'+
                    '<th> Email </th>'+
                    '<th> Address </th>'+
                    '<th> Status </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    
    getVendorsListData(url);
};

var goToVendors = function(vendorId){
    window.location = '/admin/vendors/' + vendorId;
};


var getVendorsListData = function(url){
    App.blockUI({
        target: '#vendors_portlet',
        animate: true
    });


    window.setTimeout(function() {
        App.unblockUI('#vendors_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+ // onclick=goToVendors("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id+'" /></td>' +
                            '<td class="clickable" onclick=goToVendors("'+row.portfolio.uName +'")>' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td class="clickable" onclick=goToVendors("'+row.portfolio.uName +'")>' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToVendors("'+row.portfolio.uName +'")>' + (row.email != undefined ? row.email : '') + ' </td>' +
                            '<td class="clickable" onclick=goToVendors("'+row.portfolio.uName +'")>' + (row.org.address != undefined ? row.org.address : '') + ' </td>' +
                            '<td class="clickable" onclick=goToVendors("'+row.portfolio.uName +'")>' + (row.status != undefined ? row.status : '') + ' </td>'  +
                        '</tr>'
                    );
                    // $("#tableData > tr").hover(function() {
                    //     $(this).css('cursor','pointer');
                    // }, function() {
                    //     $(this).css('cursor','auto');
                    // });

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                    $('.checkboxes').change(function() {
                        if($('.checkboxes:checked').length >= 1){
                            if($('#status').val()==='active'){
                                $('.btn-deactivate').removeClass('hidden');
                            }else{
                                $('.btn-activate').removeClass('hidden');
                            }
                        }else{
                            $('.btn-deactivate').addClass('hidden');                            
                            $('.btn-deactivate').addClass('hidden');
                        }
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#vendors_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#vendors_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#vendors_portlet');
};

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
    });

    getVendorsListData(buildUrl(getAPIUrl(),'vendors-list', getToken(), 2000,$('#status').val()));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterVendorsListData(
            buildUrl(getAPIUrl(),'vendors-list', getToken(), 2000,$('#status').val()), 
            fromDate, toDate
        );

    });

    initDateRange(buildUrl(getAPIUrl(),'vendors-list', getToken(), 2000,$('#status').val()));
});
$('.btn-activate').on('click',function(event){
    
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        //ids.push($(this).attr('data-id'));//this is the checked checkbox
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/userProfile/'+ $(this).attr('data-id') +'?token='+getToken();
        var data = {
            status: 'active'
        };
        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                if (data && data.result) {
                   i++;
                    if(i == count){
                        swal("Deactivated!", "Vendor has been deactivated.", "success");
                        window.location = '/admin/vendors?status='+$('#status').val();
                    }
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
});

$('.btn-deactivate').on('click',function(event){
    
    var i=0, count = $('.checkboxes:checked').length;
    $('.checkboxes:checked').each(function(){
        //ids.push($(this).attr('data-id'));//this is the checked checkbox
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/userProfile/'+ $(this).attr('data-id') +'?token='+getToken();
        var data = {
            status: 'inactive'
        };
        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                if (data && data.result) {
                   i++;
                    if(i == count){
                        swal("Deactivated!", "Vendor has been deactivated.", "success");
                        window.location = '/admin/vendors?'+$('#status').val();
                    }
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
});

$().ready(function() {
	$('#updateRole').on('click',function(event) {
		var rol = {
			roles:['admin']
		};
		$('input:checkbox.roles').each(function () {
	       if(this.checked){
	       		rol.roles.push($(this).val());
	       }
	  	});
	  	var url1 = $('#apiUrl').val() + '/api/userProfile/'+$('#pId').val()+'?token=' + $('#token').val();
	  	$.ajax({
            url: url1,
            type: 'PUT',
            dataType: "json",
            data: JSON.stringify(rol),
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                //showAlertMessage('successMessage','leads added successfuly. You can view the leads details in <a href="/leadss"><i class="icon-basket-loaded"></i> leadss</a>.','success','fa-check fa-lg');
                window.location.replace("/admin/vendors/"+$('#uname').val()+"/roles");
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
	  	//alert(JSON.stringify(roles));
	});
	var url = $('#apiUrl').val() + '/api/portfolio/roles/'+$('#uname').val()+'?token=' + $('#token').val();

	$.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data && data.roles) {
              var rol = data.roles;
              $('#pId').val(data.id || '');
              if(rol.indexOf('job-mgmt')>-1){
              	$('#lead').prop('checked', true);
              }
              if(rol.indexOf('order-mgmt')>-1){
              	$('#order').prop('checked', true);
              }
              if(rol.indexOf('product')>-1){
              	$('#product').prop('checked', true);
              }
              if(rol.indexOf('support-tickets')>-1){
              	$('#support').prop('checked', true);
              }
              if(rol.indexOf('blog')>-1){
              	$('#blog').prop('checked', true);
              }
              if(rol.indexOf('inventory')>-1){
              	$('#inventory').prop('checked', true);
              }
              if(rol.indexOf('aggregator')>-1){
              	$('#aggregator').prop('checked', true);
              }
              if(rol.indexOf('marketing.coupon')>-1){
              	$('#coupon').prop('checked', true);
              }
              if(rol.indexOf('testimony')>-1){
              	$('#testimony').prop('checked', true);
              }
              if(rol.indexOf('store-mgmt')>-1){
              	$('#store').prop('checked', true);
              }
              if(rol.indexOf('job-openings')>-1){
              	$('#careers').prop('checked', true);
              }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});
$().ready(function() { 
    var orgAddForm = $('.orgs_add_form');
    var orgAddFormErrors = $('.alert-danger', orgAddForm);
    var orgAddFormSuccess = $('.alert-success', orgAddForm);
   
    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    orgAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    orgAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (product, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = orgAddForm.attr('action');

            var data = {
                vendorType: $('#vendorType').val(),
                leadPercentage: parseInt($('#leadper').val()) || 0,
                address: $('#address').val().trim(),
                email: $('#email').val(),
                website: $('#website').val(),
                tanNumber: $('#tanNumber').val(),
                ServiceTaxNumber: $('#ServiceTaxNumber').val(),
                panNumber: $('#panNumber').val(),
                facebook: $('#facebook').val(),
                twitter: $('#twitter').val(),
                youtube: $('#youtube').val(),
                linkedIn: $('#linkedIn').val()
            };
            $.ajax({
               url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','updated');
                    //window.location.replace("/organisation/detail");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', orgAddForm).change(function () {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
    var purl = $('#apiUrl').val()+'/api/portfolio/'+$('#uname').val()+'?token='+$('#token').val();
    $.ajax({
        url: purl,
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the leads details in <a href="/wa/leads"><i class="fa fa-cubes"></i> leads</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/leads/"+ data.result.id + "/upload-photos");
            if (data && data.portfolio) {
                $('#vName').html(data.portfolio.name);
                $('#orgName').val(data.portfolio.name);
                $('#email').val(data.portfolio.email);
                $('#mobile').val(data.portfolio.mobile);
                $('#website').val(data.portfolio.website);
                $('#address').val(data.portfolio.org.address);
                $('#panNumber').val(data.portfolio.org.panNumber);
                $('#tanNumber').val(data.portfolio.org.tanNumber);
                $('#ServiceTaxNumber').val(data.portfolio.org.ServiceTaxNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#facebook').val(data.portfolio.org.facebook);
                $('#twitter').val(data.portfolio.org.twitter);
                $('#linkedIn').val(data.portfolio.org.linkedIn);
                $('#youtube').val(data.portfolio.org.youtube);
                $('#leadper').val(data.portfolio.org.leadPercentage || 0);
                $("#vendorType").val(data.portfolio.org.vendorType).change();
                /*$("#vendorType").select2({
                    value: data.portfolio.org.vendorType
                });*/
                if(data.portfolio.org.vendorType === 'converstion'){
                    $('#per').removeClass('hidden'); 
                }
                if(data.portfolio.org.coverImage){
                    $("#cover").attr("src",data.portfolio.org.coverImage);
                }
                if(data.portfolio.adhar){
                   $("#adharImage").attr("src",data.portfolio.adhar);
                    $('#adharImage').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.adhar + ' "target="_blank"></a>');
                    });
                }

                if(data.portfolio.pan){
                    $("#pancard").attr("src",data.portfolio.pan);
                    $('#pancard').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.pan + ' "target="_blank"></a>');
                    });
                }
                if(data.portfolio.serviceTax){
                    $("#serviceTaxImg").attr("src",data.portfolio.serviceTax);
                     $('#serviceTaxImg').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.serviceTax + ' "target="_blank"></a>');
                    });
                }
                if(data.portfolio.addressProof){
                    $("#addressp").attr("src",data.portfolio.addressProof);
                    $('#addressp').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.addressProof + ' "target="_blank"></a>');
                    });
                }

                if(data.portfolio.letterheadheader){
                    $("#lath").attr("src",data.portfolio.letterheadheader);
                    $('#lath').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.letterheadheader + ' "target="_blank"></a>');
                    });
                }

                if(data.portfolio.letterheadfooter){
                    $("#lathf").attr("src",data.portfolio.letterheadfooter);
                    $('#lathf').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.letterheadfooter + ' "target="_blank"></a>');
                    });
                }
                /*$('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);*/
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('#adharSubmit').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/adhar/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#adhar')[0].files, function(i, file) {
            data.append('adhar', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/admin/vendors/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#uploadPan').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/pan/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#pan')[0].files, function(i, file) {
            data.append('pan', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/admin/vendors/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#uploadserviceTax').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/serviceTax/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#serviceTax')[0].files, function(i, file) {
            data.append('serviceTax', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/admin/vendors/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#uploadaddress').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/addressProof/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#addressProof')[0].files, function(i, file) {
            data.append('addressProof', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/admin/vendors/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

     $('#letterhb').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/letter-head/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#letterh')[0].files, function(i, file) {
            data.append('letterh', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
    $('#letterhfb').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/letter-footer/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#letterhf')[0].files, function(i, file) {
            data.append('letterhf', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
    $('#vendorType').on('change', function() {
        if($('#vendorType').val() == 'converstion') {
            $('#per').removeClass('hidden'); 
        } else {
            $('#per').addClass('hidden'); 
        } 
    });
}); 
$().ready(function() { 
    var purl = $('#apiUrl').val()+'/api/portfolio/'+$('#uname').val()+'?token='+$('#token').val();
    $.ajax({
        url: purl,
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the leads details in <a href="/wa/leads"><i class="fa fa-cubes"></i> leads</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/leads/"+ data.result.id + "/upload-photos");
            if (data && data.portfolio) {
                $("#tpKey").html(data.portfolio.tpKey);
                $("#papiKey").html(data.portfolio.apiKey);
                $("#portfolioId").html(data.portfolio.id);
                if(data.portfolio.instamojo){
                    $("#authKey").val(data.portfolio.instamojo.authtoken);
                    $("#apiKey").val(data.portfolio.instamojo.apiKey);
                }
                /*$('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);*/
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('#editProduct').on('click', function(event){
        event.preventDefault();
        var url1 = getAPIUrl()+ '/api/portfolio/'+$('#uname').val()+'?token='+$('#token').val();
        var data = {
            instamojo:{
                authtoken: $('#authKey').val(),
                apiKey: $('#apiKey').val()
            }
        };
        $.ajax({
            url: url1,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                showAlertMessage('successMessage','instamojo credentials updated Successfully');

            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
}); 
var filterLeadsListData = function(url, fromDate, toDate, customerId, type){
    //delete the table
    $(".leads_list").remove();
    $(".leads_list_wrapper").remove();
    //recreate the table
    $(".tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column leads_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#leads_list .checkboxes" /> '+
                    '</th>'+
                    '<th> Date </th>'+
                    '<th> Customer </th>'+
                    '<th> Mobile </th>'+
                    '<th> Item </th>'+
                    '<th> Service </th>'+
                    '<th> Job Date </th>'+
                    '<th> Price </th>'+
                    '<th> Address </th>'+
                    '<th> Status </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(customerId != null && customerId != -1){
        url = url + '&customerId=' + customerId;
    }
    
    getLeadsListData(url);
};


var getLeadsListData = function(url){
    App.blockUI({
        target: '#leads_portlet',
        animate: true
    });


    window.setTimeout(function() {
        App.unblockUI('#leads_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" '+ formatLeadRows(row.leadStatus) +'>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" '+
                            'data-id="'+ row.id +'" data-price="'+ (row.price != undefined ? row.price : '') +'" /></td>' +
                            '<td>' + (row.createdOn != undefined ? moment(new Date(row.createdOn)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td>' + (row.leadId != undefined ? row.leadId: '') + ' </td>' +
                            '<td>' + (row.customer != undefined ? row.customer.name: '') + ' </td>' +
                            '<td>' + (row.customer != undefined ? row.customer.mobile: '') + ' </td>' +
                            '<td>' + (row.item != undefined ? row.item.name : '') + ' </td>' +
                            '<td>' + (row.dueDate != undefined ? moment(new Date(row.dueDate)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td>' + (row.price != undefined ? row.price : 0) + ' </td>' +
                            '<td>' + (row.address != undefined ? row.address : '') + ' </td>' +
                            '<td>' + (row.leadStatus != undefined ? formatLeadStatus(row.leadStatus): '') + ' </td>' +
                        '</tr>'
                    );
                    // $("#tableData > tr").hover(function() {
                    //     $(this).css('cursor','pointer');
                    // }, function() {
                    //     $(this).css('cursor','auto');
                    // });

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                    
                }
            }
            if(data.data1){
                for (i = 0; i < data.data1.length; i++) {
                    var row = data.data1[i];
                    $('#tableData1').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" '+ formatLeadRows(row.leadStatus) +'>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td>' + (row.createdOn != undefined ? moment(new Date(row.createdOn)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td>' + (row.leadId != undefined ? row.leadId: '') + ' </td>' +
                            '<td>' + (row.customer != undefined ? row.customer.name: '') + ' </td>' +
                            '<td>' + (row.customer != undefined ? row.customer.mobile: '') + ' </td>' +
                            '<td>' + (row.item != undefined ? row.item.name : '') + ' </td>' +
                            '<td>' + (row.dueDate != undefined ? moment(new Date(row.dueDate)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td>' + (row.price != undefined ? row.price : 0) + ' </td>' +
                            '<td>' + (row.address != undefined ? row.address : '') + ' </td>' +
                            '<td>' + (row.leadStatus != undefined ? formatLeadStatus(row.leadStatus): '') + ' </td>' +
                        '</tr>'
                    );
                    // $("#tableData > tr").hover(function() {
                    //     $(this).css('cursor','pointer');
                    // }, function() {
                    //     $(this).css('cursor','auto');
                    // });

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }

            }
            $('.checkboxes').change(function() {
                if($('.checkboxes:checked').length >= 1){
                    $('.btn-activate').removeClass('hidden');
                }
                else{
                    $('.btn-activate').addClass('hidden');
                } 
            });
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('.leads_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#leads_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#leads_portlet');
};

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
        $("#customerId").select2({allowClear: false});
    });

    getLeadsListData(buildUrl(getAPIUrl(),'vendors/leads', getToken(), 2000,$('#uname').val()));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterLeadsListData(
            buildUrl(getAPIUrl(),'vendors/leads', getToken(), 2000,$('#uname').val()), 
            fromDate, toDate, 
            $('#customerId').val()
        );

    });

    initDateRange(buildUrl(getAPIUrl(),'vendors/leads', getToken(), 2000,$('#uname').val()));
});

$(document).on('show.bs.modal','#leadUpdateModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        //var leadId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            price:$(this).data('price')
        };
    });
  $('#leadId').val(data.id);
  $('#price').val(data.price);
  $('#mPrice').val(data.price);
});


$('#updatelead').on('click',function(event){
    var url = $('#apiUrl').val()+ '/api/lead/'+ $('#leadId').val() +'?token='+$('#token').val();
    var data = {
        leadStatus: $('#leadStatus').val(),
        price: parseInt($('#price').val()) || parseInt($('#mPrice').val())
    };

    $.ajax({
        url: url,
        type: 'PUT',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            if (data && data.result) {
               
                    window.location = '/admin/vendors/'+$('#uname').val()+'/leads';
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});

var filterItemData = function(url, name, mobile){
    //delete the table
    $(".items").remove();
    $(".items_wrapper").remove();
    //recreate the table
    $(".tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column items">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th max-width: 100%;padding-left: 5;padding-right: 5;"> Name </th>'+
                    '<th> Category </th>'+
                    '<th> Type </th>'+
                    '<th> Unit </th>'+
                    '<th> Price </th>'+
                     '<th> Status </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(itemId != null && itemId!= -1){
    //     url = url + '&itemId=' + itemId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getItemData(url);
};


var getItemData = function(url){
    // App.blockUI({
    //     target: '#items_portlet',
    //     animate: true
    // });

    // window.setTimeout(function() {
    //     App.unblockUI('#items_portlet');
    // }, 500);
    App.blockUI();
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td style="max-width: 100%;padding-left: 5;padding-right: 5;">' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.category != undefined ? row.category.name: '') + ' </td>' +
                            '<td> ' + formatItemTypes(row.type) + ' </td>' +
                            '<td> ' + (row.unit != undefined ? row.unit: '') + ' </td>' +
                            '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
                             '<td> ' + (row.status != undefined ? row.status: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
            if (data.data1) {
                for (i = 0; i < data.data1.length; i++) {
                    var row = data.data1[i];
                    $('#tableData1').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td style="max-width: 100%;padding-left: 5;padding-right: 5;">' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.category != undefined ? row.category.name: '') + ' </td>' +
                            '<td> ' + formatItemTypes(row.type) + ' </td>' +
                            '<td> ' + (row.unit != undefined ? row.unit: '') + ' </td>' +
                            '<td> ' + (row.price != undefined ? row.price: '') + ' </td>' +
                             '<td> ' + (row.status != undefined ? row.status: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('.items');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#items_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    //App.unblockUI('#items_portlet');
    App.unblockUI();
};


getItemData(buildUrl(getAPIUrl(),'vendors/items', getToken(), 3000,$('#uname').val()));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    var fromDate = moment(dates[0], "MMMM D, YYYY");
    var toDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();

    filterItemData(buildUrl(getAPIUrl(),'vendors/items', getToken(), 3000,$('#uname').val()), $('#name').val(), $('#mobile').val());
});

initDateRange(null);

$(document).on('show.bs.modal','#addserviceModal', function () {
  //alert('hi');
  var data = null;
  var apiUrl = 'https://api.zinetgo.com/api/items/?apikey=1a5ee5ba-08fe-4597-871a-b497b35b1423&psize=200';
  $.ajax({
        url: apiUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#itemId').html('Select a service');
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#itemId').append('<option value="' + row.id +'"data-name="'+ row.name +'">' + row.name + '</option>');
                }
                $("#itemId").select2({
                  placeholder: "Select a service"
                });
            }
        },
        error: function(data) {
            toastr.options.closeButton = true;
            toastr.error("Something went wrong. Please try again with all the fields.");
        }
    });

});


 $('#addservice').on('click', function(event){
    var data = {
        mpServiceId: $('#itemId').val(),
        description: $('#description').val(),
        name: $('#itemId option:selected').text()
    }
    var url = $('#apiUrl').val()+ '/api/item/'+ $('#uname').val() +'?token='+$('#token').val();
    $.ajax({
        url: url,
        type: 'POST',
        dataType: "json",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            //showAlertMessage('successMessage','leads added successfuly. You can view the leads details in <a href="/leadss"><i class="icon-basket-loaded"></i> leadss</a>.','success','fa-check fa-lg');
            window.location.replace("/admin/vendors/"+$('#uname').val()+"/services");
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
 });

var filterWalletsListData = function(url, fromDate, toDate, customerId, type){
    
    //delete the table
    $("#wallets_list").remove();
    $("#wallets_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="wallets_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th> Date </th>'+
                    '<th> Deposite </th>'+
                    '<th> Widhrwal </th>'+
                    '<th> Before Balance </th>'+
                    '<th> After Balance </th>'+
                    '<th> Remarks </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(customerId != null && customerId != -1){
        url = url + '&customerId=' + customerId;
    }
    
    getWalletsListData(url);
};


var getWalletsListData = function(url){
    App.blockUI({
        target: '#wallets_portlet',
        animate: true
    });
    window.setTimeout(function() {
        App.unblockUI('#wallets_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                if($('#role').val()>0){
                    $('#wbal').html(data.data[0]? data.data[0].portfolio.trunetoWallet: 0);
                }else{
                    $('#wbal').html(data.data[0]? data.data[0].portfolio.wallet: 0);
                }
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr>'+
                            '<td>' + (row.createdOn != undefined ? moment(new Date(row.createdOn)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td class="text-center">' + (row.deposite != undefined ? row.deposite: 0) + ' </td>' +
                            '<td class="text-center">' + (row.withdrawl != undefined ? row.withdrawl:0) + ' </td>' +
                            '<td class="text-center">' + (row.beforeBal != undefined ? row.beforeBal: 0) + ' </td>' +
                            '<td class="text-center">' + (row.afterBal != undefined ? row.afterBal : 0) + ' </td>' +
                            '<td>' + (row.comments != undefined ? row.comments : '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#wallets_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#wallets_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#wallets_portlet');
};

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
        $("#customerId").select2({allowClear: false});
    });

    getWalletsListData(buildUrl(getAPIUrl(),'wallets/'+$('#uname').val(), getToken(), 2000));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterWalletsListData(
            buildUrl(getAPIUrl(),'wallets/'+$('#uname').val(), getToken(), 2000), 
            fromDate, toDate, 
            $('#customerId').val()
        );

    });

    initDateRange(buildUrl(getAPIUrl(),'wallets/'+$('#uname').val(), getToken(), 2000));
});

$(document).on('show.bs.modal','#addwalletModal', function () {
  //alert('hi');
  populateEmployee(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false);
  $("#employeeId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});

$(document).on('show.bs.modal','#refundwalletModal', function () {
  //alert('hi');
  populateEmployee(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false);
  $("#employeesId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});

$(document).on('show.bs.modal','#deductwalletModal', function () {
  //alert('hi');
  populateEmployee(buildUrl($('#apiUrl').val(),'employees', $('#token').val(), '30'),false);
  $("#employeesId").select2({
      placeholder: "Select an employee",
      width: "100%"
  });

});

$('#addMoney').on('click', function(e){
        e.preventDefault();
        var url = $('#apiUrl').val()+'/api/recharge/'+$('#uname').val()+'?token='+$('#token').val();
        if($('#refNo').val() != null && $('#refNo').val() != ''){
            var sc = ' reference no: '+$('#refNo').val()
        }else{
            var sc='';
        }
        var data = {
            amount: $('#amount').val(),
            comments: 'Collected by '+$('#employeeId option:selected').text()+' via '+ $('#type').val()+sc
        };
        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            crossDomain: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function(data) {
                toastr.options.closeButton = true;
                window.location.replace('/admin/vendors/'+$('#uname').val()+'/wallet');
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
});

$('#refundMoney').on('click', function(e){
        e.preventDefault();
        var url = $('#apiUrl').val()+'/api/refund/'+$('#uname').val()+'?token='+$('#token').val();
        if($('#reason').val() != null && $('#reason').val() != ''){
            var sc = ' for : '+$('#reason').val()
        }else{
            var sc='';
        }
        var data = {
            amount: $('#amount1').val(),
            comments: 'Refunded amount'+ $('#amount').val()+' by '+$('#employeeId option:selected').text()+sc
        };
        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            crossDomain: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function(data) {
                toastr.options.closeButton = true;
                window.location.replace('/admin/vendors/'+$('#uname').val()+'/wallet');
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
});

$('#deductMoney').on('click', function(e){
        e.preventDefault();
        var url = $('#apiUrl').val()+'/api/deduct/'+$('#uname').val()+'?token='+$('#token').val();
        if($('#reason1').val() != null && $('#reason1').val() != ''){
            var sc = ' for : '+$('#reason1').val()
        }else{
            var sc='';
        }
        var data = {
            amount: $('#amount2').val(),
            comments: 'Deducted amount'+ $('#amount').val()+' by '+$('#employeeId option:selected').text()+sc
        };
        $.ajax({
            url: url,
            type: 'PUT',
            data: JSON.stringify(data),
            crossDomain: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function(data) {
                toastr.options.closeButton = true;
                window.location.replace('/admin/vendors/'+$('#uname').val()+'/wallet');
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
});
$().ready(function() {
    var activitiesAddForm = $('#activities_add_form');
    var activitiesAddFormErrors = $('.alert-danger', activitiesAddForm);
    var activitiesAddFormSuccess = $('.alert-success', activitiesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    activitiesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    activitiesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            activityTypeId: {
                required: true
            },
            activityName: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (activity, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
                var url = activitiesAddForm.attr('action');
                var data = new FormData();
                

                jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                    data.append('fileToUpload', file);
                });

                data.append('activityTypeId',$('#activityTypeId').val());
                data.append('name',$('#activityName').val());
                data.append('address',$('#eventAddress').val());
                data.append('description',$('#activityDescription').val());

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false,
                success: function(data) {
                    showAlertMessage('successMessage','Activity added successfuly. You can view the activities details in <a href="/wa/activities"><i class="fa fa-cubes"></i> activities</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/activities");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', activitiesAddForm).change(function () {
        activitiesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        activitiesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var activitiesAddForm = $('#activities_add_form');
    var activitiesAddFormErrors = $('.alert-danger', activitiesAddForm);
    var activitiesAddFormSuccess = $('.alert-success', activitiesAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the activities details in <a href="/wa/activities"><i class="fa fa-cubes"></i> activities</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/activities/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayActivityType').html(data.activityType.activityType);
                $('#displayActivityName').html(data.name);
                $('#displayPicture').html(data.picture);
                $('#displayDescription').html(data.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
$().ready(function() {
    var activitiesAddForm = $('#activities_add_form');
    var activitiesAddFormErrors = $('.alert-danger', activitiesAddForm);
    var activitiesAddFormSuccess = $('.alert-success', activitiesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    activitiesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    activitiesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            sku: {
                required: true
            },
            activityTypeId: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(activitiesAddForm.attr('action'));
            var url = activitiesAddForm.attr('action');
            var data = {
                activityTypeId: $('#activityTypeId').val(),
                name: $('#activityName').val(),
                description: $('#description').val(),
                id: $('#activityId').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','activities added successfuly. You can view the activities details in <a href="/activitiess"><i class="icon-basket-loaded"></i> activitiess</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/activities");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', activitiesAddForm).change(function () {
        activitiesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        activitiesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : activitiesAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();
                
                populateActivityType(buildUrl(sUrl,'wa/activityTypes', token, '3000'),false, data.activityTypeId);
                
                addActivityType(buildUrl(sUrl,'wa/activityType', token, null),buildUrl(sUrl,'wa/activityTypes', token, '3000'));

               
                $('.lid').html(data.name);
                $('#activityName').val(data.name);
                $('#activityTypeId').select2({
                    value: data.activityTypeId
                });
                $('#description').val(data.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


});
var filterproductData = function(url){
    //delete the table
    $("#activities").remove();
    $("#activities_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="activities">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#activities .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Activity Type </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getActivitiesData(url);
};

var goToActivityDetail = function(activityId){
    window.location = '/wa/activities/' + activityId;
};

var getActivitiesData = function(url){
    App.blockUI({
        target: '#activities_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#activities_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToActivityDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToActivityDetail("'+row.id +'")> ' + (row.activityType != undefined ? row.activityType.activityType : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + '</td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            //showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#activities');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js).
        // So when dropdowns used the scrollable div should be removed.
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#activities_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#activities_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/wa/activity/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/wa/activities';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});

$().ready(function() {
    var centersAddForm = $('#centers_add_form');
    var centersAddFormErrors = $('.alert-danger', centersAddForm);
    var centersAddFormSuccess = $('.alert-success', centersAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    centersAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    centersAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            centerName: {
                required: true
            },
            centerTypeId: {
                required: true
            },
            location: {
                required: true
            },
            email: {
                email: true,
                required: true
            },
            mobile: {
                number: true,
                maxlength:10,
                minlength: 10,
                required: true
            },
            registeredName: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (center, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = centersAddForm.attr('action');
            var data = {
                name: $('#centerName').val(),
                centerTypeId: $('#centerTypeId').val(),
                centerId: $('#centerId').val(),
                inauguratedBy: $('#inauguratedBy').val(),
                address: $('#address').val(),
                location: $('#location').val(),
                mobile: $('#mobile').val(),
                password: $('#pwd').val(),
                phoneNumber: $('#phoneNumber').val(),
                faxNumber: $('#faxNumber').val(),
                email: $('#email').val(),
                websiteUrl: $('#websiteUrl').val(),
                registeredName: $('#registeredName').val(),
                registrationNumber: $('#registrationNumber').val(),
                inaugurationDate: getDate($('#inaugurationDate').val()),
                //closeDate: getDate($('#closeDate').val()),
                subsidiaryCanteenId: $('#subsidiaryCanteenId').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Center added successfuly. You can view the centers details in <a href="/wa/centers"><i class="fa fa-cubes"></i> centers</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/centers");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', centersAddForm).change(function () {
        centersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        centersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var centersAddForm = $('#centers_add_form');
    var centersAddFormErrors = $('.alert-danger', centersAddForm);
    var centersAddFormSuccess = $('.alert-success', centersAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the centers details in <a href="/wa/centers"><i class="fa fa-cubes"></i> centers</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/centers/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayCenterName').html(data.center.name);
                $('#displayCenterType').html(data.center.centerType);
                $('#displayCenter').html(data.center.center);
                $('#displayInauguratedBy').html(data.center.inauguratedBy);
                $('#displayAddress').html(data.center.address);
                $('#displayLocation').html(data.center.location);
                $('#displayMobile').html(data.center.mobile);
                $('#displayPhoneNumber').html(data.center.phoneNumber);
                $('#displayFaxNumber').html(data.center.faxNumber);
                $('#displayEmail').html(data.center.email);
                $('#displayWebsiteUrl').html(data.center.websiteUrl);
                $('#displayRegisteredName').html(data.center.registeredName);
                $('#displayRegistrationNumber').html(data.center.registrationNumber);
                $('#displayInaugurationDate').html(data.center.inaugurationDate);
                $('#displaySubsidiaryCanteenId').html(data.center.subsidiaryCanteen);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterCentersData = function(url){
    //delete the table
    $("#centers").remove();
    $("#centers_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="centers">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#centers .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Type </th>'+
                    '<th> Parent Center </th>'+
                    '<th> Location </th>'+
                    '<th> Mobile </th>'+
                    '<th> Email </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getCentersData(url);
};

var goToCenter = function(centerId){
    window.location = '/wa/centers/' + centerId;
};

var getCentersData = function(url){
    App.blockUI({
        target: '#centers_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#centers_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToCenter("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + ((row.centerType != undefined && row.centerType.name != undefined)? row.centerType.name : '') + '</td>' +
                            '<td> ' + ((row.center != undefined && row.center.name != undefined)? row.center.name : '') + '</td>' +
                            '<td> ' + (row.location != undefined ? row.location: '') + ' </td>' +
                            '<td> ' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td> ' + (row.email != undefined ? row.email : '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#centers');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#centers_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#centers_portlet');
};
$().ready(function() {
    var committeeAddForm = $('#committee_add_form');
    var committeeAddFormErrors = $('.alert-danger', committeeAddForm);
    var committeeAddFormSuccess = $('.alert-success', committeeAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    committeeAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    committeeAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (activity, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = committeeAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Committee added successfuly. You can view the committee details in <a href="/wa/committee"><i class="fa fa-users"></i> committee</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/committee");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', committeeAddForm).change(function () {
        committeeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        committeeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var CommitteeAddForm = $('#Committee_add_form');
    var CommitteeAddFormErrors = $('.alert-danger', CommitteeAddForm);
    var CommitteeAddFormSuccess = $('.alert-success', CommitteeAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the Committee details in <a href="/wa/Committee"><i class="fa fa-cubes"></i> Committee</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/Committee/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayName').html(data.name);
                $('#displayMembers').html(data.memberId);
                $('#displayDescription').html(data.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterCommitteeData = function(url){
    //delete the table
    $("#committee").remove();
    $("#committee_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="committee">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#committee .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getCommitteeData(url);
};

var goToCommittee = function(committeeId){
    window.location = '/wa/committee/' + committeeId;
};

var getCommitteeData = function(url){
    App.blockUI({
        target: '#committee_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#committee_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToCommittee("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#committee');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#committee_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#committee_portlet');
};
$().ready(function() {
    var eventsAddForm = $('#events_add_form');
    var eventsAddFormErrors = $('.alert-danger', eventsAddForm);
    var eventsAddFormSuccess = $('.alert-success', eventsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    eventsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    eventsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            eventTypeId: {
                required: true
            },
            eventName: {
                required: true
            },
            eventDate: {
                required: true
            },
            eventVenue: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = eventsAddForm.attr('action');

            var data = new FormData();
            var EvDate = getDate($('#eventDate').val())
            alert(EvDate);
            

            jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                data.append('fileToUpload', file);
            });

            jQuery.each(jQuery('#UploadImage')[0].files, function(i, file) {
                data.append('ChiefGuestImage', file);
            });

            data.append('description',$('#eventDescription').val());
            data.append('name',$('#eventName').val());
            data.append('address',$('#eventAddress').val());
            data.append('eDate',EvDate);
            data.append('venue',$('#eventVenue').val());
            data.append('designation',$('#cDesig').val());
            

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false,
                success: function(data) {
                    showAlertMessage('successMessage','Event added successfuly. You can view the events details in <a href="/wa/events"><i class="fa fa-cubes"></i> events</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/events/"+ data.result.id + "/upload-photos");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', eventsAddForm).change(function () {
        eventsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        eventsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var eventsAddForm = $('#events_add_form');
    var eventsAddFormErrors = $('.alert-danger', eventsAddForm);
    var eventsAddFormSuccess = $('.alert-success', eventsAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the events details in <a href="/wa/events"><i class="fa fa-cubes"></i> events</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/events/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayName').html(data.name);
                $('#hEventName').html(data.name);
                $('#hEventName1').html(data.name);
                $('#displayDate').html(data.eDate);
                $('#hEventDate').html(data.eDate);
                $('#displayVenue').html(data.venue);
                $('#displayAddress').html(data.address);
                $('#displayDescription').html(data.description);

                if(data.photos){
                    console.log('phtos--> '+ data.photos);
                     for (i = 0; i < data.photos.length; i++) {
                        var row = data.photos[i];
                        $('#images').append(
                            '<div class="col-lg-3 col-md-3 col-sm-6 col-xs-12" style="min-height:200px;">'+
                                
                                    
                                '<div class="mt-element-overlay">'+
                                    '<div class="row">'+
                                        '<div class="col-md-12">'+
                                            '<div class="mt-overlay-6">'+
                                                '<img src="https://s3.ap-south-1.amazonaws.com/dev.onground.in/media/'+ getIdPath(row.id) +'/' +row.name +'" />'+
                                                '<div class="mt-overlay">'+
                                                    '<h2>'+ row.name +'</h2>'+
                                                    '<p>'+
                                                        '<a class="mt-info uppercase btn red default btn-outline" href="#">Delete</a>'+
                                                    '</p>'+
                                                '</div>'+
                                            '</div>'+
                                        '</div>'+
                                    '</div>'+
                                '</div>'+
                            '</div>'


                           
                        );
                    }
                }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});
var filterEventsData = function(url){
    //delete the table
    $("#events").remove();
    $("#events_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="events">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#events .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Name </th>'+
                    '<th> Venue </th>'+
                    '<th> Address </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getEventsData(url);
};

var goToEvent = function(eventId){
    window.location = '/wa/events/' + eventId;
};

var getEventsData = function(url){
    App.blockUI({
        target: '#events_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#events_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.eDate != undefined ? new Date(row.eDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEvent("'+row.id +'")> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.venue != undefined ? row.venue : '') + ' </td>' +
                            '<td> ' + (row.address != undefined ? row.address: '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#events');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#events_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#events_portlet');
};
$().ready(function() {
    var magazinesAddForm = $('#magazines_add_form');
    var magazinesAddFormErrors = $('.alert-danger', magazinesAddForm);
    var magazinesAddFormSuccess = $('.alert-success', magazinesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    magazinesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    magazinesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            editionNumber: {
                required: true
            },
            pdfLink: {
                required: true
            },
            pDate: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (magazine, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = magazinesAddForm.attr('action');
            var data = {
                //centerId: $('#centerId').val(),
                name: $('#name').val(),
                coverPhoto: $('#coverPhoto').val(),
                pdfLink: $('#pdfLink').val(),
                editionNumber: $('#editionNumber').val(),
                pDate: getDate($('#pDate').val())
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Magazine added successfuly. You can view the magazines details in <a href="/wa/magazines"><i class="fa fa-cubes"></i> magazines</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/magazines");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', magazinesAddForm).change(function () {
        magazinesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        magazinesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var membersAddForm = $('#members_add_form');
    var membersAddFormErrors = $('.alert-danger', membersAddForm);
    var membersAddFormSuccess = $('.alert-success', membersAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the members details in <a href="/wa/members"><i class="fa fa-cubes"></i> members</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/members/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayName').html(data.magazine.name);
                $('#displayPicture').html(data.magazine.coverPhoto);
                $('#displayPdfLink').html(data.magazine.pdfLink);
                $('#displayEditionNumber').html(data.magazine.editionNumber);
                $('#displayPublishedDate').html(data.magazine.pDate);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterMagazinesData = function(url){
    //delete the table
    $("#magazines").remove();
    $("#magazines_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="magazines">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#magazines .checkboxes" /> </th>'+
                    //'<th> Center </th>'+
                    '<th> Name </th>'+
                    '<th> PDF Link </th>'+
                    '<th> Publish Date </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getMagazinesData(url);
};

var goToMagazine = function(magazineId){
    window.location = '/wa/magazines/' + magazineId;
};

var getMagazinesData = function(url){
    App.blockUI({
        target: '#magazines_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#magazines_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToMagazine("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            //'<td> ' + ((row.center != undefined && row.center.name != undefined)? row.center.name : '') + '</td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.pdfLink != undefined ? row.pdfLink: '') + ' </td>' +
                            '<td> ' + (row.pDate != undefined ? new Date(row.pDate).toISOString().slice(0, 10) : '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#magazines');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#magazines_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#magazines_portlet');
};
$().ready(function() {
    var membersAddForm = $('#members_add_form');
    var membersAddFormErrors = $('.alert-danger', membersAddForm);
    var membersAddFormSuccess = $('.alert-success', membersAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    membersAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    membersAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            // location: {
            //     required: true
            // },
            mobile: {
                number: true,
                maxlength:10,
                minlength: 10,
                required: true
            },
            dateOfBirth: {
                required: true,
            },
            startDate: {
                required: true,
            }
            // registeredName: {
            //     required: true
            // },
            // registrationNumber: {
            //     required: true
            // }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (member, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = membersAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                picture: $('#picture').val(),
                //spouseRank: $('#spouseRank').val(),
                spouseName: $('#spouseName').val(),
                address: $('#address').val(),
                mobile: $('#mobile').val(),
                password: $('#pwd').val(),
                spouseMobile: $('#spouseMobile').val(),
                //spouseRegistrationNumber: $('#spouseRegistrationNumber').val(),
                //spouseJobLocation: $('#spouseJobLocation').val(),
                dateOfBirth: getDate($('#dateOfBirth').val()),
                startDate: getDate($('#startDate').val())
                //endDate: getDate($('#endDate').val())
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Member added successfuly. You can view the members details in <a href="/wa/members"><i class="fa fa-cubes"></i> members</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/members");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', membersAddForm).change(function () {
        membersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        membersAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var membersAddForm = $('#members_add_form');
    var membersAddFormErrors = $('.alert-danger', membersAddForm);
    var membersAddFormSuccess = $('.alert-success', membersAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the members details in <a href="/wa/members"><i class="fa fa-cubes"></i> members</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/members/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayName').html(data.member.name);
                $('#displayPicture').html(data.member.picture);
                $('#displaySpouseRank').html(data.member.spouseRank);
                $('#displaySpouseName').html(data.member.spouseName);
                $('#displayAddress').html(data.member.address);
                $('#displayMobile').html(data.member.mobile);
                $('#displaySpouseRegistrationNumber').html(data.member.spouseMobile);
                $('#displaySpouseJobLocation').html(data.member.spouseRegistrationNumber);
                $('#displayDateOfBirth').html(data.member.spouseJobLocation);
                $('#displayStartDate').html(data.member.dateOfBirth);
                $('#displayStartDate').html(data.member.startDate);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterMembersData = function(url){
    //delete the table
    $("#members").remove();
    $("#members_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="members">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#members .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Mobile </th>'+
                    '<th> Start Date </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getMembersData(url);
};

var goToMember = function(memberId){
    window.location = '/wa/members/' + memberId;
};

var getMembersData = function(url){
    App.blockUI({
        target: '#members_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#members_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToMember("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td> ' + (row.startDate != undefined ? new Date(row.startDate).toISOString().slice(0, 10) : '') + ' </td>' +
                        '</tr>'
                    );
                    
                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#members');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#members_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#members_portlet');
};
$().ready(function() {
    var presidentsNoteAddForm = $('#presidentsNote_add_form');
    var presidentsNoteAddFormErrors = $('.alert-danger', presidentsNoteAddForm);
    var presidentsNoteAddFormSuccess = $('.alert-success', presidentsNoteAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    presidentsNoteAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    presidentsNoteAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            memberId: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (activity, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = presidentsNoteAddForm.attr('action');
            var data = {
                memberId: $('#memberId').val(),
                note: $('#summernote_1').summernote('code') 
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Presidents Note added successfuly. You can view the Presidents Note details in <a href="/wa/presidents_note"><i class="fa fa-cubes"></i> Presidents Note</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/presidents_note");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', presidentsNoteAddForm).change(function () {
        presidentsNoteAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        presidentsNoteAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var presidentsNoteAddForm = $('#presidentsNote_add_form');
    var presidentsNoteAddFormErrors = $('.alert-danger', presidentsNoteAddForm);
    var presidentsNoteAddFormSuccess = $('.alert-success', presidentsNoteAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the presidentsNote details in <a href="/wa/presidentsNote"><i class="fa fa-cubes"></i> presidentsNote</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/presidentsNote/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayName').html(data.memberId);
                $('#displayNote').html(data.note);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterPresidentsNoteData = function(url){
    //delete the table
    $("#presidentsNote").remove();
    $("#presidentsNote_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="presidentsNote">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#presidentsNote .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Note </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getPresidentsNoteData(url);
};

var goToPresidentsNote = function(presidentsNoteId){
    window.location = '/wa/presidents_note/' + presidentsNoteId;
};

var getPresidentsNoteData = function(url){
    App.blockUI({
        target: '#presidentsNote_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#presidentsNote_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToPresidentsNote("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + ((row.member != undefined && row.member.name != undefined)? row.member.name : '') + '</td>' +
                            //'<td> ' + (row.name != undefined ? row.name : '') + ' </td>' +
                            '<td> ' + (row.note != undefined ? row.note : '') + ' </td>' +
                        '</tr>'
                    );
                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#presidentsNote');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#presidentsNote_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#presidentsNote_portlet');
};
$().ready(function() {
    var schoolsAddForm = $('#schools_add_form');
    var schoolsAddFormErrors = $('.alert-danger', schoolsAddForm);
    var schoolsAddFormSuccess = $('.alert-success', schoolsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    schoolsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    schoolsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (school, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = schoolsAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                picture: $('#picture').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','School added successfuly. You can view the schools details in <a href="/wa/schools"><i class="fa fa-cubes"></i> schools</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/schools");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', schoolsAddForm).change(function () {
        schoolsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        schoolsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var magazinesAddForm = $('#magazines_add_form');
    var magazinesAddFormErrors = $('.alert-danger', magazinesAddForm);
    var magazinesAddFormSuccess = $('.alert-success', magazinesAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the magazines details in <a href="/wa/magazines"><i class="fa fa-cubes"></i> magazines</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/magazines/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayName').html(data.name);
                $('#displayPicture').html(data.picture);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterSchoolsData = function(url){
    //delete the table
    $("#schools").remove();
    $("#schools_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="schools">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#schools .checkboxes" /> </th>'+
                    //'<th> Center </th>'+
                    '<th> School Name </th>'+
                    '<th> Cover Photo </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getSchoolsData(url);
};

var goToSchool = function(schoolId){
    window.location = '/wa/schools/' + schoolId;
};

var getSchoolsData = function(url){
    App.blockUI({
        target: '#schools_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#schools_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToSchool("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.picture != undefined ? row.picture: '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#schools');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#schools_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#schools_portlet');
};
$().ready(function() {
    var shoppeAddForm = $('#shoppe_add_form');
    var shoppeAddFormErrors = $('.alert-danger', shoppeAddForm);
    var shoppeAddFormSuccess = $('.alert-success', shoppeAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    shoppeAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    shoppeAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            categoryId: {
                required: true
            },
            productName: {
                required: true
            },
            brandName: {
                required: true
            },
            price: {
                required: true
            },
            salesPackage: {
                required: true
            },
            color: {
                required :true
            },
            sku: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (shoppe, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = shoppeAddForm.attr('action');
            var data = {
                name: $('#productName').val(),
                sku: $('#sku').val(),
                //picture: $('#picture').val(),
                brandName: $('#brandName').val(),
                categoryId: $('#categoryId').val(),
                color: $('#color').val(),
                price: $('#price').val(),
                salesPackage: parseInt($('#salesPackage').val()),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Product added successfuly. You can view the shoppe details in <a href="/wa/shoppe"><i class="fa fa-cubes"></i> shoppe</a>.','success','fa-check fa-lg');
                    window.location.replace("/wa/shoppe");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', shoppeAddForm).change(function () {
        shoppeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        shoppeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var shoppeAddForm = $('#shoppe_add_form');
    var shoppeAddFormErrors = $('.alert-danger', shoppeAddForm);
    var shoppeAddFormSuccess = $('.alert-success', shoppeAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the shoppe details in <a href="/wa/shoppe"><i class="fa fa-cubes"></i> shoppe</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/shoppe/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayProductName').html(data.product.name);
                $('#displaySku').html(data.product.sku);
                $('#displayBrandName').html(data.product.brandName);
                $('#displayCategory').html(data.product.category.name);
                $('#displayColor').html(data.product.color);
                $('#displayPrice').html(data.product.price);
                $('#displaySalesPackage').html(data.product.salesPackage);
                $('#displayDescription').html(data.product.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterShoppeData = function(url){
    //delete the table
    $("#shoppe").remove();
    $("#shoppe_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="shoppe">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#shoppe .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Brand </th>'+
                    '<th> Category </th>'+
                    '<th> Price </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(customerId != null && customerId!= -1){
    //     url = url + '&customerId=' + customerId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getShoppeData(url);
};

var goToProduct = function(shoppeId){
    window.location = '/wa/shoppe/' + shoppeId;
};

var getShoppeData = function(url){
    App.blockUI({
        target: '#shoppe_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#shoppe_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX" onclick=goToProduct("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name : '') + '</td>' +
                            '<td> ' + (row.brandName != undefined ? row.brandName : '') + '</td>' +
                            '<td> ' + ((row.category != undefined && row.category.name != undefined)? row.category.name : '') + '</td>' +
                            '<td> ' + (row.salesPackage != undefined ? row.salesPackage : '') + '</td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#shoppe');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#shoppe_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#shoppe_portlet');
};
$().ready(function() {
    var bankEntryForm = $('#bank_entry_form');
    var bankEntryFormErrors = $('.alert-danger', bankEntryForm);
    var bankEntryFormSuccess = $('.alert-success', bankEntryForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    bankEntryForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    bankEntryForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            },  
            type: {
                required: true
            },
            customerId: {
                required: function () {
                    return $('[name="type"]').val() == 'receipt';
                }
            },
            vendorId: {
                required: function () {
                    return $('[name="type"]').val() == 'payment';
                }
            },
            bankAccount: {
                required: function () {
                        return $('[name="modeType"]').val() == 'bank';
                    }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(bankEntryForm.attr('action'));
            var url = bankEntryForm.attr('action');
            var data = {
                tDate: getDate($('#tDate').val()),
                amount: $('#amount').val(),
                type: $('#type').val(),
                customerId: $('#customerId').val(),
                vendorId: $('#vendorId').val(),
                bankAccount: $('#bankAccount').val(),
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Bank entry added successfuly. You can view the entries in the <a href="/bank-ledger"><i class="icon-notebook"></i> Bank Ledger</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', bankEntryForm).change(function () {
        bankEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        bankEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#tDate').val(moment().format('DD-MM-YYYY'));
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    populateVendors(buildUrl(getAPIUrl(),'vendors', getToken(), 3000));
    populateModes(buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    populateTransactionTypes(true);
    populateBankList(buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    addBank(buildUrl(getAPIUrl(),'mode', getToken(), null), buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    addVendor(buildUrl(getAPIUrl(),'vendor', getToken(), null),buildUrl(getAPIUrl(),'vendors', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    
});
$().ready(function() {
    var cashEntryForm = $('#cash_entry_form');
    var cashEntryFormErrors = $('.alert-danger', cashEntryForm);
    var cashEntryFormSuccess = $('.alert-success', cashEntryForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    cashEntryForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    cashEntryForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            },  
            type: {
                required: true
            },
            customerId: {
                required: function () {
                    return $('[name="type"]').val() == 'receipt';
                }
            },
            itemId: {
                required: true
            },
            vendorId: {
                required: function () {
                    return $('[name="type"]').val() == 'payment';
                }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(cashEntryForm.attr('action'));
            var url = cashEntryForm.attr('action');
            var data = {
                tDate: getDate($('#tDate').val()),
                amount: $('#amount').val(),
                type: $('#type').val(),
                itemId: $('#itemId').val(),
                customerId: null,
                vendorId: null,
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };

            if($('[name="type"]').val() === 'payment'){
                data.vendorId = $('#vendorId').val();  
            }else if($('[name="type"]').val() === 'receipt'){
                data.customerId =  $('#customerId').val();
            }

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Cash entry added successfuly. You can view the entries in the <a href="/cash-ledger"><i class="icon-notebook"></i> Cash Ledger</a>.','success','fa-check fa-lg');
                    //window.location.replace("/cash-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', cashEntryForm).change(function () {
        cashEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        cashEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#tDate').val(moment().format('DD-MM-YYYY'));
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    populateVendors(buildUrl(getAPIUrl(),'vendors', getToken(), 3000));
    populateTransactionTypes(true);
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000));
    addVendor(buildUrl(getAPIUrl(),'vendor', getToken(), null),buildUrl(getAPIUrl(),'vendors', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null),buildUrl(getAPIUrl(),'items', getToken(), 3000));
});
$().ready(function() {
    var expensesEntryForm = $('#expense_entry_form');
    var expensesEntryFormErrors = $('.alert-danger', expensesEntryForm);
    var expensesEntryFormSuccess = $('.alert-success', expensesEntryForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    expensesEntryForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    expensesEntryForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            expenseCategoryId: {
                required: true
            },
            modeType: {
                required: true
            },
            tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            }, 
            bankAccount: {
                required: function () {
                        return $('[name="modeType"]').val() == 'bank';
                    }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            bankAccount: {
                required: "Please select a bank account."
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = expensesEntryForm.attr('action');
            var data = {
                expenseCategoryId: $('#expenseCategoryId').val(),
                tDate: getDate($('#tDate').val()),
                amount: $('#amount').val(),
                modeType: $('#modeType').val(),
                bankAccount: $('#bankAccount').val(),
                expenseFor: $('#expenseFor').val(),
                customerId: $('#customerId').val(),
                vendorId: $('#vendorId').val(),
                employeeId: $('#employeeId').val(),
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Expense entry added successfuly. You can view the entries in the <a href="/expense-ledger"><i class="icon-notebook"></i> Expense Ledger</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
            
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', expensesEntryForm).change(function () {
        expensesEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        expensesEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#tDate').val(moment().format('DD-MM-YYYY'));
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    populateVendors(buildUrl(getAPIUrl(),'vendors', getToken(), 3000),false);
    populateEmployees(buildUrl(getAPIUrl(),'employees', getToken(), 3000),false);
    populateModes(buildUrl(getAPIUrl(),'modes', getToken(), 3000),false);
    populateExpenseCategories(buildUrl(getAPIUrl(),'expense-categories', getToken(), 3000),false);
    addBank(buildUrl(getAPIUrl(),'mode', getToken(), null), buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    addVendor(buildUrl(getAPIUrl(),'vendor', getToken(), null),buildUrl(getAPIUrl(),'vendors', getToken(), 3000));
    addEmployee(buildUrl(getAPIUrl(),'employee', getToken(), null),buildUrl(getAPIUrl(),'employees', getToken(), 3000));
    addExpenseCategories(buildUrl(getAPIUrl(),'expense-category', getToken(), null),buildUrl(getAPIUrl(),'expense-categories', getToken(), 3000));

    $('#expenseFor').change(function() {
        if ($(this).val() === 'customer') {
            $('#customerOption').removeClass('hide');
            $('#vendorOption').addClass('hide');
            $('#employeeOption').addClass('hide');
            $("#customerId").select2({
              placeholder: "Select a customer",
              allowClear: true
            });
        } else if ($(this).val() === 'vendor') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').removeClass('hide');
            $('#employeeOption').addClass('hide');
            $("#vendorId").select2({
              placeholder: "Select a vendor",
              allowClear: true
            });
        } else if ($(this).val() === 'employee') {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
            $('#employeeOption').removeClass('hide');
            $("#employeeId").select2({
              placeholder: "Select an employee",
              allowClear: true
            });
            
        } else {
            $('#customerOption').addClass('hide');
            $('#vendorOption').addClass('hide');
            $('#employeeOption').addClass('hide');
        }
    });
});
$().ready(function() {
    var purchaseEntryForm = $('#purchase_entry_form');
    var purchaseEntryFormErrors = $('.alert-danger', purchaseEntryForm);
    var purchaseEntryFormSuccess = $('.alert-success', purchaseEntryForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    purchaseEntryForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    purchaseEntryForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            },  
            vendorId: {
                required: true
            },
            modeType: {
                required: true
            },
            bankAccount: {
                required: function () {
                        return $('[name="modeType"]').val() == 'bank';
                    }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            bankAccount: {
                required: "Please select a bank account."
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(purchaseEntryForm.attr('action'));
            var url = purchaseEntryForm.attr('action');
            var data = {
                tDate: getDate($('#tDate').val()),
                amount: $('#amount').val(),
                vendorId: $('#vendorId').val(),
                modeType: $('#modeType').val(),
                bankAccount: $('#bankAccount').val(),
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Purchase entry added successfuly. You can view the entries in the <a href="/purchase-ledger"><i class="icon-notebook"></i> Purchase Ledger</a>.','success','fa-check fa-lg');
                    //window.location.replace("/purchase-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', purchaseEntryForm).change(function () {
        purchaseEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        purchaseEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
    
    $('#tDate').val(moment().format('DD-MM-YYYY'));
    populateVendors(buildUrl(getAPIUrl(),'vendors', getToken(), 3000),true);
    populateModes(buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    addBank(buildUrl(getAPIUrl(),'mode', getToken(), null), buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    addVendor(buildUrl(getAPIUrl(),'vendor', getToken(), null),buildUrl(getAPIUrl(),'vendors', getToken(), 3000));
});
$().ready(function() {
    var salesEntryForm = $('#sales_entry_form');
    var salesEntryFormErrors = $('.alert-danger', salesEntryForm);
    var salesEntryFormSuccess = $('.alert-success', salesEntryForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    salesEntryForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    salesEntryForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            },  
            customerId: {
                required: true
            },
            itemId: {
                required: true
            },
            modeType: {
                required: true
            },
            bankAccount: {
                required: function () {
                        return $('[name="modeType"]').val() == 'bank';
                    }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            bankAccount: {
                required: "Please select a bank account."
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = salesEntryForm.attr('action');
            var data = {
                tDate: getDate($('#tDate').val()),
                amount: $('#amount').val(),
                tax: $('#tax').val(),
                total: $('#total').val(),
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                modeType: $('#modeType').val(),
                bankAccount: $('#bankAccount').val(),
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Sales entry added successfuly. You can view the entries in the <a href="/sales-ledger"><i class="icon-notebook"></i> Sales Ledger</a>.','success','fa-check fa-lg');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', salesEntryForm).change(function () {
        salesEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        salesEntryForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#tDate').val(moment().format('DD-MM-YYYY'));
    populateCustomers(buildUrl(getAPIUrl(),'customers', getToken(), 3000),false);
    populateModes(buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    populateItems(buildUrl(getAPIUrl(),'items', getToken(), 3000),false);
    addBank(buildUrl(getAPIUrl(),'mode', getToken(), null), buildUrl(getAPIUrl(),'modes', getToken(), 3000));
    addCustomer(buildUrl(getAPIUrl(),'customer', getToken(), null),buildUrl(getAPIUrl(),'customers', getToken(), 3000));
    addItem(buildUrl(getAPIUrl(),'item', getToken(), null), buildUrl(getAPIUrl(),'items', getToken(), 3000));
});
var filterBankLedgerData = function(url, fromDate, toDate, customerId, vendorId, bankAccount, tType){
    //delete the table
    $("#bank_ledger").remove();
    $("#bank_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="bank_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#bank_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Type </th>'+
                    '<th> Customer </th>'+
                    '<th> Vendor </th>'+
                    '<th> Bank </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url + '&toDate=' + toDate;
    }
    if(tType != null && tType != -1){
        url = url + '&type=' + tType;

        if(tType == 'receipt'){
            if(customerId != null && customerId!= -1){
                url = url + '&customerId=' + customerId;
            }   
        }else{
            if(vendorId != null && vendorId!= -1){
                url = url + '&vendorId=' + vendorId;
            } 
        }
    }
    
    if(bankAccount != null && bankAccount!= -1){
        url = url + '&bankAccount=' + bankAccount;
    }

    getBankLedgerData(url);
};

var getBankLedgerData = function(url){
    
    App.blockUI({
        target: '#bank_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#bank_ledger_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            '<td> ' + formatTransactionTypes(row.type) + ' </td>' +
                            '<td> ' + (row.customer != undefined ? row.customer.name : '') + ' </td>' +
                            '<td> ' + (row.vendor != undefined ? row.vendor.name : '') + ' </a></td>' +
                            '<td> ' + (row.mode != undefined ? row.mode.bankAccount : '') + ' </td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#bank_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#bank_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });

    App.unblockUI('#bank_ledger_portlet');
};
$().ready(function() {
    var cashLedgerData = null;

    var updateDetails = function(){

        var tdate = moment(cashLedgerData.tDate.toString()).subtract(1, 'day');
        $('#displayTDate').html(tdate.format('DD-MM-YYYY'));

        $('#displayAmount').html(cashLedgerData.amount);
        $('#displayType').html(cashLedgerData.type);
        if(cashLedgerData.type && cashLedgerData.type === 'receipt'){
            $('#dCustomer').removeClass('hidden');
            $('#dVendor').addClass('hidden');
            $('#displayCustomer').html(cashLedgerData.customer.name);  
        }   
        if(cashLedgerData.type && cashLedgerData.type === 'payment'){
            $('#dVendor').removeClass('hidden');
            $('#dCustomer').addClass('hidden');
            $('#displayVendor').html(cashLedgerData.vendor.name);
        }
        $('#displayItem').html(cashLedgerData.item.name);
        $('#displayRefNo').html(cashLedgerData.refNo);
        $('#displayDescription').html(cashLedgerData.description);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                cashLedgerData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
        var tdate = moment(cashLedgerData.tDate.toString()).subtract(1, 'day');
        $('#tDate').val(tdate.format('DD-MM-YYYY'));
        $('#amount').val(cashLedgerData.amount);
        $('#type').val(cashLedgerData.type);
        if(cashLedgerData.type && cashLedgerData.type === 'receipt'){
            $('#customerOption').removeClass('hidden');
            $('#vendorOption').addClass('hidden'); 
            $('#customerId').val(cashLedgerData.customerId);
        }
        if(cashLedgerData.type && cashLedgerData.type === 'payment'){
            $('#vendorOption').removeClass('hidden');
            $('#customerOption').addClass('hidden');
            $('#vendorId').val(cashLedgerData.vendorId);
        }
        
        $('#itemId').val(cashLedgerData.itemId);
        
        $('#refNo').val(cashLedgerData.refNo);
        $('#description').val(cashLedgerData.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/cash-ledger';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var cashEntryEditForm = $('#cash_entry_edit_form');
    var cashEntryEditFormErrors = $('.alert-danger', cashEntryEditForm);
    var cashEntryEditFormSuccess = $('.alert-success', cashEntryEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    cashEntryEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    cashEntryEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            },  
            type: {
                required: true
            },
            customerId: {
                required: function () {
                    return $('[name="type"]').val() == 'receipt';
                }
            },
            itemId: {
                required: true
            },
            vendorId: {
                required: function () {
                    return $('[name="type"]').val() == 'payment';
                }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(cashEntryEditForm.attr('action'));
            var url = cashEntryEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id: $('#cashEntryId').val(),
                tDate: new Date(getDate($('#tDate').val())),
                amount: $('#amount').val(),
                type: $('#type').val(),
                itemId: $('#itemId').val(),
                customerId: null,
                vendorId: null,
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };
            if($('[name="type"]').val() === 'payment'){
                data.vendorId = $('#vendorId').val();  
            }else if($('[name="type"]').val() === 'receipt'){
                data.customerId =  $('#customerId').val();
            }

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Customer updated successfuly.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                    cashLedgerData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', cashEntryEditForm).change(function () {
        cashEntryEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        cashEntryEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterCashLedgerData = function(url, fromDate, toDate, customerId, vendorId, tType){
    //delete the table
    $("#cash_ledger").remove();
    $("#cash_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="cash_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#cash_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Item </th>'+
                    '<th> Party </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(tType != null && tType != -1){
        url = url + '&type=' + tType;

        if(tType == 'receipt'){
            if(customerId != null && customerId!= -1){
                url = url + '&customerId=' + customerId;
            }   
        }else{
            if(vendorId != null && vendorId!= -1){
                url = url + '&vendorId=' + vendorId;
            } 
        }
    }

    getCashLedgerData(url);
};

var goToCashLedger = function(cashEntryId){
    window.location = '/cash-ledger/' + cashEntryId;
};

var getCashLedgerData = function(url){
    App.blockUI({
        target: '#cash_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#cash_ledger_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td class="clickable" onclick=goToCashLedger("'+row.id +'")> ' + (row.type && row.type === 'payment'? '-':'') + ''+ (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            // '<td> ' + formatTransactionTypes(row.type) + ' </td>' +
                            '<td> ' + (row.item != undefined ? row.item.name : '') + ' </a></td>' +
                            '<td> ' + (row.type && row.type === 'payment'? (row.vendor != undefined ? row.vendor.name : '') : (row.customer != undefined ? row.customer.name : '')) + ' </a></td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }

                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#cash_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#cash_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });

    App.unblockUI('#cash_ledger_portlet');
};

$('.btn-delete').on('click',function(event){
    var ids = new Array();

    $('.checkboxes:checked').each(function(){
      ids.push($(this).attr('data-id'));//this is the checked checkbox
    });

    var idText = ids.toString();
    var url = $('#apiUrl').val()+ '/api/entry?token='+$('#token').val() + '&ids=' + idText ;
   
    $.ajax({
        url: url,
        type: 'DELETE',
        success: function(data) {
            if (data && data.status) {
                //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                window.location = '/cash-ledger';
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});
var filterCustomersLedgerData = function(url, fromDate, toDate, customerId, modeType, bankAccount){
    //delete the table
    $("#customers_ledger").remove();
    $("#customers_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="customers_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#customers_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Customer </th>'+
                    '<th> Mode </th>'+
                    '<th> Bank </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(customerId != null && customerId != -1){
        url = url + '&customerId=' + customerId;
    }
    if(modeType != null && modeType != -1){
        url = url + '&modeType=' + modeType;

        if(modeType == 'bank'){
            if(bankAccount != null && bankAccount != -1){
                url = url + '&bankAccount=' + bankAccount;
            }   
        }
    }

    getCustomersLedgerData(url);
};

var getCustomersLedgerData = function(url){
    App.blockUI({
        target: '#customer_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#customer_ledger_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            '<td> ' + (row.customer != undefined ? row.customer.name : '') + ' </a></td>' +
                            '<td> ' + formatModes(row.modeType) + ' </td>' +
                            '<td> ' + (row.mode != undefined ? row.mode.bankAccount : '') + ' </td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#customers_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#customers_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });

    App.unblockUI('#customer_ledger_portlet');
};
var filterExpensesLedgerData = function(url, fromDate, toDate, expenseCategoryId, modeType, bankAccount){
    //delete the table
    $("#expenses_ledger").remove();
    $("#expenses_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="expenses_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#expenses_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Category </th>'+
                    '<th> Mode </th>'+
                    '<th> Bank </th>'+
                    '<th> Expense For </th>'+
                    // '<th> Customer </th>'+
                    // '<th> Vendor </th>'+
                    // '<th> Employee </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+ 
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(expenseCategoryId != null && expenseCategoryId != -1){
        url = url + '&expenseCategoryId=' + expenseCategoryId;
    }
    if(modeType != null && modeType != -1){
        url = url + '&modeType=' + modeType;

        if(modeType == 'bank'){
            if(bankAccount != null && bankAccount != -1){
                url = url + '&bankAccount=' + bankAccount;
            }   
        }
    }

    getExpensesLedgerData(url);
};

var getExpensesLedgerData = function(url){
    App.blockUI({
        target: '#expense_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#expense_ledger_portlet');
    }, 500);
    
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            '<td> ' + (row.expenseCategory != undefined ? row.expenseCategory.cName : '') + ' </td>' +
                            '<td> ' + formatModes(row.modeType) + ' </td>' +
                            '<td> ' + (row.mode != undefined ? row.mode.bankAccount : '') + ' </td>' +
                            '<td> ' + formatExpenseFor(row.expenseFor) + ' </td>' +
                            // '<td> ' + (row.customer != undefined ? row.customer.name : '') + ' </a></td>' +
                            // '<td> ' + (row.vendor != undefined ? row.vendor.name : '') + ' </a></td>' +
                            // '<td> ' + (row.employee != undefined ? row.employee.name : '') + ' </td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#expenses_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#expenses_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#expense_ledger_portlet');
};
var filterPurchaseLedgerData = function(url, fromDate, toDate, vendorId, modeType){
    //delete the table
    $("#purchase_ledger").remove();
    $("#purchase_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="purchase_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#purchase_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Vendor </th>'+
                    '<th> Mode </th>'+
                    '<th> Bank </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(vendorId != null && vendorId != -1){
        url = url + '&vendorId=' + vendorId;
    }
    if(modeType != null && modeType != -1){
        url = url + '&modeType=' + modeType;

        if(modeType == 'bank'){
            if(bankAccount != null && bankAccount != -1){
                url = url + '&bankAccount=' + bankAccount;
            }   
        }
    }

    getPurchaseLedgerData(url);
};

var getPurchaseLedgerData = function(url){
    App.blockUI({
        target: '#purchase_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#purchase_ledger_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            '<td> ' + (row.vendor != undefined ? row.vendor.name : '') + ' </a></td>' +
                            '<td> ' + formatModes(row.modeType) + ' </td>' +
                            '<td> ' + (row.mode != undefined ? row.mode.bankAccount : '') + ' </td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#purchase_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#purchase_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#purchase_ledger_portlet');
};
$().ready(function() {
    var salesLedgerData = null;

    var updateDetails = function(){

        var tdate = moment(salesLedgerData.tDate.toString()).subtract(1, 'day');
        $('#displayTDate').html(tdate.format('DD-MM-YYYY'));

        $('#displayAmount').html(salesLedgerData.amount);
        $('#displayTax').html(salesLedgerData.tax);
        $('#displayTotal').html(salesLedgerData.total);

        $('#displayCustomer').html(salesLedgerData.customer.name); 

        $('#displayModeType').html(salesLedgerData.modeType);
        if(salesLedgerData.modeType === 'bank'){
            $('#dBank').removeClass("hidden");
            $('#displayBank').html(salesLedgerData.bank.name);
        }else{
            $('#dBank').addClass("hidden");
        }

        $('#displayItem').html(salesLedgerData.item.name);
        $('#displayRefNo').html(salesLedgerData.refNo);
        $('#displayDescription').html(salesLedgerData.description);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                salesLedgerData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
        var tdate = moment(salesLedgerData.tDate.toString()).subtract(1, 'day');
        $('#tDate').val(tdate.format('DD-MM-YYYY'));
        $('#amount').val(salesLedgerData.amount);
        $('#customerId').val(salesLedgerData.customerId);
        $('#itemId').val(salesLedgerData.itemId);
        
        $('#modeType').val(salesLedgerData.modeType);

        $('#tax').val(salesLedgerData.tax);
        $('#total').val(salesLedgerData.total);

        $('#refNo').val(salesLedgerData.refNo);
        $('#description').val(salesLedgerData.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/sales-ledger';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var salesEntryEditForm = $('#sales_entry_edit_form');
    var salesEntryEditFormErrors = $('.alert-danger', salesEntryEditForm);
    var salesEntryEditFormSuccess = $('.alert-success', salesEntryEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    salesEntryEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    salesEntryEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           tDate: {
                required: true
            },
            amount: {
                required: true,
                number: true
            },  
            customerId: {
                required: true
            },
            itemId: {
                required: true
            },
            modeType: {
                required: true
            },
            bankAccount: {
                required: function () {
                        return $('[name="modeType"]').val() == 'bank';
                    }
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(salesEntryEditForm.attr('action'));
            var url = salesEntryEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id: $('#salesEntryId').val(),
                tDate: getDate($('#tDate').val()),
                amount: $('#amount').val(),
                tax: $('#tax').val(),
                total: $('#total').val(),
                customerId: $('#customerId').val(),
                itemId: $('#itemId').val(),
                modeType: $('#modeType').val(),
                bankAccount: $('#bankAccount').val(),
                refNo: $('#refNo').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Customer updated successfuly.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                    salesLedgerData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', salesEntryEditForm).change(function () {
        salesEntryEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        salesEntryEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterSalesLedgerData = function(url, fromDate, toDate, customerId, modeType, bankAccount){
    //delete the table
    $("#sales_ledger").remove();
    $("#sales_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="sales_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#sales_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Customer </th>'+
                    '<th> Mode </th>'+
                    '<th> Bank </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(customerId != null && customerId != -1){
        url = url + '&customerId=' + customerId;
    }
    if(modeType != null && modeType != -1){
        url = url + '&modeType=' + modeType;

        if(modeType == 'bank'){
            if(bankAccount != null && bankAccount != -1){
                url = url + '&bankAccount=' + bankAccount;
            }   
        }
    }
    getSalesLedgerData(url);
};

var goToSalesLedger = function(cashEntryId){
    window.location = '/sales-ledger/' + cashEntryId;
};

var getSalesLedgerData = function(url){
    App.blockUI({
        target: '#sales_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#sales_ledger_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1"  data-id="'+ row.id +'"/></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td class="clickable" onclick=goToSalesLedger("'+row.id +'")> ' + (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            '<td> ' + (row.customer != undefined ? row.customer.name : '') + ' </a></td>' +
                            '<td> ' + formatModes(row.modeType) + ' </td>' +
                            '<td> ' + (row.mode != undefined ? row.mode.bankAccount : '') + ' </td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }

                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#sales_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#sales_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#sales_ledger_portlet');
};

$('.btn-delete').on('click',function(event){
    var ids = new Array();

    $('.checkboxes:checked').each(function(){
      ids.push($(this).attr('data-id'));//this is the checked checkbox
    });

    var idText = ids.toString();
    var url = $('#apiUrl').val()+ '/api/entry?token='+$('#token').val() + '&ids=' + idText ;
   
    $.ajax({
        url: url,
        type: 'DELETE',
        success: function(data) {
            if (data && data.status) {
                //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                window.location = '/sales-ledger';
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});
$().ready(function() {
    var salesEntryAddForm = $('#salesEntry_add_form');
    var salesEntryAddFormErrors = $('.alert-danger', salesEntryAddForm);
    var salesEntryAddFormSuccess = $('.alert-success', salesEntryAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the salesEntry details in <a href="/wa/salesEntry"><i class="fa fa-cubes"></i> salesEntry</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/salesEntry/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#displayAmount').html(data.amount);
                $('#displayTax').html(data.tax);
                $('#displayTotal').html(data.total);
                $('#displayCustomer').html(data.customer.name);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    
            // var data = {
            //     description: $('#eventDescription').val(),
            //     name: $('#eventName').val(),
            //     address: $('#eventAddress').val(),
            //     eDate: getDate($('#eventDate').val()),
            //     venue: $('#eventVenue').val(),
            //     eventTypeId: $('#eventTypeId').val()
            // };
   
});
var filterVendorLedgerData = function(url, fromDate, toDate, vendorId, modeType, bankAccount){
    //delete the table
    $("#vendor_ledger").remove();
    $("#vendor_ledger_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="vendor_ledger">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#vendor_ledger .checkboxes" /> </th>'+
                    '<th> Date </th>'+
                    '<th> Amount </th>'+
                    '<th> Vendor </th>'+
                    '<th> Mode </th>'+
                    '<th> Bank </th>'+
                    '<th> Reference # </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(vendorId != null && vendorId != -1){
        url = url + '&vendorId=' + vendorId;
    }
    if(modeType != null && modeType != -1){
        url = url + '&modeType=' + modeType;

        if(modeType == 'bank'){
            if(bankAccount != null && bankAccount != -1){
                url = url + '&bankAccount=' + bankAccount;
            }   
        }
    }

    getVendorLedgerData(url);
};

var getVendorLedgerData = function(url){
    App.blockUI({
        target: '#vendor_ledger_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#vendor_ledger_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.tDate != undefined ? new Date(row.tDate).toISOString().slice(0, 10) : '') + ' </td>' +
                            '<td> ' + (row.amount != undefined ? row.amount : 0) + ' </td>' +
                            '<td> ' + (row.vendor != undefined ? row.vendor.name : '') + ' </a></td>' +
                            '<td> ' + formatModes(row.modeType) + ' </td>' +
                            '<td> ' + (row.mode != undefined ? row.mode.bankAccount : '') + ' </td>' +
                            '<td> ' + (row.refNo != undefined ? row.refNo : '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description : '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#vendor_ledger');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#vendor_ledger_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#vendor_ledger_portlet');
};

$().ready(function() {
    var sData = null;

    var populateReportData = function(){
        // var tdate = moment(salesLedgerReport.tDate.toString()).subtract(1, 'day');
        //$('#displayTDate').html(tdate.format('DD-MM-YYYY'));
       

        $('#orgName').html(sData.portfolio.name);
        $('#portfolioAddress').html(sData.portfolio.address);
        $('#portfolioMobile').html(sData.portfolio.mobile);
        $('#portfolioEmail').html(sData.portfolio.email);
        $('#salesEntryRef').html(sData.refNo);
        $('#salesEntryDate').html(sData.tDate);
        $('#custName').html(sData.customer.name);
        $('#custAddress').html(sData.customer.address);
        $('#paymentMode').html(sData.bankType);
        $('#total').html(sData.total);
        $('#total1').html(sData.total);
        $('#total2').html(sData.inWords);
        $('#serviceTax').html(sData.tax);
        $('#advance').html(sData.amount);

        window.print();
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                sData = data;
                console.log(data);
                var taDate= new Date(sData.tDate).toISOString().slice(0, 10);
                sData.tDate = taDate;
                populateReportData();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
   
});
$().ready(function() {
    var bankAccountAddForm = $('#bankAccount_add_form');
    var bankAccountAddFormErrors = $('.alert-danger', bankAccountAddForm);
    var bankAccountAddFormSuccess = $('.alert-success', bankAccountAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    bankAccountAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    bankAccountAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            bankName: {
                required: true
            },
            accountNo: {
                required: true
            },
            accountType: {
                required: true
            },
            branchName: {
                required: true
            },
            ifscCode: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(bankAccountAddForm.attr('action'));
            var url = bankAccountAddForm.attr('action');
            var data = {
                bankName: $('#bankName').val(),
                accountNo: $('#accountNo').val(),
                accountType: $('#accountType').val(),
                branchName: $('#branchName').val(),
                ifscCode: $('#ifscCode').val(),
                contactNo: $('#contactNo').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Bank account added successfuly. You can view the bank details in <a href="/bankAccounts"><i class="fa fa-bank"></i> Bank Accounts</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', bankAccountAddForm).change(function () {
        bankAccountAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        bankAccountAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterBankAccountData = function(url, name, mobile){
    //delete the table
    $("#bankAccount").remove();
    $("#bankAccount_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="bankAccount">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#bankAccount .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Account Number </th>'+
                    '<th> Account Type </th>'+
                    '<th> Branch </th>'+
                    '<th> IFSC </th>'+
                    '<th> Contact </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(vendorId != null && vendorId!= -1){
    //     url = url + '&vendorId=' + vendorId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getBankAccountData(url);
};

var getBankAccountData = function(url){
    
    App.blockUI({
        target: '#bankAccount_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#bankAccount_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.bankName != undefined ? row.bankName: '') + ' </td>' +
                            '<td> ' + (row.accountNo != undefined ? row.accountNo: '') + ' </td>' +
                            '<td> ' + (row.accountType != undefined ? row.accountType: '') + ' </td>' +
                            '<td> ' + (row.branchName != undefined ? row.branchName: '') + ' </td>' +
                            '<td> ' + (row.ifscCode != undefined ? row.ifscCode: '') + ' </td>' +
                            '<td> ' + (row.contactNo != undefined ? row.contactNo: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#bankAccount');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#bankAccount_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#bankAccount_portlet');
};
$().ready(function() {
    var branchesAddForm = $('#branches_add_form');
    var branchesAddFormErrors = $('.alert-danger', branchesAddForm);
    var branchesAddFormSuccess = $('.alert-success', branchesAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    branchesAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    branchesAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            email: {
                required: true,
                email: true
            },
            mobile: {
                required: true,
                number: true,
                maxlength:10,
                minlength: 10
            },
            website: {
                required: true,
                url:true
            },
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            branchesAddFormSuccess.hide();
            branchesAddFormErrors.show();
            App.scrollTo(branchesAddFormErrors, -200);
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(branchesAddForm.attr('action'));
            var url = branchesAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                mobile: $('#mobile').val(),
                email: $('#email').val(),
                website: $('#website').val(),
                mname: $('#mname').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Branch added successfuly. You can view the branch details in <a href="/branches"><i class="fa fa-bank"></i> Branches</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', branchesAddForm).change(function () {
        branchesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        branchesAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterBranchesData = function(url, name, mobile){
    //delete the table
    $("#branches").remove();
    $("#branches_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="branches">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#branches .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Mobile </th>'+
                    '<th> Email </th>'+
                    '<th> Website </th>'+
                    '<th> Manager </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(vendorId != null && vendorId!= -1){
    //     url = url + '&vendorId=' + vendorId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getBranchesData(url);
};

var getBranchesData = function(url){
    
    App.blockUI({
        target: '#branches_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#branches_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td> ' + (row.email != undefined ? row.email: '') + ' </td>' +
                            '<td> ' + (row.website != undefined ? row.website: '') + ' </td>' +
                            '<td> ' + (row.mname != undefined ? row.mname: '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#branches');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#branches_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#branches_portlet');
};
$().ready(function() {
    var departmentsAddForm = $('#departments_add_form');
    var departmentsAddFormErrors = $('.alert-danger', departmentsAddForm);
    var departmentsAddFormSuccess = $('.alert-success', departmentsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    departmentsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    departmentsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            hod: {
                required: true
            },
            code: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            departmentsAddFormSuccess.hide();
            departmentsAddFormErrors.show();
            App.scrollTo(departmentsAddFormErrors, -200);
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(departmentsAddForm.attr('action'));
            var url = departmentsAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                code: $('#code').val(),
                hod: $('#hod').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Department added successfuly. You can view the department details in <a href="/departments"><i class="fa fa-bank"></i> Departments</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', departmentsAddForm).change(function () {
        departmentsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        departmentsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterDepartmentsData = function(url, name, mobile){
    //delete the table
    $("#departments").remove();
    $("#departments_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="departments">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#departments .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Code </th>'+
                    '<th> HOD </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(vendorId != null && vendorId!= -1){
    //     url = url + '&vendorId=' + vendorId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getDepartmentsData(url);
};

var getDepartmentsData = function(url){

    App.blockUI({
        target: '#departments_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#departments_portlet');
    }, 500);

    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.code != undefined ? row.code: '') + ' </td>' +
                            '<td> ' + (row.hod != undefined ? row.hod: '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#departments');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#departments_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });

    App.unblockUI('#departments_portlet');
};
$().ready(function() { 
    var purl = $('#apiUrl').val()+'/api/portfolio/'+$('#uname').val()+'?token='+$('#token').val();
    $.ajax({
        url: purl,
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the leads details in <a href="/wa/leads"><i class="fa fa-cubes"></i> leads</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/leads/"+ data.result.id + "/upload-photos");
            if (data && data.portfolio) {
                
                if(data.portfolio.adhar){
                   $("#adharImage").attr("src",data.portfolio.adhar);
                    $('#adharImage').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.adhar + ' "target="_blank"></a>');
                    });
                }

                if(data.portfolio.pan){
                    $("#pancard").attr("src",data.portfolio.pan);
                    $('#pancard').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.pan + ' "target="_blank"></a>');
                    });
                }
                if(data.portfolio.serviceTax){
                    $("#serviceTaxImg").attr("src",data.portfolio.serviceTax);
                     $('#serviceTaxImg').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.serviceTax + ' "target="_blank"></a>');
                    });
                }
                if(data.portfolio.addressProof){
                    $("#addressp").attr("src",data.portfolio.addressProof);
                    $('#addressp').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.addressProof + ' "target="_blank"></a>');
                    });
                }

                if(data.portfolio.letterheadheader){
                    $("#lath").attr("src",data.portfolio.letterheadheader);
                    $('#lath').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.letterheadheader + ' "target="_blank"></a>');
                    });
                }

                if(data.portfolio.letterheadfooter){
                    $("#lathf").attr("src",data.portfolio.letterheadfooter);
                    $('#lathf').each(function(){
                        var $this = $(this); 
                        $this.wrap('<a href="' +data.portfolio.letterheadfooter + ' "target="_blank"></a>');
                    });
                }
                /*$('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);*/
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('#adharSubmit').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/adhar/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#adhar')[0].files, function(i, file) {
            data.append('adhar', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#uploadPan').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/pan/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#pan')[0].files, function(i, file) {
            data.append('pan', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#uploadserviceTax').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/serviceTax/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#serviceTax')[0].files, function(i, file) {
            data.append('serviceTax', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#uploadaddress').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/addressProof/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#addressProof')[0].files, function(i, file) {
            data.append('addressProof', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });

    $('#letterhb').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/letter-head/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#letterh')[0].files, function(i, file) {
            data.append('letterh', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
    $('#letterhfb').on('click',function(event){
        event.preventDefault();
        var url = $('#apiUrl').val()+ '/api/upload/letter-footer/'+$('#uname').val()+'?token='+  $('#token').val();
        var data = new FormData();
        jQuery.each(jQuery('#letterhf')[0].files, function(i, file) {
            data.append('letterhf', file);
        });
        $.ajax({
            url: url,
            type: 'PUT',
            data: data,
            enctype: 'multipart/form-data',
            processData: false,  // tell jQuery not to process the data
            contentType: false,   
            success: function(data) {
                toastr.options.closeButton = true;
                toastr.success("Adhar card updated");
                window.location = '/organisation/documents/'+$('#uname').val();
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
}); 
$().ready(function() { 
    var purl = $('#apiUrl').val()+'/api/portfolio/'+$('#uname').val()+'?token='+$('#token').val();
    $.ajax({
        url: purl,
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the leads details in <a href="/wa/leads"><i class="fa fa-cubes"></i> leads</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/leads/"+ data.result.id + "/upload-photos");
            if (data && data.portfolio) {
                $("#tpKey").html(data.portfolio.tpKey);
                $("#papiKey").html(data.portfolio.apiKey);
                $("#portfolioId").html(data.portfolio.id);
                if(data.portfolio.instamojo){
                    $("#authKey").val(data.portfolio.instamojo.authtoken);
                    $("#apiKey").val(data.portfolio.instamojo.apiKey);
                }
                /*$('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);
                $('#gstNumber').val(data.portfolio.org.gstNumber);*/
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
    $('#editProduct').on('click', function(event){
        event.preventDefault();
        var url1 = getAPIUrl()+ '/api/portfolio/'+$('#uname').val()+'?token='+$('#token').val();
        var data = {
            instamojo:{
                authtoken: $('#authKey').val(),
                apiKey: $('#apiKey').val()
            }
        };
        $.ajax({
            url: url1,
            type: 'PUT',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                showAlertMessage('successMessage','instamojo credentials updated Successfully');

            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
}); 
$().ready(function() { 
    var orgAddForm = $('.orgs_add_form');
    var orgAddFormErrors = $('.alert-danger', orgAddForm);
    var orgAddFormSuccess = $('.alert-success', orgAddForm);
   
    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    orgAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    orgAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (product, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = orgAddForm.attr('action');
            
            var data = new FormData();
            jQuery.each(jQuery('#fileToUpload')[0].files, function(i, file) {
                data.append('fileToUpload', file);
            });
            data.append('address',$('#address').val().trim());
            data.append('email',$('#email').val());
            data.append('website',$('#website').val());
            data.append('tanNumber',$('#tanNumber').val());
            data.append('ServiceTaxNumber',$('#ServiceTaxNumber').val());
            data.append('panNumber',$('#panNumber').val());
            data.append('gstNumber',$('#gstNumber').val());
            data.append('facebook',$('#facebook').val());
            data.append('twitter',$('#twitter').val());
            data.append('linkedIn',$('#linkedIn').val());
            data.append('youtube',$('#youtube').val());

            $.ajax({
                url: url,
                type: 'PUT',
                data: data,
                enctype: 'multipart/form-data',
                processData: false,  // tell jQuery not to process the data
                contentType: false,   // tell jQuery not to set contentType

                success: function(data) {
                    showAlertMessage('successMessage','updated');
                    //window.location.replace("/organisation/detail");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', orgAddForm).change(function () {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#changepwd').on('click', function(event){
        event.preventDefault();
        var url1 = getAPIUrl()+ '/api/change-password?token='+getToken();
        var data = {
            oldPassword: $('#current').val(),
            newPassword: $('#new').val()
        };
        $.ajax({
            url: url1,
            type: 'POST',
            data: JSON.stringify(data),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function(data) {
                //toastr.options.closeButton = true;
                //toastr.success("Password Changed Successfully.");
                //window.location = '/organisation/detail';
                showAlertMessage('successMessage','Password Changed Successfully');

            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
});
$().ready(function() { 
    var orgAddForm = $('.preference_add_form');
    var orgAddFormErrors = $('.alert-danger', orgAddForm);
    var orgAddFormSuccess = $('.alert-success', orgAddForm);
   
    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    orgAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    orgAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (product, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = getAPIUrl()+'/api/preference/?token='+getToken();
            if($('input[name=enableEmail]:checked').val() === '1'){
                var email = true
            }else{
                var email = false
            }
            if($('input[name=enableSms]:checked').val() === '1'){
                var sms = true
            }else{
                var sms = false
            }

            if($('input[name=enableEmailnew]:checked').val() === '1'){
                var nemail = true
            }else{
                var nemail = false
            }
            if($('input[name=enableSmsnew]:checked').val() === '1'){
                var nsms = true
            }else{
                var nsms = false
            }

            if($('input[name=enableEmailcancel]:checked').val() === '1'){
                var cemail = true
            }else{
                var cemail = false
            }
            if($('input[name=enableSmscancel]:checked').val() === '1'){
                var csms = true
            }else{
                var csms = false
            }

            if($('input[name=enableEmailconfirm]:checked').val() === '1'){
                var conemail = true
            }else{
                var conemail = false
            }
            if($('input[name=enableSmsconfirm]:checked').val() === '1'){
                var consms = true
            }else{
                var consms = false
            }


            if($('input[name=enableEmailre]:checked').val() === '1'){
                var remail = true
            }else{
                var remail = false
            }
            if($('input[name=enableSmsre]:checked').val() === '1'){
                var rsms = true
            }else{
                var rsms = false
            }

            var data = {
                emailConfig:{
                    enableEmail:email,
                    gmail: {
                        auth: {
                            pass:  $('#pwd').val() ,
                            user: $('#emailId').val(),
                        },
                        host:  $('#host').val() ,
                        port: $('#port').val() ,
                        secure: true
                    }
                },
                smsConfig:{
                    enableSms: sms,
                    smsProvider: {
                        authKey:  $('#authKey').val() ,
                        name:  'VERIFORMM' ,
                        senderId: $('#senderId').val()
                        }
                },
                lead:{
                    new:{
                        enableSms:nsms,
                        enableEmail:nemail
                    },
                    cancel:{
                        enableSms:csms,
                        enableEmail:cemail

                    },
                    reschedule:{
                        enableSms:rsms,
                        enableEmail:remail

                    },
                    confirm:{
                        enableSms:consms,
                        enableEmail:conemail

                    },
                    prefix:$('#leadPrefix').val(),
                    sequence:parseInt($('#leadseq').val())
                },
                employee:{
                    prefix:$('#empPrefix').val(),
                    sequence:parseInt($('#empseq').val())
                },

                invoice:{
                    prefix:$('#iPrefix').val(),
                    sequence:parseInt($('#iseq').val())
                },
                quotation:{
                    prefix:$('#qPrefix').val(),
                    sequence:parseInt($('#qseq').val())
                }

            };
            if($('#perId').val() !==''){
                data.id = $('#perId').val();
                var methos = 'PUT'
            }else{
                var methos = 'POST'
            }

            $.ajax({
                url: url,
                type: methos,
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','preferences updated');
                    window.location.replace("/organisation/preference");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', orgAddForm).change(function () {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
    var pUrl =  getAPIUrl()+'/api/preferences/?token='+getToken();
    $.ajax({
        url : pUrl,
        type: 'GET',
        success: function(data) {

            if (data.data) {
                $('#perId').val(data.data.id);
                $('#emailId').val(data.data.emailConfig.gmail.auth.user);
                $('#pwd').val(data.data.emailConfig.gmail.auth.pass);
                $('#port').val(data.data.emailConfig.gmail.port);
                $('#host').val(data.data.emailConfig.gmail.host);
                $('#authKey').val(data.data.smsConfig.smsProvider.authKey);
                $('#senderId').val(data.data.smsConfig.smsProvider.senderId);
                $('#empPrefix').val(data.data.employee.prefix);
                $('#empseq').val(data.data.employee.sequence);
                $('#leadPrefix').val(data.data.lead.prefix);
                $('#leadseq').val(data.data.lead.sequence);

                $('#iPrefix').val(data.data.invoice.prefix);
                $('#iseq').val(data.data.invoice.sequence);
                $('#qPrefix').val(data.data.quotation.prefix);
                $('#qseq').val(data.data.quotation.sequence);

                if(data.data.emailConfig.enableEmail===true){
                    $('input:radio[name=enableEmail][value=1]').click();

                }else{
                    $('input:radio[name=enableEmail][value=0]').click();
                }
                if(data.data.smsConfig.enableSms === true){
                    $('input:radio[name=enableSms][value=1]').click();

                }else{
                 $('input:radio[name=enableSms][value=0]').click();

                }


                if(data.data.lead.new.enableEmail === true){
                    $('input:radio[name=enableEmailnew][value=1]').click();
                }else{
                    $('input:radio[name=enableEmailnew][value=0]').click();
                }
                if(data.data.lead.new.enableSms ===true){
                    $('input:radio[name=enableSmsnew][value=1]').click();
                    
                }else{
                    $('input:radio[name=enableSmsnew][value=0]').click();
                }

                if(data.data.lead.cancel.enableEmail === true){
                    $('input:radio[name=enableEmailcancel][value=1]').click();
                }else{
                    $('input:radio[name=enableEmailcancel][value=0]').click();
                }

                if(data.data.lead.cancel.enableSms===true){
                    $('input:radio[name=enableSmscancel][value=1]').click();
                }else{
                    $('input:radio[name=enableSmscancel][value=0]').click();
                }


                if(data.data.lead.confirm.enableEmail === true){
                    $('input:radio[name=enableEmailconfirm][value=1]').click();
                }else{
                    $('input:radio[name=enableEmailconfirm][value=0]').click();
                }

                if(data.data.lead.confirm.enableSms===true){
                    $('input:radio[name=enableSmsconfirm][value=1]').click();
                }else{
                    $('input:radio[name=enableSmsconfirm][value=0]').click();
                }

                if(data.data.lead.reschedule.enableEmail ===true){
                    $('input:radio[name=enableEmailre][value=1]').click();
                }else{
                    $('input:radio[name=enableEmailre][value=0]').click();
                }
                if(data.data.lead.reschedule.enableSms === true){
                     $('input:radio[name=enableSmsre][value=1]').click();
                }else{
                   $('input:radio[name=enableSmsre][value=0]').click();
                }
                
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});

$('.price-button').on('click',function(event){
  var bal = parseInt($(this).attr('data-id'));
  var gst = parseInt(bal) * (18/100);
  var ntotal = bal + gst; 
  $('#rechargesms').modal('show');
  $('#charge').html(bal);
  $('#walleta').html($('#wallet').val());
  $('#gst').html(gst);
  $('#total').html(ntotal);
  $('#amount').val(ntotal);
});
$('#recharge').on('click',function(event){
  var url = 'https://api.zinetgo.com/api/recharge-sms?token='+$('#token').val();
  var data = {
        amount: $('#amount').val()
    };

    $.ajax({
       url: url,
        type: 'POST',
        dataType: "json",
        data: JSON.stringify(data),
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            showAlertMessage('successMessage','updated');
            window.location.replace("/sms-check");
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});

$().ready(function() { 
    var orgAddForm = $('.template_add_form');
    var orgAddFormErrors = $('.alert-danger', orgAddForm);
    var orgAddFormSuccess = $('.alert-success', orgAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    orgAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    orgAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
        },

        messages: { // custom messages for radio buttons and checkboxes
           
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (product, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            
            var url = getAPIUrl()+'/api/template/?token='+getToken();

            var data = {
                lead:{
                    new:{
                        html:$('#new').summernote('code').trim(),
                        subject:$('#subnew').val(),
                        text:$('#smstmpnew').val()
                    },
                    reschedule:{
                        html:$('#reschedule').summernote('code').trim(),
                        subject:$('#subre').val(),
                        text:$('#smstmprsdl').val()
                    },
                    cancel:{
                        html:$('#cancel').summernote('code').trim(),
                        subject:$('#subcan').val(),
                        text:$('#smstmpcnc').val()
                    },
                    confirm:{
                        html:$('#assign').summernote('code').trim(),
                        subject:$('#subassg').val(),
                        text:$('#smstmpassgn').val()
                    }
                },
                visitor:{
                    new:{
                        html:$('#newvisit').summernote('code').trim(),
                        subject:$('#subnewvisit').val(),
                        text:$('#smstmpnewvisit').val()
                    },
                    measure:{
                        html:$('#measure').summernote('code').trim(),
                        subject:$('#subnewmeasure').val(),
                        text:$('#smstmpmeasure').val()

                    },
                    quote:{
                        html:$('#quote').summernote('code').trim(),
                        subject:$('#subquote').val(),
                        text:$('#smstmpquote').val(),

                    }
                }
            };
            if($('#tempId').val() !==''){
                data.id = $('#tempId').val();
                var methos = 'PUT'
            }else{
                var methos = 'POST'
            }
            $.ajax({
                url: url,
                type: methos,
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','preferences updated');
                    window.location.replace("/organisation/templates");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', orgAddForm).change(function () {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        orgAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
    var pUrl =  getAPIUrl()+'/api/templates/?token='+getToken();
    $.ajax({
        url : pUrl,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#tempId').val(data.data.id);
                $('#new').summernote('code', data.data.lead.new.html);
                $('#smstmpnew').val(data.data.lead.new.text);
                $('#subnew').val(data.data.lead.new.subject);
                $('#reschedule').summernote('code',data.data.lead.reschedule.html);
                $('#smstmprsdl').val(data.data.lead.reschedule.text);
                $('#subre').val(data.data.lead.reschedule.subject);
                $('#assign').summernote('code',data.data.lead.confirm.html);
                $('#subassg').val(data.data.lead.confirm.subject);
                $('#smstmpassgn').val(data.data.lead.confirm.text);
                if(data.data.visitor){
                    $('#newvisit').summernote('code',data.data.visitor.new.html);
                    $('#subnewvisit').val(data.data.visitor.new.subject);
                    $('#smstmpnewvisit').val(data.data.visitor.new.text);

                    $('#measure').summernote('code',data.data.visitor.measure.html);
                    $('#subnewmeasure').val(data.data.visitor.measure.subject);
                    $('#smstmpmeasure').val(data.data.visitor.measure.text);

                    $('#quote').summernote('code',data.data.visitor.quote.html);
                    $('#subquote').val(data.data.visitor.quote.subject);
                    $('#smstmpquote').val(data.data.visitor.quote.text);

                    $('#uns').summernote('code',data.data.visitor.cancel.html);
                    $('#subuns').val(data.data.visitor.cancel.subject);
                    $('#smstmpuns').val(data.data.visitor.cancel.text);
                }
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
});
var filterWalletsListData = function(url, fromDate, toDate, customerId, type){
    
    //delete the table
    $("#wallets_list").remove();
    $("#wallets_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="wallets_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th> Date </th>'+
                    '<th> Deposite </th>'+
                    '<th> Widhrwal </th>'+
                    '<th> Opening Balance </th>'+
                    '<th> Closing Balance </th>'+
                    '<th> Remarks </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    if(customerId != null && customerId != -1){
        url = url + '&customerId=' + customerId;
    }
    
    getWalletsListData(url);
};


var getWalletsListData = function(url){
    App.blockUI({
        target: '#wallets_portlet',
        animate: true
    });
    window.setTimeout(function() {
        App.unblockUI('#wallets_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                $('#wallet').html(data.data[0]? data.data[0].portfolio.wallet: 0);
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr>'+
                            '<td>' + (row.createdOn != undefined ? moment(new Date(row.createdOn)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td class="text-center">' + (row.deposite != undefined ? row.deposite: 0) + ' </td>' +
                            '<td class="text-center">' + (row.withdrawl != undefined ? row.withdrawl:0) + ' </td>' +
                            '<td class="text-center">' + (row.beforeBal != undefined ? row.beforeBal: 0) + ' </td>' +
                            '<td class="text-center">' + (row.afterBal != undefined ? row.afterBal : 0) + ' </td>' +
                            '<td>' + (row.comments != undefined ? row.comments : '') + ' </td>' +
                        '</tr>'
                    );

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#wallets_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#wallets_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#wallets_portlet');
};

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
        $("#customerId").select2({allowClear: false});
    });

    getWalletsListData(buildUrl(getAPIUrl(),'wallets', getToken(), 2000));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterWalletsListData(
            buildUrl(getAPIUrl(),'wallets', getToken(), 2000), 
            fromDate, toDate, 
            $('#customerId').val()
        );

    });

    initDateRange(buildUrl(getAPIUrl(),'wallets', getToken(), 2000));
});

$('#recharge').on('click', function(e){
        e.preventDefault();
        var url = 'https://api.zinetgo.com/api/recharge?token='+$('#token').val();
        var data = {
            purpose: $('#uname').val(),
            amount: $('#amount').val(),
            redirect_url: 'https://www.zinetgo.com/wallet'
        };
        $.ajax({
            url: url,
            type: 'POST',
            data: JSON.stringify(data),
            crossDomain: true,
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            success: function(data) {
                toastr.options.closeButton = true;
                window.location.replace(data.result.payment_request.longurl);
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
$().ready(function() {
    var customerAddForm = $('#customer_add_form');
    var customerAddFormErrors = $('.alert-danger', customerAddForm);
    var customerAddFormSuccess = $('.alert-success', customerAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    customerAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    customerAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            email: {
                email: true
            },
            mobile: {
                // required: true,
                number: true,
                maxlength:10,
                minlength: 10
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            var url = customerAddForm.attr('action');

            var data = {
                mobile: $('#mobile').val() !== '' ? $('#mobile').val() : null,
                name: $('#name').val(),
                email: $('#email').val() !== '' ? $('#email').val() : null,
                address: $('#address').val() !== '' ? $('#address').val() : null
            };
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Customer added successfuly. You can view the customer details in <a href="/admin/customers"><i class="icon-emoticon-smile"></i> Customers</a>.','success','fa-check fa-lg');
                    window.location.replace("/admin/customers");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', customerAddForm).change(function () {
        customerAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        customerAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var custData = null;

    var updateDetails = function(){

        $('#displayName').html(custData.name);
        $('#displayMobile').html(custData.mobile);
        $('#displayEmail').html(custData.email);
        $('#displayAddress').html(custData.address);
    };
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                custData = data;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
         //populate edit form data
        $('#name').val(custData.name);
        $('#mobile').val(custData.mobile);
        $('#email').val(custData.email);
        $('#address').val(custData.address);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/admin/customers';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var customerAddForm = $('#customer_edit_form');
    var customerAddFormErrors = $('.alert-danger', customerAddForm);
    var customerAddFormSuccess = $('.alert-success', customerAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    customerAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    customerAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            email: {
                email: true
            },
            mobile: {
                // required: true,
                number: true,
                maxlength:10,
                minlength: 10
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(customerAddForm.attr('action'));
            var url = customerAddForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id: $('#customerId').val(),
                mobile: $('#mobile').val() !== '' ? $('#mobile').val() : null,
                name: $('#name').val(),
                email: $('#email').val() !== '' ? $('#email').val() : null,
                address: $('#address').val() !== '' ? $('#address').val() : null
            };
            // data.append('mobile', $('#mobile').val());
            // data.append('name', $('#name').val());
            // data.append('email', $('#email').val());
            // data.append('address', $('#address').val());
            //data.append('profilePic', $('#profilePic').val());

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });
            $.ajax({
                // url: url,
                // type: 'POST',
                // //dataType: "json"
                // cache: false,
                // contentType: false,
                // processData: false,
                // //type: 'POST',
                // data: data,//JSON.stringify(data),
                // //contentType: false,//"application/json; charset=utf-8",
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Customer updated successfuly.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                    custData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', customerAddForm).change(function () {
        customerAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        customerAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterCustomerData = function(url, name, mobile){
    //delete the table
    $("#customers").remove();
    $("#customers_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="customers">'+
            '<thead>'+
                //'<tr class="uppercase">'+
                '<tr class="odd gradeX">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#customers .checkboxes"/> </th>'+
                    '<th> Mobile </th>'+
                    '<th> Name </th>'+
                    '<th> Email </th>'+
                    '<th> Address </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    getCustomerData(url);
};
var goToCustomerDetail = function(customerId){
    window.location = '/admin/customers/' + customerId;
};

var getCustomerData = function(url){
    App.blockUI({
        target: '#customers_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#customers_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToCustomerDetail("'+row.id +'")> ' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td class="clickable" onclick=goToCustomerDetail("'+row.id +'")> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.email != undefined ? row.email: '') + ' </td>' +
                            '<td> ' + (row.address != undefined ? row.address: '') + ' </td>' +
                        '</tr>'
                    );
                }

                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#customers');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#customers_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#customers_portlet');
};


$('.btn-delete').on('click',function(event){
    var ids = new Array();

    $('.checkboxes:checked').each(function(){
      ids.push($(this).attr('data-id'));//this is the checked checkbox
    });

    var idText = ids.toString();
    var url = getAPIUrl() + '/api/customer?token='+getToken() + '&ids=' + idText ;
   
    $.ajax({
        url: url,
        type: 'DELETE',
        success: function(data) {
            if (data && data.status) {
                //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                window.location = '/admin/customers';
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

});

getCustomerData(buildUrl(getAPIUrl(),'customers', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    var fromDate = moment(dates[0], "MMMM D, YYYY");
    var toDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();

    filterCustomerData(buildUrl(getAPIUrl(),'customers', getToken(), 3000), $('#name').val(), $('#mobile').val());

});

initDateRange(null);
$().ready(function() {
    var employeeAddForm = $('#employee_add_form');
    var employeeAddFormErrors = $('.alert-danger', employeeAddForm);
    var employeeAddFormSuccess = $('.alert-success', employeeAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    employeeAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    employeeAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            type: {
                required: true
            },
            mobile: {
                required: true,
                number: true,
                maxlength:10,
                minlength: 10
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(employeeAddForm.attr('action'));
            var url = employeeAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                mobile: $('#mobile').val(),
                email: $('#email').val(),
                type: $('#type').val(),
                departmentId: $('#departmentId').val(),
                designationId: $('#designationId').val(),
                startDate: getDate($('#startDate').val()),
                profilePicture: $('#profilePicture').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Employee added successfuly. You can view the employee details in <a href="/employee"><i class="icon-users"></i> Employees</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', employeeAddForm).change(function () {
        employeeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        employeeAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#startDate').val(moment().format('DD-MM-YYYY'));
    populateEmpDesignation(buildUrl(getAPIUrl(),'designations', getToken(), 3000),false);
    populateEmpDepartment(buildUrl(getAPIUrl(),'departments', getToken(), 3000));
    addEmpDepartment(buildUrl(getAPIUrl(),'department', getToken(), null),buildUrl(getAPIUrl(),'departments', getToken(), 3000));
    addEmpDesignation(buildUrl(getAPIUrl(),'designation', getToken(), null),buildUrl(getAPIUrl(),'designations', getToken(), 3000));
});
$().ready(function() {
    var employeeAddForm = $('#employee_add_form');
    var employeeAddFormErrors = $('.alert-danger', employeeAddForm);
    var employeeAddFormSuccess = $('.alert-success', employeeAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            //alert(JSON.stringify(data));
            // showAlertMessage('successMessage','Event added successfuly. You can view the employee details in <a href="/wa/employee"><i class="fa fa-cubes"></i> employee</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/employee/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#empId').html(data.empId);
                $('#joingingDate').html(moment(new Date(data.joingingDate)).format("DD-MMM-YYYY"));
                $('#name').html(data.name);
                $('#mobile').html(data.mobile);
                $('#employementType').html(data.employmentType);
                $('.lid').html(data.empId);
                if(data.designation && data.designation.length>0){
                    $('#designation').html(data.designation.name);
                }else{
                    $('#designation').html('');
                }
                if(data.department && data.department.length>0){
                   $('#department').html(data.department.name);
                }else{
                    $('#department').html('');
                }
                if(data.productInventory && data.productInventory.length>0){
                    for(var i=0; i< data.productInventory.length; i++){
                        $('#cData').append(
                            '<tr>'+
                                '<td>'+
                                    '<a href="javascript:;">'+ data.productInventory[i].productObj.name+'</a>'+
                                '</td>'+
                                '<td>'+ data.productInventory[i].productObj.price+ '</td>'+
                                '<td>'+data.productInventory[i].quantity+'</td>'+
                            '</tr>'
                        );
                    }
                }
                if(data.inventorylog && data.inventorylog.length >0){
                    for(var i=0; i < data.inventorylog.length; i++){
                        $('#iData').append(
                            '<tr>'+
                                '<td>'+moment(new Date(data.inventorylog[i].createdOn)).format("MMMM Do YYYY,h:mm:ss a")+'</td>'+
                                '<td class="text-center">'+ data.inventorylog[i].productName+ '</td>'+
                                '<td class="text-center">'+ data.inventorylog[i].quantity+ '</td>'+
                                '<td class="text-center">'+ data.inventorylog[i].comment+ '</td>'+
                                '<td class="text-center">'+data.inventorylog[i].before+'</td>'+
                                '<td class="text-center">'+data.inventorylog[i].after+'</td>'+
                            '</tr>'
                        );
                    }
                }
            }
        },
        
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


    $('.btn-delete').on('click',function(event) {
        var url = $('#apiUrl').val() + '/api/employee/' + $('#employeeId').val() + '?token=' + $('#token').val();
        $.ajax({
            url: url,
            type: 'DELETE',
            success: function (data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/employee';
                }
            },
            error: function (data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                return false;
            }
        });
    });
   
});
$('.btn-assign').on('click',function(event){
    var employeeId = $('#employeeId').val();
        data = {
            id: $(this).data('empId'),
            employeeId: employeeId
        };
    $('#mEmpId').val(employeeId);
    populateProducts(buildUrl($('#apiUrl').val(),'products', $('#token').val(), '30'),false, data.productId);
      $("#productId").select2({
          placeholder: "Select an product",
          width: "250%"
      });
    $('.btn-assign').on('show.bs.modal','#assignToModal', function () {
    });
});    

$('#assignInvent').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+ $('#productId').val()+'/inventory?token='+  $('#token').val();
    var data = {
        productId: $('#productId').val(),
        quantity: parseInt($('#mQuantity').val()),
        employeeId: $('#mEmpId').val()
    };
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/employee';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});
var filterEmployeesListData = function(url, fromDate, toDate, customerId, type){
    //delete the table
    $("#employee_list").remove();
    $("#employee_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="employee_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#employee_list .checkboxes" /> </th>'+
                    
                    '<th> EMP ID </th>'+
                    '<th> Name </th>'+
                    '<th> Mobile </th>'+
                    '<th> Joining Date </th>'+
                    '<th> Department </th>'+
                    '<th> Designation </th>'+
                    '<th> Job Type </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    
    getEmployeesListData(url);
};

var goToEmployees = function(employeeId){
    window.location = '/employee/' + employeeId;
};

var getEmployeesListData = function(url){
    App.blockUI({
        target: '#employee_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#employee_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+ // onclick=goToEmployees("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id+'" data-name="Customer: '+(row.customer != undefined ? row.customer.name: '') +
                            '" data-mobile="Mobile: '+ (row.customer != undefined ? row.customer.mobile: '') +
                            '" data-empid="'+ (row.employee != undefined ? row.employee.mobile: '') +
                            '" data-price="Price: '+ (row.price != undefined ? row.price: 0) +
                            '" data-service="'+ (row.item != undefined ? row.item.name : '') +
                            '" data-jdate="Date: '+ (row.createdOn != undefined ? moment(new Date(row.dueDate)).format("DD-MMM-YYYY") : '') +
                            '" data-address="Address: '+ (row.address != undefined ? row.address : '') +'" /></td>' +
                            
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.empId != undefined ? row.empId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.startDate != undefined ? moment(new Date(row.startDate)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.department != undefined ? row.department.name : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.designation != undefined ? row.designation.name : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.employmentType != undefined ? row.employmentType: '') + ' </td>' +
                        '</tr>'
                    );
                    // $("#tableData > tr").hover(function() {
                    //     $(this).css('cursor','pointer');
                    // }, function() {
                    //     $(this).css('cursor','auto');
                    // });

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                        if($('.checkboxes:checked').length >= 1){
                            $('.btn-delete').removeClass('hidden');
                            
                        }else{
                            $('.btn-delete').addClass('hidden');
                        }
                    });

                    $('.checkboxes').change(function() {
                        if($('.checkboxes:checked').length == 1){
                            if(parseInt($('#inv').val()) >-1){
                                $('.btn-assign').removeClass('hidden');
                            } 
                        }else{
                            $('.btn-assign').addClass('hidden');
                        }
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#employee_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#employee_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#employee_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/employee/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/employee';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});

$('.btn-edit').on('click',function(event){
    var checkboxValues = [];
    $('.checkboxes:checked').map(function() {
        checkboxValues.push($(this).data('id'));
    });
    if(checkboxValues.length === 1){
        window.location = '/employee/'+  checkboxValues[0] + '/edit';
    }
});

$(document).on('show.bs.modal','#assignToModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        var employeeId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            productId: $(this).data('productId')
        };
    });
  $('#mEmpId').val(data.id);
  populateProducts(buildUrl($('#apiUrl').val(),'products', $('#token').val(), '30'),false, data.productId);
  $("#productId").select2({
      placeholder: "Select an product",
      width: "100%"
  });

});

$('#assignInvent').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+ $('#productId').val()+'/inventory?token='+  $('#token').val();
    var data = {
        productId: $('#productId').val(),
        quantity: parseInt($('#mQuantity').val()),
        employeeId: $('#mEmpId').val()
    };
    
    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/employee';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});



addEmpDepartment(buildUrl(getAPIUrl(),'department', getToken(), null),buildUrl(getAPIUrl(),'departments', getToken(), 3000));
addEmpDesignation(buildUrl(getAPIUrl(),'designation', getToken(), null),buildUrl(getAPIUrl(),'designations', getToken(), 3000));
var filterEmployeesListData = function(url, fromDate, toDate, customerId, type){
    //delete the table
    $("#employee_list").remove();
    $("#employee_list_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="employee_list">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#employee_list .checkboxes" /> </th>'+
                    
                    '<th> EMP ID </th>'+
                    '<th> Name </th>'+
                    '<th> Mobile </th>'+
                    '<th> Joining Date </th>'+
                    '<th> Department </th>'+
                    '<th> Designation </th>'+
                    '<th> Job Type </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );
    if(fromDate != null){
        url = url + '&fromDate=' + fromDate;
    }
    if(toDate != null){
        url = url + '&toDate=' + toDate;
    }
    
    getEmployeesListData(url);
};

var goToEmployees = function(employeeId){
    window.location = '/employee/' + employeeId;
};

var getEmployeesListData = function(url){
    App.blockUI({
        target: '#employee_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#employee_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+ // onclick=goToEmployees("'+row.id +'")>'+
                            '<td><input type="checkbox" class="checkboxes" value="1" ' +
                            'data-id="'+row.id+'" data-name="Customer: '+(row.customer != undefined ? row.customer.name: '') +
                            '" data-mobile="Mobile: '+ (row.customer != undefined ? row.customer.mobile: '') +
                            '" data-empid="'+ (row.employee != undefined ? row.employee.mobile: '') +
                            '" data-price="Price: '+ (row.price != undefined ? row.price: 0) +
                            '" data-service="'+ (row.item != undefined ? row.item.name : '') +
                            '" data-jdate="Date: '+ (row.createdOn != undefined ? moment(new Date(row.dueDate)).format("DD-MMM-YYYY") : '') +
                            '" data-address="Address: '+ (row.address != undefined ? row.address : '') +'" /></td>' +
                            
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.empId != undefined ? row.empId: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.startDate != undefined ? moment(new Date(row.startDate)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.department != undefined ? row.department.name : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.designation != undefined ? row.designation.name : '') + ' </td>' +
                            '<td class="clickable" onclick=goToEmployees("'+row.id +'")>' + (row.employmentType != undefined ? row.employmentType: '') + ' </td>' +
                        '</tr>'
                    );
                    // $("#tableData > tr").hover(function() {
                    //     $(this).css('cursor','pointer');
                    // }, function() {
                    //     $(this).css('cursor','auto');
                    // });

                    $("#tableData > tr > td.clickable").hover(function() {
                        $(this).css('cursor','pointer');
                    }, function() {
                        $(this).css('cursor','auto');
                    });

                    $('.checkboxes').change(function() {
                        if($('.checkboxes:checked').length >= 1){
                            $('.btn-delete').removeClass('hidden');
                            
                        }else{
                            $('.btn-delete').addClass('hidden');
                        }
                    });

                    $('.checkboxes').change(function() {
                        if($('.checkboxes:checked').length == 1){
                            if(parseInt($('#inv').val()) >-1){
                                $('.btn-assign').removeClass('hidden');
                            } 
                        }else{
                            $('.btn-assign').addClass('hidden');
                        }
                    });
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#employee_list');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            //[1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#employee_list_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#employee_portlet');
};

$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/employee/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/employee';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});

$('.btn-edit').on('click',function(event){
    var checkboxValues = [];
    $('.checkboxes:checked').map(function() {
        checkboxValues.push($(this).data('id'));
    });
    if(checkboxValues.length === 1){
        window.location = '/employee/'+  checkboxValues[0] + '/edit';
    }
});

$(document).on('show.bs.modal','#assignToModal', function () {
  var data = null;
  $('.checkboxes:checked').each(function(){
        var employeeId = $(this).data('id');
        data = {
            id: $(this).data('id'),
            productId: $(this).data('productId')
        };
    });
  $('#mEmpId').val(data.id);
  populateProducts(buildUrl($('#apiUrl').val(),'products', $('#token').val(), '30'),false, data.productId);
  $("#productId").select2({
      placeholder: "Select an product",
      width: "100%"
  });

});

$('#assignInvent').on('click',function(event){
    event.preventDefault();
    var url = $('#apiUrl').val()+ '/api/product/'+ $('#productId').val()+'/inventory?token='+  $('#token').val();
    var data = {
        productId: $('#productId').val(),
        quantity: parseInt($('#mQuantity').val()),
        employeeId: $('#mEmpId').val()
    };


    $.ajax({
        url: url,
        type: 'POST',
        data: JSON.stringify(data),
        dataType: "json",
        contentType: "application/json; charset=utf-8",
        success: function(data) {
            toastr.options.closeButton = true;
            toastr.success("Lead confirmed successfully.");
            window.location = '/employee';

        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            return false;
        }
    });
});



$('.filter-btn').on('click', function(){
    $('.table-filters').toggleClass("hide");
    $("#customerId").select2({allowClear: false});
});

getEmployeesListData(buildUrl(getAPIUrl(),'employees', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    // var str = $('#reportrange span').html();
    // var dates = str.split(" - "); 
    // var fromDate = moment(dates[0], "MMMM D, YYYY");
    // var toDate = moment(dates[1], "MMMM D, YYYY");

    var fromDate = toDate = null;
    event.preventDefault();

    filterEmployeesListData(
        buildUrl(getAPIUrl(),'employees', getToken(), 3000), 
        fromDate, toDate, 
        $('#customerId').val()
    );

});

//sendSMS(buildUrl(getAPIUrl(),'bulksms', getToken(), null),null);

initDateRange(buildUrl(getAPIUrl(),'employees', getToken(), 3000));

$().ready(function() {
    var vendorAddForm = $('#vendor_add_form');
    var vendorAddFormErrors = $('.alert-danger', vendorAddForm);
    var vendorAddFormSuccess = $('.alert-success', vendorAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    vendorAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    vendorAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            email: {
                required: true,
                email: true
            },
            mobile: {
                required: true,
                number: true,
                maxlength:10,
                minlength: 10
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            amount: {
                //required: "Please enter amount."
            },
            type: {
                //required: "Please select a type"
            }
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(vendorAddForm.attr('action'));
            var url = vendorAddForm.attr('action');
            var data = {
                mobile: $('#mobile').val(),
                name: $('#name').val(),
                email: $('#email').val(),
                address: $('#address').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Vendor added successfuly. You can view the vendor details in <a href="/vendors"><i class="icon-grid"></i> Vendors</a>.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', vendorAddForm).change(function () {
        vendorAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        vendorAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
var filterVendorData = function(url, name, mobile){
    //delete the table
    $("#vendors").remove();
    $("#vendors_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="vendors">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#vendors .checkboxes" /> </th>'+
                    '<th> Mobile </th>'+
                    '<th> Name </th>'+
                    '<th> Email </th>'+
                    '<th> Address </th>'+
                    '<th> Description </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );

    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(vendorId != null && vendorId!= -1){
    //     url = url + '&vendorId=' + vendorId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getVendorData(url);
};

var getVendorData = function(url){
    App.blockUI({
        target: '#vendors_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#vendors_portlet');
    }, 500);
    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" /></td>' +
                            '<td> ' + (row.mobile != undefined ? row.mobile: '') + ' </td>' +
                            '<td> ' + (row.name != undefined ? row.name: '') + ' </td>' +
                            '<td> ' + (row.email != undefined ? row.email: '') + ' </td>' +
                            '<td> ' + (row.address != undefined ? row.address: '') + ' </td>' +
                            '<td> ' + (row.description != undefined ? row.description: '') + ' </td>' +
                        '</tr>'
                    );
                }
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#vendors');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#vendors_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#vendors_portlet');
};

getVendorData(buildUrl(getAPIUrl(),'vendors', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    var fromDate = moment(dates[0], "MMMM D, YYYY");
    var toDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();

    filterVendorData(buildUrl(getAPIUrl(),'vendors', getToken(), 3000), $('#name').val(), $('#mobile').val());
});

initDateRange(null);
$().ready(function() {
    var visitorAddForm = $('#visitor_add_form');
    var visitorAddFormErrors = $('.alert-danger', visitorAddForm);
    var visitorAddFormSuccess = $('.alert-success', visitorAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    visitorAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    visitorAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            tDate: {
                required: true
            },
            name: {
                required: true
            },
            mobile: {
                required: true,
                number: true,
                maxlength:10,
                minlength: 10
            },
            email: {
                email: true
            },
            employeeId: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(visitorAddForm.attr('action'));
            var url = visitorAddForm.attr('action');
            var data = {
                vDate: getDate($('#vDate').val()),
                mobile: $('#mobile').val(),
                name: $('#name').val(),
                email: $('#email').val(),
                employeeId: $('#employeeId').val(),
                address: $('#address').val(),
                salesStage: $('#salesStage').val(),
                fDate: getDate($('#fDate').val()),
                description: $('#description').val()
            };

            
    
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //window.location.replace("/sales-ledger");
                    if($("#sendSms").is(':checked')){
                        var getAPIUrl = $('#apiUrl').val()+ '/api/visitor/sendsms/'+data.result.id+'?token='+$('#token').val();
                        
                        $.ajax({
                            url: getAPIUrl,
                            type: 'GET',
                            success: function(data) {
                                showAlertMessage('successMessage','Visitor added successfuly. You can view the visitor details in <a href="/visitors"><i class="icon-eye"></i> Visitors</a>.','success','fa-check fa-lg');
                            },
                            error: function(data) {
                                showAlertMessage("Something went wrong. Please try again with all the fields.");
                            }
                        });
                    }else{
                        showAlertMessage('successMessage','Visitor added successfuly. You can view the visitor details in <a href="/visitors"><i class="icon-eye"></i> Visitors</a>.','success','fa-check fa-lg');
                    }  
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });


     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', visitorAddForm).change(function () {
        visitorAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        visitorAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#vDate').val(moment().format('DD-MM-YYYY'));
    populateEmployees(buildUrl(getAPIUrl(),'employees',getToken(), 3000),false);
    //populateEmpDesignation(buildUrl(getAPIUrl(),'designations', getToken() 3000),false);
     addEmployee(buildUrl(getAPIUrl(),'employee',getToken(), null),buildUrl(getAPIUrl(),'employees',getToken(), 3000));
    //addEmpDesignation(buildUrl(getAPIUrl(),'designation', getToken() null),buildUrl(getAPIUrl(),'designations', getToken() 3000));
    $('#salesStage').change(function() {
        if ($(this).val() === 'confirmed' || $(this).val() === 'unsuccessful') {
            $('#follow').addClass('hide');
            $('#sms').addClass('hide');
            
        }else{
            $('#follow').removeClass('hide');
            $('#sms').removeClass('hide');
        }
    });
});
var filterVisitorData = function(url,fromDate, toDate,  name, mobile){
    //delete the table
    $("#visitors").remove();
    $("#visitors_wrapper").remove();
    var uuu = '/visitors'
    if(fromDate != null){
        uuu = uuu + '?fromDate=' + fromDate;
    }
    if(toDate != null){
        uuu = uuu + '&toDate=' + toDate;
    }
    uuu = uuu + '&pno=' + $('#pno').val() + '&psize=' + $('#psize').val();
    if($('#option').val() !=''){
        uuu = uuu +'&q='+$('#option').val();
    }
    
    window.location = uuu;
};

var initializeTable = function(){
    var table = $('#visitors');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#visitors_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#visitors_portlet');
};

$().ready(function() {
   
    $('.filter-btn').on('click', function(){
        $('.table-filters').toggleClass("hide");
        $("#customerId").select2({allowClear: false});
    });
    $('#searched').on('click', function(){
        var npath ='/visitors';
       var psize = $("#psize").val();
       var pno = $('#pno').val();

        if($("#from").val() !="" && $("#to").val() !=""){
          npath =npath+'?q='+$('#query').val()+'&fromDate='+$("#from").val()+'&toDate='+$("#to").val()+'&pno='+ pno +'&psize='+ psize;
        }else{
         npath =npath+'?q='+$('#query').val()+'&pno='+ pno +'&psize='+ psize;
        }
        window.location = npath;
    });


    //filterVisitorData(buildUrl(getAPIUrl(),'leads', getToken(), 200));

    $('#filter-submit').on('click', function(event){
        var fromDate = toDate = null;
        event.preventDefault();

        filterVisitorData(
            buildUrl(getAPIUrl(),'visitors', getToken(), 200), 
            fromDate, toDate, 
            $('#customerId').val()
        );

    });
    initDateRange(buildUrl(getAPIUrl(),'visitors', getToken(), 200));
    //filterVisitorData(buildUrl(getAPIUrl(),'leads', getToken(), 200));
});


$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = getAPIUrl() + '/api/visitor/'+ $(this).attr('data-id') +'?token='+ getToken();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "Item has been deleted successfully.", "success");
                            window.location = '/visitors';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});
initDateRange(null);

$(document).ready(function() {
  $('.pagination').pagination({
      items: $('#total').val(),
      itemsOnPage: $('#psize').val(),
      currentPage: $('#pno').val(),
      cssStyle: 'light-theme',
      onPageClick: function(pageNumber){
          //var sortby = $j("#sortby").val();
          //alert(pageNumber);
          var psize = $("#psize").val();
          var pno = pageNumber;
          var path = window.location.pathname;
         // window.location.href; // Returns full URL
         var npath ='/visitors';
         if($("#from").val() !="" && $("#to").val() !=""){
             npath =npath+'?fromDate='+$("#from").val()+'&toDate='+$("#to").val()+'&pno='+ pageNumber +'&psize='+ psize;
         }else{
             npath =npath+'?pno='+ pageNumber +'&psize='+ psize;
            }
            if($('#option').val() !=''){
                npath = npath +'&q='+$('#option').val();
            }
          window.location = npath;
        }
    });
  $('.checkboxes').change(function() {
        if($('.checkboxes:checked').length >= 1){
            $('.btn-delete').removeClass('hidden');
        }else{
            $('.btn-delete').addClass('hidden');
        }
    });

  $("#tableData > tr > td.clickable").hover(function() {
            $(this).css('cursor','pointer');
        }, function() {
            $(this).css('cursor','auto');
    });

  if($('#psize').val()==25){
    $('.page-size').html('25');

  }else if($('#psize').val()==50){
    $('.page-size').html('50');

  }else if($('#psize').val()==100){
     $('.page-size').html('100');

  }else{
    $('.page-size').html('10');
  }
});
$().ready(function() {
    var visitorsAddForm = $('#visitors_add_form');
    var visitorsAddFormErrors = $('.alert-danger', visitorsAddForm);
    var visitorsAddFormSuccess = $('.alert-success', visitorsAddForm);

    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            // showAlertMessage('successMessage','Event added successfuly. You can view the visitors details in <a href="/wa/visitors"><i class="fa fa-cubes"></i> visitors</a>.','success','fa-check fa-lg');
            // window.location.replace("/wa/visitors/"+ data.result.id + "/upload-photos");
            if (data) {
                $('#fDate').html(moment(new Date(data.fDate)).format("DD-MMM-YYYY") || '');
                $('#vDate').html(moment(new Date(data.vDate)).format("DD-MMM-YYYY"));
                $('#name').html(data.name);
                $('#mobile').html(data.mobile);
                $('#email').html(data.email);
                $('#employee').html(data.employee.name +'('+data.employee.mobile+')');
                $('#address').html(data.address);
                $('#salesStage').html(data.salesStage);
                $('#description').html(data.description);
                $('.lid').html(data.id);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


     $("#delete").on('click',function(event){

        swal({
            title: "Are you sure to delete this?",
            text: "You will not be able to recover this item once deleted!",
            type: "info",
            showCancelButton: true,
            closeOnConfirm: false,
            showLoaderOnConfirm: true
        }, function () {
            var url = getAPIUrl() + '/api/visitor/' + $('#visitorId').val() + '?token=' + getToken();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                        swal("Deleted!", "visitor has been deleted successfully.", "success");
                        window.location = '/visitors';
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
    });
   
});
$().ready(function() {
    var visitorsAddForm = $('#visitors_add_form');
    var visitorsAddFormErrors = $('.alert-danger', visitorsAddForm);
    var visitorsAddFormSuccess = $('.alert-success', visitorsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    visitorsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    visitorsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            customerId: {
                required: true
            },
            itemId: {
                required: true
            },
            city: {
                required: true
            },
            address: {
                required: true
            },
            visitorStatus: {
                required: true
            },
            dueDate:{
                required: true
            },
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(visitorsAddForm.attr('action'));
            var url = visitorsAddForm.attr('action');
            var data = {
                vDate: getDate($('#vDate').val()),
                mobile: $('#mobile').val(),
                name: $('#name').val(),
                email: $('#email').val(),
                employeeId: $('#employeeId').val(),
                address: $('#address').val(),
                salesStage: $('#salesStage').val(),
                fDate: getDate($('#fDate').val()),
                description: $('#description').val()
            };

            var stage = $('#salesStage').val();
            
            var sUrl ='';
            if(stage === 'confirmed'){
                sUrl = getAPIUrl()+ '/api/customer?token='+getToken();
                sType = 'POST'
            }else{
                sUrl = url;
                sType = 'PUT';
            }
            $.ajax({
                url: sUrl,
                type: sType,
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    if($("#sendSms").is(':checked')){
                        var getAPIUrl = $('#apiUrl').val()+ '/api/visitor/sendsms/'+data.result.id+'?token='+$('#token').val();
                        
                        $.ajax({
                            url: getAPIUrl,
                            type: 'GET',
                            success: function(data) {
                                showAlertMessage('successMessage','Visitor added successfuly. You can view the visitor details in <a href="/visitors"><i class="icon-eye"></i> Visitors</a>.','success','fa-check fa-lg');
                            },
                            error: function(data) {
                                showAlertMessage("Something went wrong. Please try again with all the fields.");
                            }
                        });
                    }else{
                        showAlertMessage('successMessage','Visitor added successfuly. You can view the visitor details in <a href="/visitors"><i class="icon-eye"></i> Visitors</a>.','success','fa-check fa-lg');
                    } 
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', visitorsAddForm).change(function () {
        visitorsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        visitorsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : visitorsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = getToken();
                var sUrl = getAPIUrl();
                
                
                populateEmployees(buildUrl(sUrl,'employees', token, '3000'),false, data.employeeId);

                addEmployee(buildUrl(sUrl,'employee', token, null),buildUrl(sUrl,'employees', token, '3000'));


                $('.lid').html(data.id);
                $('#fDate').val(moment(new Date(data.fDate)).format('DD-MM-YYYY'));
                $('#vDate').val(moment(new Date(data.vDate)).format('DD-MM-YYYY'));
                $('#mobile').val(data.mobile),
                $('#name').val(data.name),
                $('#email').val(data.email),
                $('#employeeId').val(data.employeeId),
                $('#address').val(data.address),
                $('#description').val(data.description)
                $('#salesStage').val(data.salesStage);
                $("#salesStage").select2({
                    value: data.salesStage
                });
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $('#salesStage').change(function() {
        if ($(this).val() === 'confirmed' || $(this).val() === 'unsuccessful') {
            $('#follow').addClass('hide');
            $('#sms').addClass('hide');
            
        }else{
            $('#follow').removeClass('hide');
            $('#sms').removeClass('hide');
        }
    });


});
$().ready(function() {
    var couponAddForm = $('#coupon_add_form');
    var couponAddFormErrors = $('.alert-danger', couponAddForm);
    var couponAddFormSuccess = $('.alert-success', couponAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    couponAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    couponAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            validTill:{
                required: true
            },
            name: {
                required: true
            },
            discountType: {
                required: true
            },
            couponType: {
                required: true
            },
            couponStatus: {
                required: true
            },
            minOrder: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(couponAddForm.attr('action'));
            var url = couponAddForm.attr('action');
            var data = {
                couponCode: $('#name').val(),
                couponType: $('#couponType').val(),
                discountAmount: parseInt($('#discountAmount').val()),
                discountType: $('#discountType').val(),
                minOrder: parseInt($('#minOrder').val()),
                validTill: getDate($('#validTill').val()),
                description: $('#description').val(),
                termsAndCondition: $('#terms').val()
            };
            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Coupon added successfuly. You can view the coupon details in <a href="/coupons"><i class="icon-basket-loaded"></i> Coupons</a>.','success','fa-check fa-lg');
                    
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', couponAddForm).change(function () {
        couponAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        couponAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });

    $('#orderDate').val(moment().format('DD-MM-YYYY'));
});

$().ready(function() {
    var couponData = null;

    var updateDetails = function(){

        $('#displayCouponName').html(couponData.couponCode);
        $('#displayCouponType').html(couponData.couponType);
        $('#displayValidTill').html(moment(new Date(couponData.validTill)).format("DD-MMM-YYYY"));
        $('#displayMinimumOrder').html(couponData.minOrder);
        $('#displayDiscountType').html(couponData.discountType);
        $('#displayAmount').html(couponData.discountPercentage != undefined ? couponData.discountAmount: couponData.discountAmount);
        $('#displayterms').html(couponData.termsAndCondition);
        $('#displayDescription').html(couponData.description);
    };  
    
    $.ajax({
        url: $('#url').val(),
        type: 'GET',
        success: function(data) {
            if (data) {
                couponData = data.coupon;
                updateDetails();
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });

    $("#showEdit").on('click',function(event){
        //populate edit form data
    
        $('#name').val(couponData.coupon.name);
        $('#couponCategoryId').val(couponData.coupon.category.name);
        $('#couponType').val(couponData.coupon.type);
        $('#couponUnit').val(couponData.coupon.unit);
        $('#price').val(couponData.coupon.price);
        $('#description').val(couponData.coupon.description);

        $('#detail').addClass('hidden');
        $('#edit').removeClass('hidden');
    });

    $("#cancelEdit").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#showDetail").on('click',function(event){
        $('#detail').removeClass('hidden');
        $('#edit').addClass('hidden');
    });

    $("#delete").on('click',function(event){
        $.ajax({
            url: $('#url').val(),
            type: 'DELETE',
            success: function(data) {
                if (data && data.status) {
                    //showAlertMessage('successMessage','Customer deleted successfuly.','success','fa-check fa-lg');
                    window.location = '/coupons';
                }
            },
            error: function(data) {
                showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
            }
        });
    });

    // $("#updateCustomer").on('click',function(event){

    // });

    var couponsEditForm = $('#coupons_edit_form');
    var couponsEditFormErrors = $('.alert-danger', couponsEditForm);
    var couponsEditFormSuccess = $('.alert-success', couponsEditForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    couponsEditForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    couponsEditForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
           name: {
                required: true
            },
            categoryId: {
                required: true
            },
            type: {
                required: true
            }
        },

        messages: { // custom messages for radio buttons and checkboxes
            
        },

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(couponsEditForm.attr('action'));
            var url = couponsEditForm.attr('action');

            // var data = new FormData();
            // jQuery.each(jQuery('#profilePic')[0].files, function(i, file) {
            //     data.append('file-'+i, file);
            // });

            var data = {
                id:$('#couponId').val(),
                name: $('#name').val(),
                categoryId: $('#couponCategoryId').val(),
                type: $('#couponType').val(),
                unit: $('#couponUnit').val(),
                price: $('#price').val(),
                description: $('#description').val()
            };

            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data1) {
                    showAlertMessage('successMessage','Coupons updated successfuly.','success','fa-check fa-lg');
                    window.location.replace("/coupons");
                    couponData = data1.result;

                    updateDetails();

                    $('#detail').removeClass('hidden');
                    $('#edit').addClass('hidden');
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', couponsEditForm).change(function () {
        couponsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        couponsEditForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});
$().ready(function() {
    var couponsAddForm = $('#coupons_add_form');
    var couponsAddFormErrors = $('.alert-danger', couponsAddForm);
    var couponsAddFormSuccess = $('.alert-success', couponsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    couponsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })


    couponsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            couponName: {
                required: true
            },
            couponType: {
                required: true
            },
            validTill: {
                required: true
            },
            discountType: {
                required: true
            },
            minOrder: {
                required: true
            },
            amount:{
                required: true
            },
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) {
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) {
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) {
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) {
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
            $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
            // alert(couponsAddForm.attr('action'));
            var url = couponsAddForm.attr('action');
            var data = {
                couponCode: $('#couponName').val(),
                couponType: $('#couponType').val(),
                validTill: getDate($('#validTill').val()),
                discountType: $('#discountType').val(),
                minOrder: parseInt($('#minOrder').val()),
                termsAndCondition: $('#terms').val(),
                discountAmount:  parseInt($('#amount').val()),
                description: $('#description').val()
            };
            $.ajax({
                url: url,
                type: 'PUT',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    //showAlertMessage('successMessage','coupons added successfuly. You can view the coupons details in <a href="/couponss"><i class="icon-basket-loaded"></i> couponss</a>.','success','fa-check fa-lg');
                    window.location.replace("/coupons/"+data.result.id);
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

    //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', couponsAddForm).change(function () {
        couponsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        couponsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });


    $.ajax({
       // url: $('#url').val(),
        url : couponsAddForm.attr('action'),
        type: 'GET',
        success: function(data) {
            if (data) {
                var token = $('#token').val();
                var sUrl = $('#apiUrl').val();

                $('.lid').html(data.coupon.couponCode);
                $('#couponName').val(data.coupon.couponCode);
                $('#couponType').val(data.coupon.couponType);
                $('#validTill').val(moment(new Date(data.coupon.validTill)).format("DD-MMM-YYYY"));
                $('#minOrder').val(data.coupon.minOrder);
                $('#discountType').val(data.coupon.discountType);
                $('#amount').val(data.coupon.discountAmount);
                $('#terms').val(data.coupon.termsAndCondition);
                $('#description').val(data.coupon.description);
            }
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });


});
var filterCouponData = function(url, name, mobile){
    //delete the table
    $("#coupons").remove();
    $("#coupons_wrapper").remove();
    //recreate the table
    $("#tDiv").append(
        '<table class="table table-striped table-bordered table-hover table-checkable order-column" id="coupons">'+
            '<thead>'+
                '<tr class="uppercase">'+
                    '<th class="table-checkbox">'+
                        '<input type="checkbox" class="group-checkable" data-set="#coupons .checkboxes" /> </th>'+
                    '<th> Name </th>'+
                    '<th> Type </th>'+
                    '<th> Valid Till </th>'+
                    '<th> Min Order </th>'+
                    '<th> Discount Type </th>'+
                     '<th> Amount </th>'+
                '</tr>'+
            '</thead>'+
            '<tbody id="tableData"></tbody>'+
        '</table>'
    );


    // url = url + '&fromDate=' + fromDate.format('YYYY-MM-DD') + '&toDate=' + toDate.format('YYYY-MM-DD');
    // if(couponId != null && couponId!= -1){
    //     url = url + '&couponId=' + couponId;
    // }
    // if(modeType != null && modeType!= -1){
    //     url = url + '&modeType=' + modeType;
    // }
    getCouponData(url);
};

var goToCoupons = function(couponId){
    window.location = '/coupons/' + couponId;
};

var getCouponData = function(url){
    App.blockUI({
        target: '#coupons_portlet',
        animate: true
    });

    window.setTimeout(function() {
        App.unblockUI('#coupons_portlet');
    }, 500);


    $.ajax({
        url: url,
        type: 'GET',
        success: function(data) {
            if (data.data) {
                for (i = 0; i < data.data.length; i++) {
                    var row = data.data[i];
                    $('#tableData').append(
                        //'<tr class="gradeX' + (i % 2 == 0 ? 'even' : 'odd') + ' role="row">' +
                        '<tr class="odd gradeX">'+
                            '<td><input type="checkbox" class="checkboxes" value="1" data-id="'+ row.id +'"/></td>' +
                            '<td class="clickable" onclick=goToCoupons("'+row.id +'")> ' + (row.couponCode != undefined ? row.couponCode: '') + ' </td>' +
                            '<td> ' + (row.couponType) + ' </td>' +
                            '<td> ' + (row.validTill != undefined ? moment(new Date(row.validTill)).format("DD-MMM-YYYY") : '') + ' </td>' +
                            '<td> ' + (row.minOrder != undefined ? row.minOrder: '') + ' </td>' +
                            '<td> ' + (row.discountType) + ' </td>' +
                            '<td> ' + (row.discountPercentage != undefined ? row.discountAmount: row.discountAmount) + ' </td>' +
                        '</tr>'
                    );
                }
                $("#tableData > tr > td.clickable").hover(function() {
                    $(this).css('cursor','pointer');
                }, function() {
                    $(this).css('cursor','auto');
                });

                $('.checkboxes').change(function() {
                    if($('.checkboxes:checked').length >= 1){
                        $('.btn-delete').removeClass('hidden');
                    }else{
                        $('.btn-delete').addClass('hidden');
                    }       
                });
            }
           // initialize the table
           initializeTable();
        },
        error: function(data) {
            showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
        }
    });
};

var initializeTable = function(){
    var table = $('#coupons');
    table.dataTable({
        "language": {
            "aria": {
                "sortAscending": ": activate to sort column ascending",
                "sortDescending": ": activate to sort column descending"
            },
            "emptyTable": "No data available in table",
            "info": "Showing _START_ to _END_ of _TOTAL_ records",
            "infoEmpty": "No records found",
            "infoFiltered": "(filtered1 from _MAX_ total records)",
            "lengthMenu": "Show _MENU_",
            "search": "Search:",
            "zeroRecords": "No matching records found",
            "paginate": {
                "previous":"Prev",
                "next": "Next",
                "last": "Last",
                "first": "First"
            }
        },

        // Uncomment below line("dom" parameter) to fix the dropdown overflow issue in the datatable cells. The default datatable layout
        // setup uses scrollable div(table-scrollable) with overflow:auto to enable vertical scroll(see: assets/global/plugins/datatables/plugins/bootstrap/dataTables.bootstrap.js). 
        // So when dropdowns used the scrollable div should be removed. 
        //"dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>",

        "bStateSave": false, // save datatable state(pagination, sort, etc) in cookie.
        "pagingType": "bootstrap_extended",
        //"destroy": true,
        "lengthMenu": [
            [5, 10, 15, 20, -1],
            [5, 10, 15, 20, "All"] // change per page values here
        ],
        // set the initial value
        "pageLength": 10,
        "columnDefs": [{  // set default column settings
            'orderable': false,
            'targets': [0]
        }, {
            "searchable": false,
            "targets": [0]
        }],
        "order": [
            [1, "desc"]
        ] // set first column as a default sort by asc
    });

    var tableWrapper = jQuery('#coupons_wrapper');

    table.find('.group-checkable').change(function () {
        var set = jQuery(this).attr("data-set");
        var checked = jQuery(this).is(":checked");
        jQuery(set).each(function () {
            if (checked) {
                $(this).prop("checked", true);
            } else {
                $(this).prop("checked", false);
            }
        });
        jQuery.uniform.update(set);
    });
    App.unblockUI('#coupons_portlet');
};



$('.btn-delete').on('click',function(event){
    swal({
        title: "Are you sure to delete this?",
        text: "You will not be able to recover this item once deleted!",
        type: "info",
        showCancelButton: true,
        closeOnConfirm: false,
        showLoaderOnConfirm: true
    }, function () {
        var i=0, count = $('.checkboxes:checked').length;
        $('.checkboxes:checked').each(function(){
            //ids.push($(this).attr('data-id'));//this is the checked checkbox
            var url = $('#apiUrl').val()+ '/api/coupon/'+ $(this).attr('data-id') +'?token='+$('#token').val();
            $.ajax({
                url: url,
                type: 'DELETE',
                success: function(data) {
                    if (data && data.status) {
                       i++;
                        if(i == count){
                            swal("Deleted!", "coupon has been deleted successfully.", "success");
                            window.location = '/coupons';
                        }
                    }
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                    return false;
                }
            });
        });
        // setTimeout(function () {
        //     swal("Ajax request finished!");
        // }, 2000);
    });
});

getCouponData(buildUrl(getAPIUrl(),'coupons', getToken(), 3000));

$('#filter-submit').on('click', function(event){
    var str = $('#reportrange span').html();
    var dates = str.split(" - "); 
    var fromDate = moment(dates[0], "MMMM D, YYYY");
    var toDate = moment(dates[1], "MMMM D, YYYY");

    event.preventDefault();

    filterCouponData(buildUrl(getAPIUrl(),'coupons', getToken(), 3000), $('#name').val(), $('#mobile').val());
});

initDateRange(null);
$().ready(function() {
    var bulksmsAddForm = $('#bulksms_add_form');
    var bulksmsAddFormErrors = $('.alert-danger', bulksmsAddForm);
    var bulksmsAddFormSuccess = $('.alert-success', bulksmsAddForm);

    //IMPORTANT: update CKEDITOR textarea with actual content before submit
    bulksmsAddForm.on('submit', function() {
        // for(var instanceName in CKEDITOR.instances) {
        //     CKEDITOR.instances[instanceName].updateElement();
        // }
    })

    bulksmsAddForm.validate({
        errorElement: 'span', //default input error message container
        errorClass: 'help-block help-block-error', // default input error message class
        focusInvalid: false, // do not focus the last invalid input
        ignore: "", // validate all fields including form hidden input
        rules: {
            name: {
                required: true
            },
            mobile: {
                required: true,
                number: true,
                maxlength:10,
                minlength: 10
            },
            message: {
                required: true
            }
        },

        messages: {},

        errorPlacement: function (error, element) { // render error placement for each input type
            if (element.parent(".input-group").size() > 0) {
                error.insertAfter(element.parent(".input-group"));
            } else if (element.attr("data-error-container")) { 
                error.appendTo(element.attr("data-error-container"));
            } else if (element.parents('.radio-list').size() > 0) { 
                error.appendTo(element.parents('.radio-list').attr("data-error-container"));
            } else if (element.parents('.radio-inline').size() > 0) { 
                error.appendTo(element.parents('.radio-inline').attr("data-error-container"));
            } else if (element.parents('.checkbox-list').size() > 0) {
                error.appendTo(element.parents('.checkbox-list').attr("data-error-container"));
            } else if (element.parents('.checkbox-inline').size() > 0) { 
                error.appendTo(element.parents('.checkbox-inline').attr("data-error-container"));
            } else {
                error.insertAfter(element); // for other inputs, just perform default behavior
            }
        },

        invalidHandler: function (event, validator) { //display error alert on form submit   
            showAlertMessage('validationError', null, 'danger', 'fa-warning fa-lg');
        },

        highlight: function (element) { // hightlight error inputs
           $(element)
                .closest('.form-group').addClass('has-error'); // set error class to the control group
        },

        unhighlight: function (element) { // revert the change done by hightlight
            $(element)
                .closest('.form-group').removeClass('has-error'); // set error class to the control group
        },

        success: function (label) {
            label
                .closest('.form-group').removeClass('has-error'); // set success class to the control group
        },

        submitHandler: function (form) {
           // alert(bulksmsAddForm.attr('action'));
            var url = bulksmsAddForm.attr('action');
            var data = {
                name: $('#name').val(),
                mobile: $('#mobile').val(),
                message: $('#message').val()
            };

            $.ajax({
                url: url,
                type: 'POST',
                dataType: "json",
                data: JSON.stringify(data),
                contentType: "application/json; charset=utf-8",
                success: function(data) {
                    showAlertMessage('successMessage','Bulk SMS campaign added successfuly.','success','fa-check fa-lg');
                    //window.location.replace("/sales-ledger");
                },
                error: function(data) {
                    showAlertMessage('internaleServerError', data, 'danger', 'fa-warning fa-lg');
                }
            });
        }

    });

     //apply validation on select2 dropdown value change, this only needed for chosen dropdown integration.
    $('.select2me', bulksmsAddForm).change(function () {
        bulksmsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input
    });

    //initialize datepicker
    $('.date-picker').datepicker({
        rtl: App.isRTL(),
        autoclose: true
    });
    $('.date-picker .form-control').change(function() {
        bulksmsAddForm.validate().element($(this)); //revalidate the chosen dropdown value and show error or success message for the input 
    });
});